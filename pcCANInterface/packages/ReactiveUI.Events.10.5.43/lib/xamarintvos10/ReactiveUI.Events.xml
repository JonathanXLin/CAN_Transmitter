<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Events</name>
    </assembly>
    <members>
        <member name="T:AudioToolbox.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AudioToolbox"/> namespace.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.InputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.OutputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
        </member>
        <member name="T:AudioToolbox.InputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.InputAudioQueueEvents.#ctor(AudioToolbox.InputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.InputAudioQueueEvents.InputCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AudioToolbox.OutputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.OutputAudioQueueEvents.#ctor(AudioToolbox.OutputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.OutputAudioQueueEvents.BufferCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AVFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioPlayer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerEvents.#ctor(AVFoundation.AVAudioPlayer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.DecoderError">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.FinishedPlaying">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerEvents.#ctor(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidCancelSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidContinueSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidFinishSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidPauseSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidStartSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.WillSpeakRangeOfSpeechString">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidFinishCollectingMetricsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidFinishDownloadingToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidFinishDownloadingToUrl(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidLoadTimeRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidResolveMediaSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidResolveMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidSendBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.NeedNewBodyStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.WillPerformHttpRedirectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidFinishDownloadingToUrl(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidResolveMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAssetResourceLoaderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioPlayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.BeginInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.BeginInterruption(AVFoundation.AVAudioPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.DecoderErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.EndInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.EndInterruption(AVFoundation.AVAudioPlayer,AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlayingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.BeginInterruption(AVFoundation.AVAudioPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.EndInterruption(AVFoundation.AVAudioPlayer,AVFoundation.AVAudioSessionInterruptionFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVContentKeySessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVContentKeySessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidChange(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReportObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidSucceedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidChange(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroupsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPullDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreAnimation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreAnimation.EventExtensions.Events(CoreAnimation.CAAnimation)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationEvents.#ctor(CoreAnimation.CAAnimation)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CAAnimationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStarted(CoreAnimation.CAAnimation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStarted(CoreAnimation.CAAnimation)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.CALayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CALayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DisplayLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DisplayLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.WillDrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.WillDrawLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DisplayLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.WillDrawLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreBluetooth"/> namespace.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBCentralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheral)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerEvents.#ctor(CoreBluetooth.CBCentralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.ConnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.ConnectionEventDidOccur">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.ConnectionEventDidOccur"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DidUpdateAncsAuthorization">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DidUpdateAncsAuthorization"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DisconnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DiscoveredPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.FailedToConnectPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.UpdatedState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralEvents.#ctor(CoreBluetooth.CBPeripheral)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredCharacteristic">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredDescriptor">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredIncludedService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.IsReadyToSendWriteWithoutResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.ModifiedServices">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiRead">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedCharacterteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedName">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedNotificationState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteCharacteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteDescriptorValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerEvents.#ctor(CoreBluetooth.CBPeripheralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.AdvertisingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicSubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicUnsubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidPublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidUnpublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadRequestReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadyToUpdateSubscribers">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ServiceAdded">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.StateUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WriteRequestsReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.ConnectionEventDidOccurObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.ConnectionEventDidOccur(CoreBluetooth.CBCentralManager,CoreBluetooth.CBConnectionEvent,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DidUpdateAncsAuthorizationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DidUpdateAncsAuthorization(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.UpdatedState(CoreBluetooth.CBCentralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.ConnectionEventDidOccur(CoreBluetooth.CBCentralManager,CoreBluetooth.CBConnectionEvent,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DidUpdateAncsAuthorization(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedState(CoreBluetooth.CBCentralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristicObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiReadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedName(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedName(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAddedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdated(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])">
            <inheritdoc/>
        </member>
        <member name="T:CoreFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFSocket)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFSocketEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFSocketEvents.#ctor(CoreFoundation.CFSocket)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.AcceptEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ConnectEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.DataEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.DataEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ReadEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ReadEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.WriteEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.WriteEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFStreamEvents.#ctor(CoreFoundation.CFStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.CanAcceptBytesEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ClosedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ClosedEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ErrorEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ErrorEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.HasBytesAvailableEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.OpenCompletedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreLocation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreLocation.EventExtensions.Events(CoreLocation.CLLocationManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerEvents.#ctor(CoreLocation.CLLocationManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.AuthorizationChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationsUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreLocation.CLLocationManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.Failed(CoreLocation.CLLocationManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.Failed(CoreLocation.CLLocationManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])">
            <inheritdoc/>
        </member>
        <member name="T:ExternalAccessory.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:ExternalAccessory"/> namespace.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EventExtensions.Events(ExternalAccessory.EAAccessory)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class as observables.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryEvents.#ctor(ExternalAccessory.EAAccessory)">
            <summary>
            Initializes a new instance of the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryEvents.Disconnected">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ExternalAccessory.EAAccessoryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryDelegateRx.DisconnectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAAccessoryDelegate.Disconnected(ExternalAccessory.EAAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryDelegateRx.Disconnected(ExternalAccessory.EAAccessory)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:Foundation"/> namespace.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSCache)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedArchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedUnarchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetService)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetServiceBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSCache"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheEvents.#ctor(Foundation.NSCache)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSCacheEvents.WillEvictObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSCache.WillEvictObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedArchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverEvents.#ctor(Foundation.NSKeyedArchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.EncodedObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverEvents.#ctor(Foundation.NSKeyedUnarchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetService"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceEvents.#ctor(Foundation.NSNetService)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.AddressResolved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.AddressResolved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.DidAcceptConnection">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.DidAcceptConnection"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Published">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Published"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.PublishFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.PublishFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.ResolveFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.ResolveFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Stopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Stopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.UpdatedTxtRecordData">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillPublish">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillPublish"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillResolve">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillResolve"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserEvents.#ctor(Foundation.NSNetServiceBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.DomainRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundDomain">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundService">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.NotSearched">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.ServiceRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSStream"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamEvents.#ctor(Foundation.NSStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSStreamEvents.OnEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSStream.OnEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSCacheDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSCacheDelegateRx.WillEvictObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSCacheDelegate.WillEvictObject(Foundation.NSCache,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheDelegateRx.WillEvictObject(Foundation.NSCache,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedArchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedArchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.EncodedObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finished(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finishing(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finished(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finishing(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finished(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finishing(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finished(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finishing(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSMachPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSMachPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSMachPortDelegateRx.MachMessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSMachPortDelegate.MachMessageReceived(System.IntPtr)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSMachPortDelegateRx.MachMessageReceived(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.DomainRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundDomainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.NotSearchedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStarted(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStopped(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStarted(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStopped(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.AddressResolvedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.AddressResolved(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.DidAcceptConnectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Published(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.ResolveFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.StoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Stopped(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillPublishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillPublish(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillResolveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillResolve(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.AddressResolved(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Published(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Stopped(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillPublish(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillResolve(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSPortDelegateRx.MessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSPortDelegate.MessageReceived(Foundation.NSPortMessage)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSPortDelegateRx.MessageReceived(Foundation.NSPortMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSStreamDelegateRx.HandleEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSStreamDelegate.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamDelegateRx.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.FinishedLoading(Foundation.NSUrlConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.SentBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoading(Foundation.NSUrlConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.WroteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalidObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscoveredObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreamsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.ReadClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.WriteClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionTaskDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionTaskDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetricsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionWebSocketDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionWebSocketDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUserActivityDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUserActivityDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWasContinuedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWasContinued(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWillSaveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWillSave(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWasContinued(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWillSave(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:GameKit"/> namespace.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKGameCenterViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatch)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatchmakerViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
        </member>
        <member name="T:GameKit.GKGameCenterViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterViewControllerEvents.#ctor(GameKit.GKGameCenterViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKGameCenterViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKGameCenterViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatch"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchEvents.#ctor(GameKit.GKMatch)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedForRecipient">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedFromPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.StateChangedForPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerEvents.#ctor(GameKit.GKMatchmakerViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFailWithError">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindHostedPlayers">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindMatch">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.HostedPlayerDidAccept">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.WasCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKGameCenterControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKGameCenterControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKGameCenterControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKGameCenterControllerDelegate.Finished(GameKit.GKGameCenterViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterControllerDelegateRx.Finished(GameKit.GKGameCenterViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKGameSessionSharingViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKGameSessionSharingViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKGameSessionSharingViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKGameSessionSharingViewControllerDelegate.DidFinish(GameKit.GKGameSessionSharingViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKGameSessionSharingViewControllerDelegateRx.DidFinish(GameKit.GKGameSessionSharingViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedForRecipientObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedFromPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.Failed(GameKit.GKMatch,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.StateChangedForPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.Failed(GameKit.GKMatch,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAcceptObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GLKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:GLKit"/> namespace.
            </summary>
        </member>
        <member name="M:GLKit.EventExtensions.Events(GLKit.GLKView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GLKit.GLKView"/> class.
            </summary>
        </member>
        <member name="T:GLKit.GLKViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GLKit.GLKView"/> class as observables.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewEvents.#ctor(GLKit.GLKView)">
            <summary>
            Initializes a new instance of the <see cref = "T:GLKit.GLKView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GLKit.GLKViewEvents.DrawInRect">
            <summary>
            Gets an observable which signals when the <see cref = "E:GLKit.GLKView.DrawInRect"/> event triggers.
            </summary>
        </member>
        <member name="T:GLKit.GLKViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GLKit.GLKViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewControllerDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewControllerDelegate.Update(GLKit.GLKViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewControllerDelegateRx.WillPauseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewControllerDelegate.WillPause(GLKit.GLKViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewControllerDelegateRx.Update(GLKit.GLKViewController)">
            <inheritdoc/>
        </member>
        <member name="M:GLKit.GLKViewControllerDelegateRx.WillPause(GLKit.GLKViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GLKit.GLKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GLKit.GLKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewDelegateRx.DrawInRectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewDelegate.DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewDelegateRx.DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:HomeKit"/> namespace.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMAccessory)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMAccessory"/> class.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMHome)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMHome"/> class.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMHomeManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMHomeManager"/> class.
            </summary>
        </member>
        <member name="T:HomeKit.HMAccessoryEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMAccessory"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryEvents.#ctor(HomeKit.HMAccessory)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMAccessory"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidAddProfile">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidAddProfile"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidRemoveProfile">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidRemoveProfile"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateAssociatedServiceType">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateAssociatedServiceType"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateFirmwareVersion">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateFirmwareVersion"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateName">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateName"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateNameForService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateNameForService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateReachability">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateReachability"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateServices">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateServices"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateValueForCharacteristic">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateValueForCharacteristic"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMHomeEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMHome"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeEvents.#ctor(HomeKit.HMHome)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMHome"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddRoomToZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddRoomToZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidEncounterError">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidEncounterError"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveRoomFromZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveRoomFromZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUnblockAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUnblockAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateAccessControlForCurrentUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateAccessControlForCurrentUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateActionsForActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateActionsForActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateHomeHubState">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateHomeHubState"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateTrigger"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMHomeManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMHomeManager"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeManagerEvents.#ctor(HomeKit.HMHomeManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMHomeManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidAddHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidAddHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidRemoveHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidRemoveHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdateAuthorizationStatus">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdateAuthorizationStatus"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdateHomes">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdateHomes"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdatePrimaryHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdatePrimaryHome"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMAccessoryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMAccessoryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidAddProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidAddProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidRemoveProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidRemoveProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateAssociatedServiceTypeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateAssociatedServiceType(HomeKit.HMAccessory,HomeKit.HMService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateFirmwareVersionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateFirmwareVersion(HomeKit.HMAccessory,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateName(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateNameForServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateNameForService(HomeKit.HMAccessory,HomeKit.HMService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateReachabilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateReachability(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateServicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateServices(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateValueForCharacteristicObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateValueForCharacteristic(HomeKit.HMAccessory,HomeKit.HMService,HomeKit.HMCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidAddProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidRemoveProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateAssociatedServiceType(HomeKit.HMAccessory,HomeKit.HMService)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateFirmwareVersion(HomeKit.HMAccessory,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateName(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateNameForService(HomeKit.HMAccessory,HomeKit.HMService)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateReachability(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateServices(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateValueForCharacteristic(HomeKit.HMAccessory,HomeKit.HMService,HomeKit.HMCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMCameraSnapshotControlDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMCameraSnapshotControlDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraSnapshotControlDelegateRx.DidTakeSnapshotObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraSnapshotControlDelegate.DidTakeSnapshot(HomeKit.HMCameraSnapshotControl,HomeKit.HMCameraSnapshot,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraSnapshotControlDelegateRx.DidUpdateMostRecentSnapshotObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraSnapshotControlDelegate.DidUpdateMostRecentSnapshot(HomeKit.HMCameraSnapshotControl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMCameraSnapshotControlDelegateRx.DidTakeSnapshot(HomeKit.HMCameraSnapshotControl,HomeKit.HMCameraSnapshot,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMCameraSnapshotControlDelegateRx.DidUpdateMostRecentSnapshot(HomeKit.HMCameraSnapshotControl)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMCameraStreamControlDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMCameraStreamControlDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraStreamControlDelegateRx.DidStartStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraStreamControlDelegate.DidStartStream(HomeKit.HMCameraStreamControl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraStreamControlDelegateRx.DidStopStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraStreamControlDelegate.DidStopStream(HomeKit.HMCameraStreamControl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMCameraStreamControlDelegateRx.DidStartStream(HomeKit.HMCameraStreamControl)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMCameraStreamControlDelegateRx.DidStopStream(HomeKit.HMCameraStreamControl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMHomeDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMHomeDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddRoomToZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddRoomToZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddUser(HomeKit.HMHome,HomeKit.HMUser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidEncounterError(HomeKit.HMHome,Foundation.NSError,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveRoomFromZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveRoomFromZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveUser(HomeKit.HMHome,HomeKit.HMUser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUnblockAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUnblockAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateAccessControlForCurrentUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateAccessControlForCurrentUser(HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateActionsForActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateActionsForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateHomeHubStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateHomeHubState(HomeKit.HMHome,HomeKit.HMHomeHubState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForHome(HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateRoom(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddRoomToZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddUser(HomeKit.HMHome,HomeKit.HMUser)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidEncounterError(HomeKit.HMHome,Foundation.NSError,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveRoomFromZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveUser(HomeKit.HMHome,HomeKit.HMUser)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUnblockAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateAccessControlForCurrentUser(HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateActionsForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateHomeHubState(HomeKit.HMHome,HomeKit.HMHomeHubState)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForHome(HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateRoom(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMHomeManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMHomeManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidAddHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidAddHome(HomeKit.HMHomeManager,HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidRemoveHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidRemoveHome(HomeKit.HMHomeManager,HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdateAuthorizationStatusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdateAuthorizationStatus(HomeKit.HMHomeManager,HomeKit.HMHomeManagerAuthorizationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdateHomesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdateHomes(HomeKit.HMHomeManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdatePrimaryHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdatePrimaryHome(HomeKit.HMHomeManager)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidAddHome(HomeKit.HMHomeManager,HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidRemoveHome(HomeKit.HMHomeManager,HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdateAuthorizationStatus(HomeKit.HMHomeManager,HomeKit.HMHomeManagerAuthorizationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdateHomes(HomeKit.HMHomeManager)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdatePrimaryHome(HomeKit.HMHomeManager)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMNetworkConfigurationProfileDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMNetworkConfigurationProfileDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMNetworkConfigurationProfileDelegateRx.DidUpdateNetworkAccessModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMNetworkConfigurationProfileDelegate.DidUpdateNetworkAccessMode(HomeKit.HMNetworkConfigurationProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMNetworkConfigurationProfileDelegateRx.DidUpdateNetworkAccessMode(HomeKit.HMNetworkConfigurationProfile)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:MapKit"/> namespace.
            </summary>
        </member>
        <member name="M:MapKit.EventExtensions.Events(MapKit.MKMapView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
        </member>
        <member name="T:MapKit.MKMapViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MapKit.MKMapView"/> class as observables.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewEvents.#ctor(MapKit.MKMapView)">
            <summary>
            Initializes a new instance of the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddAnnotationViews">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddOverlayRenderers">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidChangeUserTrackingMode">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidChangeUserTrackingMode"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidChangeVisibleRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidDeselectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFailToLocateUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFinishRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidSelectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidStopLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidUpdateUserLocation">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.LoadingMapFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.LoadingMapFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.MapLoaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.MapLoaded"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionWillChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionWillChange"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLoadingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="T:MapKit.MKLocalSearchCompleterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults(MapKit.MKLocalSearchCompleter)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResults(MapKit.MKLocalSearchCompleter)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.MKMapViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKMapViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddAnnotationViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidChangeUserTrackingModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidChangeVisibleRegion(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFailToLocateUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFinishRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidSelectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidStopLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidStopLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidUpdateUserLocationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.LoadingMapFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.MapLoadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.MapLoaded(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionChanged(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionWillChange(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLoadingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLoadingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartRenderingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegion(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidStopLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.MapLoaded(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionChanged(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionWillChange(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLoadingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartRenderingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SceneKit"/> namespace.
            </summary>
        </member>
        <member name="M:SceneKit.EventExtensions.Events(SceneKit.SCNPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SceneKit.SCNPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsWorldEvents.#ctor(SceneKit.SCNPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidUpdateContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SceneKit.SCNAvoidOccluderConstraintDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNCameraControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNCameraControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEnd(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStart(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNNodeRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNNodeRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNNodeRendererDelegateRx.RenderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNNodeRendererDelegate.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNNodeRendererDelegateRx.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNProgramDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNProgramDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNProgramDelegateRx.HandleErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNProgramDelegate.HandleError(SceneKit.SCNProgram,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNProgramDelegateRx.HandleError(SceneKit.SCNProgram,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNSceneRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNSceneRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.Update(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.WillRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.Update(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SpriteKit"/> namespace.
            </summary>
        </member>
        <member name="M:SpriteKit.EventExtensions.Events(SpriteKit.SKPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsWorldEvents.#ctor(SpriteKit.SKPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidBeginContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidEndContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidEndContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.SKSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidApplyConstraints(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidEvaluateActionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidEvaluateActions(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidFinishUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidFinishUpdate(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidSimulatePhysics(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.Update(System.Double,SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidApplyConstraints(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidEvaluateActions(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidFinishUpdate(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidSimulatePhysics(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.Update(System.Double,SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:StoreKit"/> namespace.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKProductsRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
        </member>
        <member name="T:StoreKit.SKProductsRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestEvents.#ctor(StoreKit.SKProductsRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKProductsRequestEvents.ReceivedResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestEvents.#ctor(StoreKit.SKRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFinished"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKProductsRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKProductsRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKProductsRequestDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKProductsRequestDelegate.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestDelegateRx.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.SKRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFailed(StoreKit.SKRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFinished(StoreKit.SKRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFailed(StoreKit.SKRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFinished(StoreKit.SKRequest)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:UIKit"/> namespace.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.NSTextStorage)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.NSTextStorage"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIBarButtonItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIBarButtonItem"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UICollisionBehavior)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UICollisionBehavior"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIControl)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIControl"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPageViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPageViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPopoverController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPopoverController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIScrollView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIScrollView"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UISearchBar)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UISearchBar"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UISplitViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UISplitViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITabBar)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITabBar"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITabBarController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITabBarController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITextField)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITextField"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITextView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITextView"/> class.
            </summary>
        </member>
        <member name="T:UIKit.NSTextStorageEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.NSTextStorage"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.NSTextStorageEvents.#ctor(UIKit.NSTextStorage)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.NSTextStorage"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.NSTextStorageEvents.DidProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.NSTextStorage.DidProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageEvents.WillProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.NSTextStorage.WillProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIBarButtonItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIBarButtonItem"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIBarButtonItemEvents.#ctor(UIKit.UIBarButtonItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIBarButtonItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIBarButtonItemEvents.Clicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIBarButtonItem.Clicked"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UICollisionBehaviorEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UICollisionBehavior"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UICollisionBehaviorEvents.#ctor(UIKit.UICollisionBehavior)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UICollisionBehavior"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.BeganBoundaryContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.BeganBoundaryContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.BeganContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.BeganContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.EndedBoundaryContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.EndedBoundaryContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.EndedContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.EndedContact"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIControlEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIControl"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIControlEvents.#ctor(UIKit.UIControl)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIControl"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIControlEvents.AllEditingEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllEditingEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.AllEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.AllTouchEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllTouchEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidBegin">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidBegin"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidEnd">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidEnd"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidEndOnExit">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidEndOnExit"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.PrimaryActionTriggered">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.PrimaryActionTriggered"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchCancel">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchCancel"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDown">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDown"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDownRepeat">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDownRepeat"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragEnter">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragEnter"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragExit">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragExit"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragInside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragInside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragOutside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragOutside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchUpInside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchUpInside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchUpOutside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchUpOutside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.ValueChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.ValueChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPageViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPageViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPageViewControllerEvents.#ctor(UIKit.UIPageViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPageViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPageViewControllerEvents.DidFinishAnimating">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPageViewController.DidFinishAnimating"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerEvents.WillTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPageViewController.WillTransition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPopoverControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPopoverController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverControllerEvents.#ctor(UIKit.UIPopoverController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPopoverController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPopoverControllerEvents.DidDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverController.DidDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverControllerEvents.WillReposition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverController.WillReposition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIScrollViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIScrollView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIScrollViewEvents.#ctor(UIKit.UIScrollView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIScrollView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DecelerationEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DecelerationEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DecelerationStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DecelerationStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DidChangeAdjustedContentInset">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DidChangeAdjustedContentInset"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DidZoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DidZoom"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DraggingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DraggingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DraggingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DraggingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ScrollAnimationEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ScrollAnimationEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.Scrolled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.Scrolled"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ScrolledToTop">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ScrolledToTop"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.WillEndDragging">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.WillEndDragging"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ZoomingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ZoomingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ZoomingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ZoomingStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UISearchBarEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UISearchBar"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UISearchBarEvents.#ctor(UIKit.UISearchBar)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UISearchBar"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UISearchBarEvents.OnEditingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.OnEditingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.OnEditingStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.OnEditingStopped"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.SearchButtonClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.SearchButtonClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.SelectedScopeButtonIndexChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.SelectedScopeButtonIndexChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.TextChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.TextChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UISplitViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UISplitViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UISplitViewControllerEvents.#ctor(UIKit.UISplitViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UISplitViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UISplitViewControllerEvents.WillChangeDisplayMode">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISplitViewController.WillChangeDisplayMode"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITabBarEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITabBar"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarEvents.#ctor(UIKit.UITabBar)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITabBar"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITabBarEvents.ItemSelected">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.ItemSelected"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITabBarControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITabBarController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarControllerEvents.#ctor(UIKit.UITabBarController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITabBarController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITabBarControllerEvents.ViewControllerSelected">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBarController.ViewControllerSelected"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITextFieldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITextField"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITextFieldEvents.#ctor(UIKit.UITextField)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITextField"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITextFieldEvents.Ended">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.Ended"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldEvents.EndedWithReason">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.EndedWithReason"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldEvents.Started">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.Started"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITextViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITextView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITextViewEvents.#ctor(UIKit.UITextView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITextView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITextViewEvents.Changed">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Changed"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.Ended">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Ended"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.SelectionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.SelectionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.Started">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Started"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.NSLayoutManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.NSLayoutManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidChangeGeometryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidChangeGeometry(UIKit.NSLayoutManager,UIKit.NSTextContainer,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidCompleteLayoutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidCompleteLayout(UIKit.NSLayoutManager,UIKit.NSTextContainer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidInvalidatedLayoutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidInvalidatedLayout(UIKit.NSLayoutManager)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidChangeGeometry(UIKit.NSLayoutManager,UIKit.NSTextContainer,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidCompleteLayout(UIKit.NSLayoutManager,UIKit.NSTextContainer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidInvalidatedLayout(UIKit.NSLayoutManager)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.NSTextStorageDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.NSTextStorageDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageDelegateRx.DidProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSTextStorageDelegate.DidProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageDelegateRx.WillProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSTextStorageDelegate.WillProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.NSTextStorageDelegateRx.DidProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSTextStorageDelegateRx.WillProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIAdaptivePresentationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIAdaptivePresentationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.DidAttemptToDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.DidAttemptToDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.DidDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.WillDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.WillPresent(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.DidAttemptToDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.DidDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.WillDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.WillPresent(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIApplicationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIApplicationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ApplicationSignificantTimeChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ApplicationSignificantTimeChange(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidDecodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidDiscardSceneSessionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidEnterBackground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidFailToContinueUserActivitiyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidReceiveRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.FailedToRegisterForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.FinishedLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleEventsForBackgroundUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleWatchKitExtensionRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.OnActivatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.OnActivated(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.OnResignActivationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.OnResignActivation(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.PerformFetchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ProtectedDataDidBecomeAvailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ProtectedDataWillBecomeUnavailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ReceivedRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ReceiveMemoryWarningObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ReceiveMemoryWarning(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.RegisteredForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ShouldRequestHealthAuthorizationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ShouldRequestHealthAuthorization(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.UserActivityUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillEnterForeground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillTerminate(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ApplicationSignificantTimeChange(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidEnterBackground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.FinishedLaunching(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.OnActivated(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.OnResignActivation(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ReceiveMemoryWarning(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ShouldRequestHealthAuthorization(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillEnterForeground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillTerminate(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollectionViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollectionViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.SupplementaryViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.WillDisplayCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.WillDisplaySupplementaryViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollisionBehaviorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollisionBehaviorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.BeganBoundaryContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.BeganBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.BeganContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.BeganContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.EndedBoundaryContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.EndedBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.EndedContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.EndedContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.BeganBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.BeganContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.EndedBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.EndedContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDynamicAnimatorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDynamicAnimatorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDynamicAnimatorDelegateRx.DidPauseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDynamicAnimatorDelegate.DidPause(UIKit.UIDynamicAnimator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDynamicAnimatorDelegateRx.WillResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDynamicAnimatorDelegate.WillResume(UIKit.UIDynamicAnimator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDynamicAnimatorDelegateRx.DidPause(UIKit.UIDynamicAnimator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDynamicAnimatorDelegateRx.WillResume(UIKit.UIDynamicAnimator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UINavigationBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UINavigationBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationBarDelegateRx.DidPopItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationBarDelegate.DidPopItem(UIKit.UINavigationBar,UIKit.UINavigationItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationBarDelegateRx.DidPushItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationBarDelegate.DidPushItem(UIKit.UINavigationBar,UIKit.UINavigationItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UINavigationBarDelegateRx.DidPopItem(UIKit.UINavigationBar,UIKit.UINavigationItem)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UINavigationBarDelegateRx.DidPushItem(UIKit.UINavigationBar,UIKit.UINavigationItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UINavigationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UINavigationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationControllerDelegateRx.DidShowViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationControllerDelegate.DidShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationControllerDelegateRx.WillShowViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationControllerDelegate.WillShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UINavigationControllerDelegateRx.DidShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UINavigationControllerDelegateRx.WillShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPageViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPageViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerDelegateRx.DidFinishAnimatingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPageViewControllerDelegate.DidFinishAnimating(UIKit.UIPageViewController,System.Boolean,UIKit.UIViewController[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerDelegateRx.WillTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPageViewControllerDelegate.WillTransition(UIKit.UIPageViewController,UIKit.UIViewController[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPageViewControllerDelegateRx.DidFinishAnimating(UIKit.UIPageViewController,System.Boolean,UIKit.UIViewController[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPageViewControllerDelegateRx.WillTransition(UIKit.UIPageViewController,UIKit.UIViewController[])">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPopoverControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPopoverControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPopoverControllerDelegate.DidDismiss(UIKit.UIPopoverController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverControllerDelegateRx.DidDismiss(UIKit.UIPopoverController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.ContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidBecomeActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidDisconnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidDisconnect(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidEnterBackground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidFailToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidUpdateUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.OpenUrlContextsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillContinueUserActivity(UIKit.UIScene,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillEnterForeground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillResignActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidBecomeActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidDisconnect(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidEnterBackground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillContinueUserActivity(UIKit.UIScene,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillEnterForeground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillResignActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIScreenshotServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIScreenshotServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIScreenshotServiceDelegateRx.GeneratePdfRepresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScreenshotServiceDelegate.GeneratePdfRepresentation(UIKit.UIScreenshotService,UIKit.UIScreenshotServiceDelegatePdfHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIScreenshotServiceDelegateRx.GeneratePdfRepresentation(UIKit.UIScreenshotService,UIKit.UIScreenshotServiceDelegatePdfHandler)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIScrollViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIScrollViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DecelerationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DecelerationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DecelerationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DecelerationStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DidChangeAdjustedContentInsetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DidChangeAdjustedContentInset(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DidZoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DidZoom(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DraggingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DraggingEnded(UIKit.UIScrollView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DraggingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DraggingStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrollAnimationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ScrollAnimationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrolledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.Scrolled(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrolledToTopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ScrolledToTop(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ZoomingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ZoomingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DecelerationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DecelerationStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DidChangeAdjustedContentInset(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DidZoom(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DraggingEnded(UIKit.UIScrollView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DraggingStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ScrollAnimationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.Scrolled(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ScrolledToTop(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.OnEditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.OnEditingStarted(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.OnEditingStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.OnEditingStopped(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.SearchButtonClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.SearchButtonClicked(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.SelectedScopeButtonIndexChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.SelectedScopeButtonIndexChanged(UIKit.UISearchBar,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.TextChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.TextChanged(UIKit.UISearchBar,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.OnEditingStarted(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.OnEditingStopped(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.SearchButtonClicked(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.SelectedScopeButtonIndexChanged(UIKit.UISearchBar,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.TextChanged(UIKit.UISearchBar,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.DidDismissSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.DidDismissSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.DidPresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.DidPresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.PresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.PresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.WillDismissSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.WillDismissSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.WillPresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.WillPresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.DidDismissSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.DidPresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.PresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.WillDismissSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.WillPresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISplitViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISplitViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerDelegateRx.WillChangeDisplayModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISplitViewControllerDelegate.WillChangeDisplayMode(UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISplitViewControllerDelegateRx.WillChangeDisplayMode(UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITabBarControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITabBarControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerDelegateRx.ViewControllerSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarControllerDelegate.ViewControllerSelected(UIKit.UITabBarController,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarControllerDelegateRx.ViewControllerSelected(UIKit.UITabBarController,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITabBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITabBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.ItemSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.ItemSelected(UIKit.UITabBar,UIKit.UITabBarItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.ItemSelected(UIKit.UITabBar,UIKit.UITabBarItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.AccessoryButtonTappedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.FooterViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.HeaderViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayFooterViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayHeaderViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewSourceRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewSource"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.AccessoryButtonTappedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.CommitEditingStyleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.FooterViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.HeaderViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.MoveRowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayFooterViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayHeaderViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextFieldDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextFieldDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.DidChangeSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.DidChangeSelection(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.EditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.EditingStarted(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.DidChangeSelection(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.EditingStarted(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextFormattingCoordinatorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextFormattingCoordinatorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextFormattingCoordinatorDelegateRx.UpdateTextAttributesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFormattingCoordinatorDelegate.UpdateTextAttributes(UIKit.UITextAttributesConversionHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextFormattingCoordinatorDelegateRx.UpdateTextAttributes(UIKit.UITextAttributesConversionHandler)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextInputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextInputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.SelectionDidChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.SelectionWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.SelectionWillChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.TextDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.TextDidChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.TextWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.TextWillChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.SelectionDidChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.SelectionWillChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.TextDidChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.TextWillChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.ChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.Changed(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.EditingEnded(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.EditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.EditingStarted(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.SelectionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.SelectionChanged(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.Changed(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.EditingEnded(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.EditingStarted(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.SelectionChanged(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIViewControllerPreviewingDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIViewControllerPreviewingDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIViewControllerPreviewingDelegateRx.CommitViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIViewControllerPreviewingDelegate.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIViewControllerPreviewingDelegateRx.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIWindowSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIWindowSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.ContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidBecomeActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidDisconnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidDisconnect(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidEnterBackground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidFailToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidUpdateUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.OpenUrlContextsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.UserDidAcceptCloudKitShare(UIKit.UIWindowScene,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillContinueUserActivity(UIKit.UIScene,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillEnterForeground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillResignActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidBecomeActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidDisconnect(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidEnterBackground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.UserDidAcceptCloudKitShare(UIKit.UIWindowScene,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillContinueUserActivity(UIKit.UIScene,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillEnterForeground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillResignActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="T:ObjCRuntime.Events">
            <summary>
            A class that contains extension methods to wrap events contained within static classes within the <see cref = "N:ObjCRuntime"/> namespace.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalManagedException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalObjectiveCException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
            </summary>
        </member>
        <member name="T:AuthenticationServices.ASAuthorizationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AuthenticationServices.ASAuthorizationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AuthenticationServices.ASAuthorizationControllerDelegate.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVPlayerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVPlayerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidAcceptContentProposalObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidAcceptContentProposal(AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidEndDismissalTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidEndDismissalTransition(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidPresentInterstitialTimeRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidPresentInterstitialTimeRange(AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidRejectContentProposalObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidRejectContentProposal(AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidSelectExternalSubtitleOptionLanguageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidSelectExternalSubtitleOptionLanguage(AVKit.AVPlayerViewController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidSelectMediaSelectionOptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidSelectMediaSelectionOption(AVKit.AVPlayerViewController,AVFoundation.AVMediaSelectionOption,AVFoundation.AVMediaSelectionGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.SkipToNextChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.SkipToNextChannel(AVKit.AVPlayerViewController,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.SkipToNextItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.SkipToNextItem(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.SkipToPreviousChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.SkipToPreviousChannel(AVKit.AVPlayerViewController,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.SkipToPreviousItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.SkipToPreviousItem(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillBeginDismissalTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillBeginDismissalTransition(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillPresentInterstitialTimeRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillPresentInterstitialTimeRange(AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillResumePlaybackAfterUserNavigatedFromTimeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillResumePlaybackAfterUserNavigatedFromTime(AVKit.AVPlayerViewController,CoreMedia.CMTime,CoreMedia.CMTime)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillTransitionToVisibilityOfTransportBarObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillTransitionToVisibilityOfTransportBar(AVKit.AVPlayerViewController,System.Boolean,AVKit.IAVPlayerViewControllerAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidAcceptContentProposal(AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidEndDismissalTransition(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidPresentInterstitialTimeRange(AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidRejectContentProposal(AVKit.AVPlayerViewController,AVFoundation.AVContentProposal)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidSelectExternalSubtitleOptionLanguage(AVKit.AVPlayerViewController,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidSelectMediaSelectionOption(AVKit.AVPlayerViewController,AVFoundation.AVMediaSelectionOption,AVFoundation.AVMediaSelectionGroup)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.SkipToNextChannel(AVKit.AVPlayerViewController,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.SkipToNextItem(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.SkipToPreviousChannel(AVKit.AVPlayerViewController,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.SkipToPreviousItem(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillBeginDismissalTransition(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillPresentInterstitialTimeRange(AVKit.AVPlayerViewController,AVKit.AVInterstitialTimeRange)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillResumePlaybackAfterUserNavigatedFromTime(AVKit.AVPlayerViewController,CoreMedia.CMTime,CoreMedia.CMTime)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillTransitionToVisibilityOfTransportBar(AVKit.AVPlayerViewController,System.Boolean,AVKit.IAVPlayerViewControllerAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVRoutePickerViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVRoutePickerViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.DidEndPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="T:CoreData.NSFetchedResultsControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreData.NSFetchedResultsControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeContentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeContent(CoreData.NSFetchedResultsController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeObject(CoreData.NSFetchedResultsController,Foundation.NSObject,Foundation.NSIndexPath,CoreData.NSFetchedResultsChangeType,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeSectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeSection(CoreData.NSFetchedResultsController,CoreData.INSFetchedResultsSectionInfo,System.nuint,CoreData.NSFetchedResultsChangeType)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.WillChangeContentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.WillChangeContent(CoreData.NSFetchedResultsController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeContent(CoreData.NSFetchedResultsController)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeObject(CoreData.NSFetchedResultsController,Foundation.NSObject,Foundation.NSIndexPath,CoreData.NSFetchedResultsChangeType,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeSection(CoreData.NSFetchedResultsController,CoreData.INSFetchedResultsSectionInfo,System.nuint,CoreData.NSFetchedResultsChangeType)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.WillChangeContent(CoreData.NSFetchedResultsController)">
            <inheritdoc/>
        </member>
        <member name="T:GameplayKit.GKAgentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameplayKit.GKAgentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentDidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentDidUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentWillUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentWillUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentDidUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentWillUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="T:MetalKit.MTKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MetalKit.MTKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.Draw(MetalKit.MTKView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawableSizeWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.Draw(MetalKit.MTKView)">
            <inheritdoc/>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCBrowserViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinish(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelled(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidChangeStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)">
            <inheritdoc/>
        </member>
        <member name="T:PhotosUI.PHLivePhotoViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPBroadcastActivityViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPBroadcastActivityViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastActivityViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastActivityViewControllerDelegate.DidFinish(ReplayKit.RPBroadcastActivityViewController,ReplayKit.RPBroadcastController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPBroadcastActivityViewControllerDelegateRx.DidFinish(ReplayKit.RPBroadcastActivityViewController,ReplayKit.RPBroadcastController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPBroadcastControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPBroadcastControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidFinish(ReplayKit.RPBroadcastController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateBroadcastUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidUpdateBroadcastUrl(ReplayKit.RPBroadcastController,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateServiceInfoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidUpdateServiceInfo(ReplayKit.RPBroadcastController,Foundation.NSDictionary{Foundation.NSString,Foundation.INSCoding})"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidFinish(ReplayKit.RPBroadcastController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateBroadcastUrl(ReplayKit.RPBroadcastController,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateServiceInfo(ReplayKit.RPBroadcastController,Foundation.NSDictionary{Foundation.NSString,Foundation.INSCoding})">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPPreviewViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPPreviewViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPPreviewViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPPreviewViewControllerDelegate.DidFinish(ReplayKit.RPPreviewViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPPreviewViewControllerDelegateRx.DidFinish(ReplayKit.RPPreviewViewController)">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPScreenRecorderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPScreenRecorderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPScreenRecorderDelegateRx.DidChangeAvailabilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPScreenRecorderDelegate.DidChangeAvailability(ReplayKit.RPScreenRecorder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPScreenRecorderDelegateRx.DidStopRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPScreenRecorderDelegate.DidStopRecording(ReplayKit.RPScreenRecorder,Foundation.NSError,ReplayKit.RPPreviewViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPScreenRecorderDelegateRx.DidChangeAvailability(ReplayKit.RPScreenRecorder)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPScreenRecorderDelegateRx.DidStopRecording(ReplayKit.RPScreenRecorder,Foundation.NSError,ReplayKit.RPPreviewViewController)">
            <inheritdoc/>
        </member>
        <member name="T:TVMLKit.TVApplicationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:TVMLKit.TVApplicationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:TVMLKit.TVApplicationControllerDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVApplicationControllerDelegate.DidFail(TVMLKit.TVApplicationController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVApplicationControllerDelegateRx.DidFinishLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVApplicationControllerDelegate.DidFinishLaunching(TVMLKit.TVApplicationController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVApplicationControllerDelegateRx.DidStopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVApplicationControllerDelegate.DidStop(TVMLKit.TVApplicationController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVApplicationControllerDelegateRx.EvaluateAppJavaScriptObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVApplicationControllerDelegate.EvaluateAppJavaScript(TVMLKit.TVApplicationController,JavaScriptCore.JSContext)"/> method is invoked.
            </summary>
        </member>
        <member name="M:TVMLKit.TVApplicationControllerDelegateRx.DidFail(TVMLKit.TVApplicationController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVApplicationControllerDelegateRx.DidFinishLaunching(TVMLKit.TVApplicationController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVApplicationControllerDelegateRx.DidStop(TVMLKit.TVApplicationController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVApplicationControllerDelegateRx.EvaluateAppJavaScript(TVMLKit.TVApplicationController,JavaScriptCore.JSContext)">
            <inheritdoc/>
        </member>
        <member name="T:TVMLKit.TVBrowserViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:TVMLKit.TVBrowserViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:TVMLKit.TVBrowserViewControllerDelegateRx.DidCenterOnViewElementObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVBrowserViewControllerDelegate.DidCenterOnViewElement(TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVBrowserViewControllerDelegateRx.WillCenterOnViewElementObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVBrowserViewControllerDelegate.WillCenterOnViewElement(TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)"/> method is invoked.
            </summary>
        </member>
        <member name="M:TVMLKit.TVBrowserViewControllerDelegateRx.DidCenterOnViewElement(TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVBrowserViewControllerDelegateRx.WillCenterOnViewElement(TVMLKit.TVBrowserViewController,TVMLKit.TVViewElement)">
            <inheritdoc/>
        </member>
        <member name="T:TVMLKit.TVDocumentViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:TVMLKit.TVDocumentViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:TVMLKit.TVDocumentViewControllerDelegateRx.DidFailUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVDocumentViewControllerDelegate.DidFailUpdate(TVMLKit.TVDocumentViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVDocumentViewControllerDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVDocumentViewControllerDelegate.DidUpdate(TVMLKit.TVDocumentViewController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:TVMLKit.TVDocumentViewControllerDelegateRx.WillUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:TVMLKit.TVDocumentViewControllerDelegate.WillUpdate(TVMLKit.TVDocumentViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:TVMLKit.TVDocumentViewControllerDelegateRx.DidFailUpdate(TVMLKit.TVDocumentViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVDocumentViewControllerDelegateRx.DidUpdate(TVMLKit.TVDocumentViewController,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:TVMLKit.TVDocumentViewControllerDelegateRx.WillUpdate(TVMLKit.TVDocumentViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UserNotifications.UNUserNotificationCenterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})"/> method is invoked.
            </summary>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})">
            <inheritdoc/>
        </member>
        <member name="T:VideoSubscriberAccount.VSAccountManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
    </members>
</doc>
