<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Events</name>
    </assembly>
    <members>
        <member name="T:AddressBook.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AddressBook"/> namespace.
            </summary>
        </member>
        <member name="M:AddressBook.EventExtensions.Events(AddressBook.ABAddressBook)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AddressBook.ABAddressBook"/> class.
            </summary>
        </member>
        <member name="T:AddressBook.ABAddressBookEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AddressBook.ABAddressBook"/> class as observables.
            </summary>
        </member>
        <member name="M:AddressBook.ABAddressBookEvents.#ctor(AddressBook.ABAddressBook)">
            <summary>
            Initializes a new instance of the <see cref = "T:AddressBook.ABAddressBook"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AddressBook.ABAddressBookEvents.ExternalChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBook.ABAddressBook.ExternalChange"/> event triggers.
            </summary>
        </member>
        <member name="T:AddressBookUI.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AddressBookUI"/> namespace.
            </summary>
        </member>
        <member name="M:AddressBookUI.EventExtensions.Events(AddressBookUI.ABNewPersonViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AddressBookUI.ABNewPersonViewController"/> class.
            </summary>
        </member>
        <member name="M:AddressBookUI.EventExtensions.Events(AddressBookUI.ABPeoplePickerNavigationController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AddressBookUI.ABPeoplePickerNavigationController"/> class.
            </summary>
        </member>
        <member name="M:AddressBookUI.EventExtensions.Events(AddressBookUI.ABPersonViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AddressBookUI.ABPersonViewController"/> class.
            </summary>
        </member>
        <member name="M:AddressBookUI.EventExtensions.Events(AddressBookUI.ABUnknownPersonViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AddressBookUI.ABUnknownPersonViewController"/> class.
            </summary>
        </member>
        <member name="T:AddressBookUI.ABNewPersonViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AddressBookUI.ABNewPersonViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABNewPersonViewControllerEvents.#ctor(AddressBookUI.ABNewPersonViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:AddressBookUI.ABNewPersonViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AddressBookUI.ABNewPersonViewControllerEvents.NewPersonComplete">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABNewPersonViewController.NewPersonComplete"/> event triggers.
            </summary>
        </member>
        <member name="T:AddressBookUI.ABPeoplePickerNavigationControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AddressBookUI.ABPeoplePickerNavigationController"/> class as observables.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABPeoplePickerNavigationControllerEvents.#ctor(AddressBookUI.ABPeoplePickerNavigationController)">
            <summary>
            Initializes a new instance of the <see cref = "T:AddressBookUI.ABPeoplePickerNavigationController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerEvents.Cancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPeoplePickerNavigationController.Cancelled"/> event triggers.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerEvents.PerformAction">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPeoplePickerNavigationController.PerformAction"/> event triggers.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerEvents.PerformAction2">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPeoplePickerNavigationController.PerformAction2"/> event triggers.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerEvents.SelectPerson">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPeoplePickerNavigationController.SelectPerson"/> event triggers.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerEvents.SelectPerson2">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPeoplePickerNavigationController.SelectPerson2"/> event triggers.
            </summary>
        </member>
        <member name="T:AddressBookUI.ABPersonViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AddressBookUI.ABPersonViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABPersonViewControllerEvents.#ctor(AddressBookUI.ABPersonViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:AddressBookUI.ABPersonViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AddressBookUI.ABPersonViewControllerEvents.PerformDefaultAction">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABPersonViewController.PerformDefaultAction"/> event triggers.
            </summary>
        </member>
        <member name="T:AddressBookUI.ABUnknownPersonViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AddressBookUI.ABUnknownPersonViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABUnknownPersonViewControllerEvents.#ctor(AddressBookUI.ABUnknownPersonViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:AddressBookUI.ABUnknownPersonViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AddressBookUI.ABUnknownPersonViewControllerEvents.PerformDefaultAction">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABUnknownPersonViewController.PerformDefaultAction"/> event triggers.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABUnknownPersonViewControllerEvents.PersonCreated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AddressBookUI.ABUnknownPersonViewController.PersonCreated"/> event triggers.
            </summary>
        </member>
        <member name="T:AddressBookUI.ABNewPersonViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AddressBookUI.ABNewPersonViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABNewPersonViewControllerDelegateRx.DidCompleteWithNewPersonObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AddressBookUI.ABNewPersonViewControllerDelegate.DidCompleteWithNewPerson(AddressBookUI.ABNewPersonViewController,AddressBook.ABPerson)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABNewPersonViewControllerDelegateRx.DidCompleteWithNewPerson(AddressBookUI.ABNewPersonViewController,AddressBook.ABPerson)">
            <inheritdoc/>
        </member>
        <member name="T:AddressBookUI.ABPeoplePickerNavigationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AddressBookUI.ABPeoplePickerNavigationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerDelegateRx.CancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AddressBookUI.ABPeoplePickerNavigationControllerDelegate.Cancelled(AddressBookUI.ABPeoplePickerNavigationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABPeoplePickerNavigationControllerDelegateRx.DidSelectPersonObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AddressBookUI.ABPeoplePickerNavigationControllerDelegate.DidSelectPerson(AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson,System.Int32,System.Int32)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABPeoplePickerNavigationControllerDelegateRx.Cancelled(AddressBookUI.ABPeoplePickerNavigationController)">
            <inheritdoc/>
        </member>
        <member name="M:AddressBookUI.ABPeoplePickerNavigationControllerDelegateRx.DidSelectPerson(AddressBookUI.ABPeoplePickerNavigationController,AddressBook.ABPerson,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:AddressBookUI.ABUnknownPersonViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AddressBookUI.ABUnknownPersonViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AddressBookUI.ABUnknownPersonViewControllerDelegateRx.DidResolveToPersonObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AddressBookUI.ABUnknownPersonViewControllerDelegate.DidResolveToPerson(AddressBookUI.ABUnknownPersonViewController,AddressBook.ABPerson)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AddressBookUI.ABUnknownPersonViewControllerDelegateRx.DidResolveToPerson(AddressBookUI.ABUnknownPersonViewController,AddressBook.ABPerson)">
            <inheritdoc/>
        </member>
        <member name="T:AudioToolbox.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AudioToolbox"/> namespace.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.InputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.OutputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
        </member>
        <member name="T:AudioToolbox.InputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.InputAudioQueueEvents.#ctor(AudioToolbox.InputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.InputAudioQueueEvents.InputCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AudioToolbox.OutputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.OutputAudioQueueEvents.#ctor(AudioToolbox.OutputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.OutputAudioQueueEvents.BufferCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AudioToolbox.Events">
            <summary>
            A class that contains extension methods to wrap events contained within static classes within the <see cref = "N:AudioToolbox"/> namespace.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionAudioInputBecameAvailable">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.AudioInputBecameAvailable"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionAudioRouteChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.AudioRouteChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionCurrentHardwareOutputVolumeChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.CurrentHardwareOutputVolumeChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionInputGainBecameAvailable">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.InputGainBecameAvailable"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionInputGainScalarChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.InputGainScalarChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionInputSourcesChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.InputSourcesChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionInterrupted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.Interrupted"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionOutputDestinationsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.OutputDestinationsChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionResumed">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.Resumed"/> event triggers.
            </summary>
        </member>
        <member name="P:AudioToolbox.Events.AudioSessionServerDied">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.AudioSession.ServerDied"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AVFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioPlayer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioRecorder)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioRecorder"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioSession)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioSession"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerEvents.#ctor(AVFoundation.AVAudioPlayer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.DecoderError">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.FinishedPlaying">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioRecorderEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioRecorder"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderEvents.#ctor(AVFoundation.AVAudioRecorder)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioRecorder"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.EncoderError">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.EncoderError"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.FinishedRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.FinishedRecording"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioSessionEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioSession"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioSessionEvents.#ctor(AVFoundation.AVAudioSession)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioSession"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.CategoryChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.CategoryChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.InputAvailabilityChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.InputAvailabilityChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.InputChannelsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.InputChannelsChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.OutputChannelsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.OutputChannelsChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionEvents.SampleRateChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioSession.SampleRateChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerEvents.#ctor(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidCancelSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidContinueSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidFinishSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidPauseSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidStartSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.WillSpeakRangeOfSpeechString">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAssetDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAssetDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteForMediaSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidCompleteForMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,AVFoundation.AVMediaSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidFinishCollectingMetricsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidFinishDownloadingToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidFinishDownloadingToUrl(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidLoadTimeRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange,AVFoundation.AVMediaSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidResolveMediaSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidResolveMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.DidSendBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.NeedNewBodyStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.TaskIsWaitingForConnectivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.WillBeginDelayedRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.WillDownloadToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.WillDownloadToUrl(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetDownloadDelegateRx.WillPerformHttpRedirectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetDownloadDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteForMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,AVFoundation.AVMediaSelection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidFinishDownloadingToUrl(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange,AVFoundation.AVMediaSelection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidResolveMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.WillDownloadToUrl(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetDownloadDelegateRx.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAssetResourceLoaderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioPlayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.BeginInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.BeginInterruption(AVFoundation.AVAudioPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.DecoderErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.EndInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.EndInterruption(AVFoundation.AVAudioPlayer,AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlayingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.BeginInterruption(AVFoundation.AVAudioPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.EndInterruption(AVFoundation.AVAudioPlayer,AVFoundation.AVAudioSessionInterruptionFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioRecorderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioRecorderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.BeginInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.BeginInterruption(AVFoundation.AVAudioRecorder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.EncoderErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.EncoderError(AVFoundation.AVAudioRecorder,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.EndInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.EndInterruption(AVFoundation.AVAudioRecorder,AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.FinishedRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.FinishedRecording(AVFoundation.AVAudioRecorder,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.BeginInterruption(AVFoundation.AVAudioRecorder)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.EncoderError(AVFoundation.AVAudioRecorder,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.EndInterruption(AVFoundation.AVAudioRecorder,AVFoundation.AVAudioSessionInterruptionFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.FinishedRecording(AVFoundation.AVAudioRecorder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionDelegateRx.BeginInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioSessionDelegate.BeginInterruption"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionDelegateRx.EndInterruptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioSessionDelegate.EndInterruption(AVFoundation.AVAudioSessionInterruptionFlags)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioSessionDelegateRx.InputIsAvailableChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioSessionDelegate.InputIsAvailableChanged(System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioSessionDelegateRx.BeginInterruption">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioSessionDelegateRx.EndInterruption(AVFoundation.AVAudioSessionInterruptionFlags)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioSessionDelegateRx.InputIsAvailableChanged(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidDropSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureDataOutputSynchronizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureDataOutputSynchronizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureDataOutputSynchronizerDelegateRx.DidOutputSynchronizedDataCollectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureDataOutputSynchronizerDelegate.DidOutputSynchronizedDataCollection(AVFoundation.AVCaptureDataOutputSynchronizer,AVFoundation.AVCaptureSynchronizedDataCollection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureDataOutputSynchronizerDelegateRx.DidOutputSynchronizedDataCollection(AVFoundation.AVCaptureDataOutputSynchronizer,AVFoundation.AVCaptureSynchronizedDataCollection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureDepthDataOutputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureDepthDataOutputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureDepthDataOutputDelegateRx.DidDropDepthDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureDepthDataOutputDelegate.DidDropDepthData(AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureOutputDataDroppedReason)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureDepthDataOutputDelegateRx.DidOutputDepthDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureDepthDataOutputDelegate.DidOutputDepthData(AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureDepthDataOutputDelegateRx.DidDropDepthData(AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection,AVFoundation.AVCaptureOutputDataDroppedReason)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureDepthDataOutputDelegateRx.DidOutputDepthData(AVFoundation.AVCaptureDepthDataOutput,AVFoundation.AVDepthData,CoreMedia.CMTime,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureFileOutputRecordingDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureFileOutputRecordingDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidStartRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.DidStartRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.FinishedRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidStartRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[])">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureMetadataOutputObjectsDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureMetadataOutputObjectsDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureMetadataOutputObjectsDelegateRx.DidOutputMetadataObjectsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureMetadataOutputObjectsDelegate.DidOutputMetadataObjects(AVFoundation.AVCaptureMetadataOutput,AVFoundation.AVMetadataObject[],AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureMetadataOutputObjectsDelegateRx.DidOutputMetadataObjects(AVFoundation.AVCaptureMetadataOutput,AVFoundation.AVMetadataObject[],AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCapturePhotoCaptureDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCapturePhotoCaptureDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidCapturePhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishCaptureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingLivePhotoMovieObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingLivePhotoMovie(AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,CoreMedia.CMTime,CoreMedia.CMTime,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingPhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingPhoto(AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingRawPhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingRawPhoto(AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishRecordingLivePhotoMovieObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishRecordingLivePhotoMovie(AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillBeginCaptureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.WillBeginCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillCapturePhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.WillCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingLivePhotoMovie(AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,CoreMedia.CMTime,CoreMedia.CMTime,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingPhoto(AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingRawPhoto(AVFoundation.AVCapturePhotoOutput,CoreMedia.CMSampleBuffer,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureResolvedPhotoSettings,AVFoundation.AVCaptureBracketedStillImageSettings,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishRecordingLivePhotoMovie(AVFoundation.AVCapturePhotoOutput,Foundation.NSUrl,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillBeginCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidDropSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVContentKeySessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVContentKeySessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidChange(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReportObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidSucceedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidUpdate(AVFoundation.AVContentKeySession,Foundation.NSData,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidChange(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidUpdate(AVFoundation.AVContentKeySession,Foundation.NSData,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroupsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPullDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreAnimation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreAnimation.EventExtensions.Events(CoreAnimation.CAAnimation)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationEvents.#ctor(CoreAnimation.CAAnimation)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CAAnimationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStarted(CoreAnimation.CAAnimation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStarted(CoreAnimation.CAAnimation)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.CALayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CALayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DisplayLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DisplayLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.WillDrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.WillDrawLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DisplayLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.WillDrawLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreBluetooth"/> namespace.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBCentralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheral)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerEvents.#ctor(CoreBluetooth.CBCentralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.ConnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.ConnectionEventDidOccur">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.ConnectionEventDidOccur"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DidUpdateAncsAuthorization">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DidUpdateAncsAuthorization"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DisconnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DiscoveredPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.FailedToConnectPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.RetrievedConnectedPeripherals">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.RetrievedConnectedPeripherals"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.RetrievedPeripherals">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.RetrievedPeripherals"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.UpdatedState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralEvents.#ctor(CoreBluetooth.CBPeripheral)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredCharacteristic">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredDescriptor">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredIncludedService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.InvalidatedService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.InvalidatedService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.IsReadyToSendWriteWithoutResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.ModifiedServices">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiRead">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedCharacterteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedName">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedNotificationState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteCharacteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteDescriptorValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerEvents.#ctor(CoreBluetooth.CBPeripheralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.AdvertisingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicSubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicUnsubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidPublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidUnpublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadRequestReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadyToUpdateSubscribers">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ServiceAdded">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.StateUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WriteRequestsReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.ConnectionEventDidOccurObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.ConnectionEventDidOccur(CoreBluetooth.CBCentralManager,CoreBluetooth.CBConnectionEvent,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DidUpdateAncsAuthorizationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DidUpdateAncsAuthorization(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedConnectedPeripheralsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.RetrievedConnectedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedPeripheralsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.RetrievedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.UpdatedState(CoreBluetooth.CBCentralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.ConnectionEventDidOccur(CoreBluetooth.CBCentralManager,CoreBluetooth.CBConnectionEvent,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DidUpdateAncsAuthorization(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedConnectedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedState(CoreBluetooth.CBCentralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristicObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.InvalidatedServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.InvalidatedService(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiReadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedName(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.InvalidatedService(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedName(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAddedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdated(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])">
            <inheritdoc/>
        </member>
        <member name="T:CoreFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFSocket)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFSocketEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFSocketEvents.#ctor(CoreFoundation.CFSocket)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.AcceptEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ConnectEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.DataEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.DataEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ReadEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ReadEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.WriteEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.WriteEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFStreamEvents.#ctor(CoreFoundation.CFStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.CanAcceptBytesEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ClosedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ClosedEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ErrorEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ErrorEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.HasBytesAvailableEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.OpenCompletedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreLocation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreLocation.EventExtensions.Events(CoreLocation.CLLocationManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerEvents.#ctor(CoreLocation.CLLocationManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.AuthorizationChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DeferredUpdatesFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DeferredUpdatesFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidDetermineState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidDetermineState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidFailRangingBeacons">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidFailRangingBeacons"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidRangeBeacons">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidRangeBeacons"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidRangeBeaconsSatisfyingConstraint">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidRangeBeaconsSatisfyingConstraint"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidStartMonitoringForRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidStartMonitoringForRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidVisit">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidVisit"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationsUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationUpdatesPaused">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationUpdatesPaused"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationUpdatesResumed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationUpdatesResumed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.MonitoringFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.MonitoringFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.RangingBeaconsDidFailForRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.RangingBeaconsDidFailForRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.RegionEntered">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.RegionEntered"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.RegionLeft">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.RegionLeft"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.UpdatedHeading">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.UpdatedHeading"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.UpdatedLocation">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.UpdatedLocation"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreLocation.CLLocationManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DeferredUpdatesFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DeferredUpdatesFinished(CoreLocation.CLLocationManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidDetermineStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidDetermineState(CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidFailRangingBeaconsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidFailRangingBeacons(CoreLocation.CLLocationManager,CoreLocation.CLBeaconIdentityConstraint,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidRangeBeaconsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidRangeBeacons(CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidRangeBeaconsSatisfyingConstraintObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidRangeBeaconsSatisfyingConstraint(CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconIdentityConstraint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidStartMonitoringForRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidStartMonitoringForRegion(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidVisitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidVisit(CoreLocation.CLLocationManager,CoreLocation.CLVisit)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.Failed(CoreLocation.CLLocationManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesPausedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationUpdatesPaused(CoreLocation.CLLocationManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesResumedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationUpdatesResumed(CoreLocation.CLLocationManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.MonitoringFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.MonitoringFailed(CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.RangingBeaconsDidFailForRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.RangingBeaconsDidFailForRegion(CoreLocation.CLLocationManager,CoreLocation.CLBeaconRegion,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.RegionEnteredObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.RegionEntered(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.RegionLeftObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.RegionLeft(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.UpdatedHeadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.UpdatedHeading(CoreLocation.CLLocationManager,CoreLocation.CLHeading)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.UpdatedLocationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DeferredUpdatesFinished(CoreLocation.CLLocationManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidDetermineState(CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidFailRangingBeacons(CoreLocation.CLLocationManager,CoreLocation.CLBeaconIdentityConstraint,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidRangeBeacons(CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidRangeBeaconsSatisfyingConstraint(CoreLocation.CLLocationManager,CoreLocation.CLBeacon[],CoreLocation.CLBeaconIdentityConstraint)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidStartMonitoringForRegion(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidVisit(CoreLocation.CLLocationManager,CoreLocation.CLVisit)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.Failed(CoreLocation.CLLocationManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesPaused(CoreLocation.CLLocationManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesResumed(CoreLocation.CLLocationManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.MonitoringFailed(CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.RangingBeaconsDidFailForRegion(CoreLocation.CLLocationManager,CoreLocation.CLBeaconRegion,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.RegionEntered(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.RegionLeft(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.UpdatedHeading(CoreLocation.CLLocationManager,CoreLocation.CLHeading)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)">
            <inheritdoc/>
        </member>
        <member name="T:CoreMidi.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreMidi"/> namespace.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiClient)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiClient"/> class.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiEndpoint)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiEndpoint"/> class.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiPort)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiPort"/> class.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiClientEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiClient"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiClientEvents.#ctor(CoreMidi.MidiClient)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiClient"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.IOError">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.IOError"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ObjectAdded">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ObjectAdded"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ObjectRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ObjectRemoved"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.PropertyChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.PropertyChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.SerialPortOwnerChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.SerialPortOwnerChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.SetupChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.SetupChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ThruConnectionsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ThruConnectionsChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiEndpointEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiEndpoint"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiEndpointEvents.#ctor(CoreMidi.MidiEndpoint)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiEndpoint"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiEndpointEvents.MessageReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiEndpoint.MessageReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiPortEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiPort"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiPortEvents.#ctor(CoreMidi.MidiPort)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiPort"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiPortEvents.MessageReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiPort.MessageReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:EventKitUI.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:EventKitUI"/> namespace.
            </summary>
        </member>
        <member name="M:EventKitUI.EventExtensions.Events(EventKitUI.EKCalendarChooser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:EventKitUI.EKCalendarChooser"/> class.
            </summary>
        </member>
        <member name="M:EventKitUI.EventExtensions.Events(EventKitUI.EKEventEditViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:EventKitUI.EKEventEditViewController"/> class.
            </summary>
        </member>
        <member name="M:EventKitUI.EventExtensions.Events(EventKitUI.EKEventViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:EventKitUI.EKEventViewController"/> class.
            </summary>
        </member>
        <member name="T:EventKitUI.EKCalendarChooserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:EventKitUI.EKCalendarChooser"/> class as observables.
            </summary>
        </member>
        <member name="M:EventKitUI.EKCalendarChooserEvents.#ctor(EventKitUI.EKCalendarChooser)">
            <summary>
            Initializes a new instance of the <see cref = "T:EventKitUI.EKCalendarChooser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserEvents.Cancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:EventKitUI.EKCalendarChooser.Cancelled"/> event triggers.
            </summary>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:EventKitUI.EKCalendarChooser.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserEvents.SelectionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:EventKitUI.EKCalendarChooser.SelectionChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:EventKitUI.EKEventEditViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:EventKitUI.EKEventEditViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:EventKitUI.EKEventEditViewControllerEvents.#ctor(EventKitUI.EKEventEditViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:EventKitUI.EKEventEditViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:EventKitUI.EKEventEditViewControllerEvents.Completed">
            <summary>
            Gets an observable which signals when the <see cref = "E:EventKitUI.EKEventEditViewController.Completed"/> event triggers.
            </summary>
        </member>
        <member name="T:EventKitUI.EKEventViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:EventKitUI.EKEventViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:EventKitUI.EKEventViewControllerEvents.#ctor(EventKitUI.EKEventViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:EventKitUI.EKEventViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:EventKitUI.EKEventViewControllerEvents.Completed">
            <summary>
            Gets an observable which signals when the <see cref = "E:EventKitUI.EKEventViewController.Completed"/> event triggers.
            </summary>
        </member>
        <member name="T:EventKitUI.EKCalendarChooserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:EventKitUI.EKCalendarChooserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserDelegateRx.CancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:EventKitUI.EKCalendarChooserDelegate.Cancelled(EventKitUI.EKCalendarChooser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:EventKitUI.EKCalendarChooserDelegate.Finished(EventKitUI.EKCalendarChooser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:EventKitUI.EKCalendarChooserDelegateRx.SelectionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:EventKitUI.EKCalendarChooserDelegate.SelectionChanged(EventKitUI.EKCalendarChooser)"/> method is invoked.
            </summary>
        </member>
        <member name="M:EventKitUI.EKCalendarChooserDelegateRx.Cancelled(EventKitUI.EKCalendarChooser)">
            <inheritdoc/>
        </member>
        <member name="M:EventKitUI.EKCalendarChooserDelegateRx.Finished(EventKitUI.EKCalendarChooser)">
            <inheritdoc/>
        </member>
        <member name="M:EventKitUI.EKCalendarChooserDelegateRx.SelectionChanged(EventKitUI.EKCalendarChooser)">
            <inheritdoc/>
        </member>
        <member name="T:EventKitUI.EKEventEditViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:EventKitUI.EKEventEditViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:EventKitUI.EKEventEditViewDelegateRx.CompletedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:EventKitUI.EKEventEditViewDelegate.Completed(EventKitUI.EKEventEditViewController,EventKitUI.EKEventEditViewAction)"/> method is invoked.
            </summary>
        </member>
        <member name="M:EventKitUI.EKEventEditViewDelegateRx.Completed(EventKitUI.EKEventEditViewController,EventKitUI.EKEventEditViewAction)">
            <inheritdoc/>
        </member>
        <member name="T:EventKitUI.EKEventViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:EventKitUI.EKEventViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:EventKitUI.EKEventViewDelegateRx.CompletedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:EventKitUI.EKEventViewDelegate.Completed(EventKitUI.EKEventViewController,EventKitUI.EKEventViewAction)"/> method is invoked.
            </summary>
        </member>
        <member name="M:EventKitUI.EKEventViewDelegateRx.Completed(EventKitUI.EKEventViewController,EventKitUI.EKEventViewAction)">
            <inheritdoc/>
        </member>
        <member name="T:ExternalAccessory.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:ExternalAccessory"/> namespace.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EventExtensions.Events(ExternalAccessory.EAAccessory)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EventExtensions.Events(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class as observables.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryEvents.#ctor(ExternalAccessory.EAAccessory)">
            <summary>
            Initializes a new instance of the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryEvents.Disconnected">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents.#ctor(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents.DidFindUnconfiguredAccessories">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidFindUnconfiguredAccessories"/> event triggers.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents.DidFinishConfiguringAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidFinishConfiguringAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents.DidRemoveUnconfiguredAccessories">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidRemoveUnconfiguredAccessories"/> event triggers.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserEvents.DidUpdateState">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser.DidUpdateState"/> event triggers.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ExternalAccessory.EAAccessoryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryDelegateRx.DisconnectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAAccessoryDelegate.Disconnected(ExternalAccessory.EAAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryDelegateRx.Disconnected(ExternalAccessory.EAAccessory)">
            <inheritdoc/>
        </member>
        <member name="T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidFindUnconfiguredAccessoriesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidFindUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidFinishConfiguringAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidFinishConfiguringAccessory(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessory,ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidRemoveUnconfiguredAccessoriesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidRemoveUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidUpdateStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegate.DidUpdateState(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidFindUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)">
            <inheritdoc/>
        </member>
        <member name="M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidFinishConfiguringAccessory(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessory,ExternalAccessory.EAWiFiUnconfiguredAccessoryConfigurationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidRemoveUnconfiguredAccessories(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,Foundation.NSSet)">
            <inheritdoc/>
        </member>
        <member name="M:ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserDelegateRx.DidUpdateState(ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowser,ExternalAccessory.EAWiFiUnconfiguredAccessoryBrowserState)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:Foundation"/> namespace.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSCache)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedArchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedUnarchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetService)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetServiceBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSCache"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheEvents.#ctor(Foundation.NSCache)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSCacheEvents.WillEvictObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSCache.WillEvictObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedArchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverEvents.#ctor(Foundation.NSKeyedArchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.EncodedObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverEvents.#ctor(Foundation.NSKeyedUnarchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetService"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceEvents.#ctor(Foundation.NSNetService)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.AddressResolved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.AddressResolved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.DidAcceptConnection">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.DidAcceptConnection"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Published">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Published"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.PublishFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.PublishFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.ResolveFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.ResolveFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Stopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Stopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.UpdatedTxtRecordData">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillPublish">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillPublish"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillResolve">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillResolve"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserEvents.#ctor(Foundation.NSNetServiceBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.DomainRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundDomain">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundService">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.NotSearched">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.ServiceRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSStream"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamEvents.#ctor(Foundation.NSStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSStreamEvents.OnEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSStream.OnEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSCacheDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSCacheDelegateRx.WillEvictObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSCacheDelegate.WillEvictObject(Foundation.NSCache,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheDelegateRx.WillEvictObject(Foundation.NSCache,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedArchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedArchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.EncodedObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finished(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finishing(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finished(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finishing(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finished(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finishing(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finished(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finishing(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSMachPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSMachPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSMachPortDelegateRx.MachMessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSMachPortDelegate.MachMessageReceived(System.IntPtr)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSMachPortDelegateRx.MachMessageReceived(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.DomainRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundDomainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.NotSearchedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStarted(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStopped(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStarted(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStopped(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.AddressResolvedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.AddressResolved(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.DidAcceptConnectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Published(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.ResolveFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.StoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Stopped(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillPublishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillPublish(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillResolveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillResolve(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.AddressResolved(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Published(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Stopped(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillPublish(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillResolve(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSPortDelegateRx.MessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSPortDelegate.MessageReceived(Foundation.NSPortMessage)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSPortDelegateRx.MessageReceived(Foundation.NSPortMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSStreamDelegateRx.HandleEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSStreamDelegate.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamDelegateRx.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.FinishedLoading(Foundation.NSUrlConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.SentBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoading(Foundation.NSUrlConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.WroteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalidObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscoveredObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreamsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.ReadClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.WriteClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionTaskDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionTaskDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetricsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionWebSocketDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionWebSocketDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUserActivityDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUserActivityDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWasContinuedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWasContinued(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWillSaveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWillSave(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWasContinued(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWillSave(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:GameKit"/> namespace.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKAchievementViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKAchievementViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKChallengeEventHandler)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKChallengeEventHandler"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKFriendRequestComposeViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKGameCenterViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKLeaderboardViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKLeaderboardViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatch)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatchmakerViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKSession)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKSession"/> class.
            </summary>
        </member>
        <member name="T:GameKit.GKAchievementViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKAchievementViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKAchievementViewControllerEvents.#ctor(GameKit.GKAchievementViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKAchievementViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKAchievementViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKAchievementViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKChallengeEventHandlerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKChallengeEventHandler"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerEvents.#ctor(GameKit.GKChallengeEventHandler)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKChallengeEventHandler"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerCompletedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerCompletedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerReceivedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerReceivedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerSelectedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerSelectedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.RemotePlayerCompletedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.RemotePlayerCompletedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKFriendRequestComposeViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKFriendRequestComposeViewControllerEvents.#ctor(GameKit.GKFriendRequestComposeViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKFriendRequestComposeViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKFriendRequestComposeViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKGameCenterViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterViewControllerEvents.#ctor(GameKit.GKGameCenterViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKGameCenterViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKGameCenterViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKLeaderboardViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKLeaderboardViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKLeaderboardViewControllerEvents.#ctor(GameKit.GKLeaderboardViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKLeaderboardViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKLeaderboardViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKLeaderboardViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatch"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchEvents.#ctor(GameKit.GKMatch)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceived"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedForRecipient">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedFromPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.StateChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.StateChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.StateChangedForPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerEvents.#ctor(GameKit.GKMatchmakerViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFailWithError">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindHostedPlayers">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindMatch">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindPlayers">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindPlayers"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.HostedPlayerDidAccept">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.ReceivedAcceptFromHostedPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.ReceivedAcceptFromHostedPlayer"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.WasCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKSessionEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKSession"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKSessionEvents.#ctor(GameKit.GKSession)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKSession"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKSessionEvents.ConnectionFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKSession.ConnectionFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionEvents.ConnectionRequest">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKSession.ConnectionRequest"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKSession.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionEvents.PeerChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKSession.PeerChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionEvents.ReceiveData">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKSession.ReceiveData"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKAchievementViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKAchievementViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKAchievementViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKAchievementViewControllerDelegate.DidFinish(GameKit.GKAchievementViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKAchievementViewControllerDelegateRx.DidFinish(GameKit.GKAchievementViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKChallengeEventHandlerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKChallengeEventHandlerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerCompletedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerReceivedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerSelectedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.RemotePlayerCompletedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerCompletedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerReceivedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerSelectedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.RemotePlayerCompletedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKFriendRequestComposeViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKFriendRequestComposeViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKFriendRequestComposeViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKFriendRequestComposeViewControllerDelegate.DidFinish(GameKit.GKFriendRequestComposeViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKFriendRequestComposeViewControllerDelegateRx.DidFinish(GameKit.GKFriendRequestComposeViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKGameCenterControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKGameCenterControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKGameCenterControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKGameCenterControllerDelegate.Finished(GameKit.GKGameCenterViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterControllerDelegateRx.Finished(GameKit.GKGameCenterViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKLeaderboardViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKLeaderboardViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKLeaderboardViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKLeaderboardViewControllerDelegate.DidFinish(GameKit.GKLeaderboardViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKLeaderboardViewControllerDelegateRx.DidFinish(GameKit.GKLeaderboardViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceived(GameKit.GKMatch,Foundation.NSData,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedForRecipientObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedFromPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.Failed(GameKit.GKMatch,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.StateChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.StateChangedForPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceived(GameKit.GKMatch,Foundation.NSData,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.Failed(GameKit.GKMatch,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindPlayersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindPlayers(GameKit.GKMatchmakerViewController,System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAcceptObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.ReceivedAcceptFromHostedPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.ReceivedAcceptFromHostedPlayer(GameKit.GKMatchmakerViewController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindPlayers(GameKit.GKMatchmakerViewController,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.ReceivedAcceptFromHostedPlayer(GameKit.GKMatchmakerViewController,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKPeerPickerControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKPeerPickerControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKPeerPickerControllerDelegateRx.ConnectionTypeSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKPeerPickerControllerDelegate.ConnectionTypeSelected(GameKit.GKPeerPickerController,GameKit.GKPeerPickerConnectionType)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKPeerPickerControllerDelegateRx.ControllerCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKPeerPickerControllerDelegate.ControllerCancelled(GameKit.GKPeerPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKPeerPickerControllerDelegateRx.PeerConnectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKPeerPickerControllerDelegate.PeerConnected(GameKit.GKPeerPickerController,System.String,GameKit.GKSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKPeerPickerControllerDelegateRx.ConnectionTypeSelected(GameKit.GKPeerPickerController,GameKit.GKPeerPickerConnectionType)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKPeerPickerControllerDelegateRx.ControllerCancelled(GameKit.GKPeerPickerController)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKPeerPickerControllerDelegateRx.PeerConnected(GameKit.GKPeerPickerController,System.String,GameKit.GKSession)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.FailedWithError(GameKit.GKSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerChangedStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerChangedState(GameKit.GKSession,System.String,GameKit.GKPeerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerConnectionFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerConnectionFailed(GameKit.GKSession,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerConnectionRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerConnectionRequest(GameKit.GKSession,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.FailedWithError(GameKit.GKSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerChangedState(GameKit.GKSession,System.String,GameKit.GKPeerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerConnectionFailed(GameKit.GKSession,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerConnectionRequest(GameKit.GKSession,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKTurnBasedEventHandlerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKTurnBasedEventHandlerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleInviteFromGameCenterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleInviteFromGameCenter(Foundation.NSString[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleMatchEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleMatchEnded(GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEvent(GameKit.GKTurnBasedMatch,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventForMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEventForMatch(GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleInviteFromGameCenter(Foundation.NSString[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleMatchEnded(GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEvent(GameKit.GKTurnBasedMatch,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventForMatch(GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FoundMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FoundMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.PlayerQuitForMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.PlayerQuitForMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FoundMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.PlayerQuitForMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GLKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:GLKit"/> namespace.
            </summary>
        </member>
        <member name="M:GLKit.EventExtensions.Events(GLKit.GLKView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GLKit.GLKView"/> class.
            </summary>
        </member>
        <member name="T:GLKit.GLKViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GLKit.GLKView"/> class as observables.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewEvents.#ctor(GLKit.GLKView)">
            <summary>
            Initializes a new instance of the <see cref = "T:GLKit.GLKView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GLKit.GLKViewEvents.DrawInRect">
            <summary>
            Gets an observable which signals when the <see cref = "E:GLKit.GLKView.DrawInRect"/> event triggers.
            </summary>
        </member>
        <member name="T:GLKit.GLKViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GLKit.GLKViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewControllerDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewControllerDelegate.Update(GLKit.GLKViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewControllerDelegateRx.WillPauseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewControllerDelegate.WillPause(GLKit.GLKViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewControllerDelegateRx.Update(GLKit.GLKViewController)">
            <inheritdoc/>
        </member>
        <member name="M:GLKit.GLKViewControllerDelegateRx.WillPause(GLKit.GLKViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GLKit.GLKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GLKit.GLKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GLKit.GLKViewDelegateRx.DrawInRectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GLKit.GLKViewDelegate.DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GLKit.GLKViewDelegateRx.DrawInRect(GLKit.GLKView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:HomeKit"/> namespace.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMAccessory)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMAccessory"/> class.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMAccessoryBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMAccessoryBrowser"/> class.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMHome)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMHome"/> class.
            </summary>
        </member>
        <member name="M:HomeKit.EventExtensions.Events(HomeKit.HMHomeManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:HomeKit.HMHomeManager"/> class.
            </summary>
        </member>
        <member name="T:HomeKit.HMAccessoryEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMAccessory"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryEvents.#ctor(HomeKit.HMAccessory)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMAccessory"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidAddProfile">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidAddProfile"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidRemoveProfile">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidRemoveProfile"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateAssociatedServiceType">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateAssociatedServiceType"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateFirmwareVersion">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateFirmwareVersion"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateName">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateName"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateNameForService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateNameForService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateReachability">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateReachability"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateServices">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateServices"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryEvents.DidUpdateValueForCharacteristic">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessory.DidUpdateValueForCharacteristic"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMAccessoryBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMAccessoryBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryBrowserEvents.#ctor(HomeKit.HMAccessoryBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMAccessoryBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMAccessoryBrowserEvents.DidFindNewAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessoryBrowser.DidFindNewAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryBrowserEvents.DidRemoveNewAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMAccessoryBrowser.DidRemoveNewAccessory"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMHomeEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMHome"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeEvents.#ctor(HomeKit.HMHome)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMHome"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddRoomToZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddRoomToZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidAddZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidAddZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidEncounterError">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidEncounterError"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveRoomFromZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveRoomFromZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveService">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveService"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidRemoveZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidRemoveZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUnblockAccessory">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUnblockAccessory"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateAccessControlForCurrentUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateAccessControlForCurrentUser"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateActionsForActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateActionsForActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateHomeHubState">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateHomeHubState"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForActionSet">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForActionSet"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForServiceGroup">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForServiceGroup"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForTrigger"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateNameForZone">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateNameForZone"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateRoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateRoom"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeEvents.DidUpdateTrigger">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHome.DidUpdateTrigger"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMHomeManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:HomeKit.HMHomeManager"/> class as observables.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeManagerEvents.#ctor(HomeKit.HMHomeManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:HomeKit.HMHomeManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidAddHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidAddHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidReceiveAddAccessoryRequest">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidReceiveAddAccessoryRequest"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidRemoveHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidRemoveHome"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdateAuthorizationStatus">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdateAuthorizationStatus"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdateHomes">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdateHomes"/> event triggers.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerEvents.DidUpdatePrimaryHome">
            <summary>
            Gets an observable which signals when the <see cref = "E:HomeKit.HMHomeManager.DidUpdatePrimaryHome"/> event triggers.
            </summary>
        </member>
        <member name="T:HomeKit.HMAccessoryBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMAccessoryBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryBrowserDelegateRx.DidFindNewAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryBrowserDelegate.DidFindNewAccessory(HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryBrowserDelegateRx.DidRemoveNewAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryBrowserDelegate.DidRemoveNewAccessory(HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryBrowserDelegateRx.DidFindNewAccessory(HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryBrowserDelegateRx.DidRemoveNewAccessory(HomeKit.HMAccessoryBrowser,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMAccessoryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMAccessoryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidAddProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidAddProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidRemoveProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidRemoveProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateAssociatedServiceTypeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateAssociatedServiceType(HomeKit.HMAccessory,HomeKit.HMService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateFirmwareVersionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateFirmwareVersion(HomeKit.HMAccessory,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateName(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateNameForServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateNameForService(HomeKit.HMAccessory,HomeKit.HMService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateReachabilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateReachability(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateServicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateServices(HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMAccessoryDelegateRx.DidUpdateValueForCharacteristicObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMAccessoryDelegate.DidUpdateValueForCharacteristic(HomeKit.HMAccessory,HomeKit.HMService,HomeKit.HMCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidAddProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidRemoveProfile(HomeKit.HMAccessory,HomeKit.HMAccessoryProfile)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateAssociatedServiceType(HomeKit.HMAccessory,HomeKit.HMService)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateFirmwareVersion(HomeKit.HMAccessory,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateName(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateNameForService(HomeKit.HMAccessory,HomeKit.HMService)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateReachability(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateServices(HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMAccessoryDelegateRx.DidUpdateValueForCharacteristic(HomeKit.HMAccessory,HomeKit.HMService,HomeKit.HMCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMCameraSnapshotControlDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMCameraSnapshotControlDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraSnapshotControlDelegateRx.DidTakeSnapshotObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraSnapshotControlDelegate.DidTakeSnapshot(HomeKit.HMCameraSnapshotControl,HomeKit.HMCameraSnapshot,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraSnapshotControlDelegateRx.DidUpdateMostRecentSnapshotObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraSnapshotControlDelegate.DidUpdateMostRecentSnapshot(HomeKit.HMCameraSnapshotControl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMCameraSnapshotControlDelegateRx.DidTakeSnapshot(HomeKit.HMCameraSnapshotControl,HomeKit.HMCameraSnapshot,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMCameraSnapshotControlDelegateRx.DidUpdateMostRecentSnapshot(HomeKit.HMCameraSnapshotControl)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMCameraStreamControlDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMCameraStreamControlDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraStreamControlDelegateRx.DidStartStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraStreamControlDelegate.DidStartStream(HomeKit.HMCameraStreamControl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMCameraStreamControlDelegateRx.DidStopStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMCameraStreamControlDelegate.DidStopStream(HomeKit.HMCameraStreamControl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMCameraStreamControlDelegateRx.DidStartStream(HomeKit.HMCameraStreamControl)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMCameraStreamControlDelegateRx.DidStopStream(HomeKit.HMCameraStreamControl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMHomeDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMHomeDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddRoomToZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddRoomToZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddUser(HomeKit.HMHome,HomeKit.HMUser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidAddZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidAddZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidEncounterError(HomeKit.HMHome,Foundation.NSError,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveRoomFromZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveRoomFromZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveUser(HomeKit.HMHome,HomeKit.HMUser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidRemoveZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidRemoveZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUnblockAccessoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUnblockAccessory(HomeKit.HMHome,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateAccessControlForCurrentUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateAccessControlForCurrentUser(HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateActionsForActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateActionsForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateHomeHubStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateHomeHubState(HomeKit.HMHome,HomeKit.HMHomeHubState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForActionSetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForHome(HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForRoom(HomeKit.HMHome,HomeKit.HMRoom)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForServiceGroupObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateNameForZoneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateNameForZone(HomeKit.HMHome,HomeKit.HMZone)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateRoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateRoom(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeDelegateRx.DidUpdateTriggerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeDelegate.DidUpdateTrigger(HomeKit.HMHome,HomeKit.HMTrigger)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddRoomToZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddUser(HomeKit.HMHome,HomeKit.HMUser)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidAddZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidEncounterError(HomeKit.HMHome,Foundation.NSError,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveRoomFromZone(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveService(HomeKit.HMHome,HomeKit.HMService,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveUser(HomeKit.HMHome,HomeKit.HMUser)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidRemoveZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUnblockAccessory(HomeKit.HMHome,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateAccessControlForCurrentUser(HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateActionsForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateHomeHubState(HomeKit.HMHome,HomeKit.HMHomeHubState)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForActionSet(HomeKit.HMHome,HomeKit.HMActionSet)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForHome(HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForRoom(HomeKit.HMHome,HomeKit.HMRoom)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForServiceGroup(HomeKit.HMHome,HomeKit.HMServiceGroup)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateNameForZone(HomeKit.HMHome,HomeKit.HMZone)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateRoom(HomeKit.HMHome,HomeKit.HMRoom,HomeKit.HMAccessory)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeDelegateRx.DidUpdateTrigger(HomeKit.HMHome,HomeKit.HMTrigger)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMHomeManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMHomeManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidAddHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidAddHome(HomeKit.HMHomeManager,HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidReceiveAddAccessoryRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidReceiveAddAccessoryRequest(HomeKit.HMHomeManager,HomeKit.HMAddAccessoryRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidRemoveHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidRemoveHome(HomeKit.HMHomeManager,HomeKit.HMHome)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdateAuthorizationStatusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdateAuthorizationStatus(HomeKit.HMHomeManager,HomeKit.HMHomeManagerAuthorizationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdateHomesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdateHomes(HomeKit.HMHomeManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:HomeKit.HMHomeManagerDelegateRx.DidUpdatePrimaryHomeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMHomeManagerDelegate.DidUpdatePrimaryHome(HomeKit.HMHomeManager)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidAddHome(HomeKit.HMHomeManager,HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidReceiveAddAccessoryRequest(HomeKit.HMHomeManager,HomeKit.HMAddAccessoryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidRemoveHome(HomeKit.HMHomeManager,HomeKit.HMHome)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdateAuthorizationStatus(HomeKit.HMHomeManager,HomeKit.HMHomeManagerAuthorizationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdateHomes(HomeKit.HMHomeManager)">
            <inheritdoc/>
        </member>
        <member name="M:HomeKit.HMHomeManagerDelegateRx.DidUpdatePrimaryHome(HomeKit.HMHomeManager)">
            <inheritdoc/>
        </member>
        <member name="T:HomeKit.HMNetworkConfigurationProfileDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:HomeKit.HMNetworkConfigurationProfileDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:HomeKit.HMNetworkConfigurationProfileDelegateRx.DidUpdateNetworkAccessModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:HomeKit.HMNetworkConfigurationProfileDelegate.DidUpdateNetworkAccessMode(HomeKit.HMNetworkConfigurationProfile)"/> method is invoked.
            </summary>
        </member>
        <member name="M:HomeKit.HMNetworkConfigurationProfileDelegateRx.DidUpdateNetworkAccessMode(HomeKit.HMNetworkConfigurationProfile)">
            <inheritdoc/>
        </member>
        <member name="T:iAd.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:iAd"/> namespace.
            </summary>
        </member>
        <member name="M:iAd.EventExtensions.Events(iAd.ADBannerView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:iAd.ADBannerView"/> class.
            </summary>
        </member>
        <member name="M:iAd.EventExtensions.Events(iAd.ADInterstitialAd)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:iAd.ADInterstitialAd"/> class.
            </summary>
        </member>
        <member name="T:iAd.ADBannerViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:iAd.ADBannerView"/> class as observables.
            </summary>
        </member>
        <member name="M:iAd.ADBannerViewEvents.#ctor(iAd.ADBannerView)">
            <summary>
            Initializes a new instance of the <see cref = "T:iAd.ADBannerView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:iAd.ADBannerViewEvents.ActionFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADBannerView.ActionFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewEvents.AdLoaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADBannerView.AdLoaded"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewEvents.FailedToReceiveAd">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADBannerView.FailedToReceiveAd"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewEvents.WillLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADBannerView.WillLoad"/> event triggers.
            </summary>
        </member>
        <member name="T:iAd.ADInterstitialAdEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:iAd.ADInterstitialAd"/> class as observables.
            </summary>
        </member>
        <member name="M:iAd.ADInterstitialAdEvents.#ctor(iAd.ADInterstitialAd)">
            <summary>
            Initializes a new instance of the <see cref = "T:iAd.ADInterstitialAd"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:iAd.ADInterstitialAdEvents.ActionFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADInterstitialAd.ActionFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdEvents.AdLoaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADInterstitialAd.AdLoaded"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdEvents.AdUnloaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADInterstitialAd.AdUnloaded"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdEvents.FailedToReceiveAd">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADInterstitialAd.FailedToReceiveAd"/> event triggers.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdEvents.WillLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:iAd.ADInterstitialAd.WillLoad"/> event triggers.
            </summary>
        </member>
        <member name="T:iAd.ADBannerViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:iAd.ADBannerViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewDelegateRx.ActionFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADBannerViewDelegate.ActionFinished(iAd.ADBannerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewDelegateRx.AdLoadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADBannerViewDelegate.AdLoaded(iAd.ADBannerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewDelegateRx.FailedToReceiveAdObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADBannerViewDelegate.FailedToReceiveAd(iAd.ADBannerView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADBannerViewDelegateRx.WillLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADBannerViewDelegate.WillLoad(iAd.ADBannerView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:iAd.ADBannerViewDelegateRx.ActionFinished(iAd.ADBannerView)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADBannerViewDelegateRx.AdLoaded(iAd.ADBannerView)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADBannerViewDelegateRx.FailedToReceiveAd(iAd.ADBannerView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADBannerViewDelegateRx.WillLoad(iAd.ADBannerView)">
            <inheritdoc/>
        </member>
        <member name="T:iAd.ADInterstitialAdDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:iAd.ADInterstitialAdDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdDelegateRx.ActionFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADInterstitialAdDelegate.ActionFinished(iAd.ADInterstitialAd)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdDelegateRx.AdLoadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADInterstitialAdDelegate.AdLoaded(iAd.ADInterstitialAd)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdDelegateRx.AdUnloadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADInterstitialAdDelegate.AdUnloaded(iAd.ADInterstitialAd)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdDelegateRx.FailedToReceiveAdObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADInterstitialAdDelegate.FailedToReceiveAd(iAd.ADInterstitialAd,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:iAd.ADInterstitialAdDelegateRx.WillLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:iAd.ADInterstitialAdDelegate.WillLoad(iAd.ADInterstitialAd)"/> method is invoked.
            </summary>
        </member>
        <member name="M:iAd.ADInterstitialAdDelegateRx.ActionFinished(iAd.ADInterstitialAd)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADInterstitialAdDelegateRx.AdLoaded(iAd.ADInterstitialAd)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADInterstitialAdDelegateRx.AdUnloaded(iAd.ADInterstitialAd)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADInterstitialAdDelegateRx.FailedToReceiveAd(iAd.ADInterstitialAd,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:iAd.ADInterstitialAdDelegateRx.WillLoad(iAd.ADInterstitialAd)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:MapKit"/> namespace.
            </summary>
        </member>
        <member name="M:MapKit.EventExtensions.Events(MapKit.MKMapView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
        </member>
        <member name="T:MapKit.MKMapViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MapKit.MKMapView"/> class as observables.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewEvents.#ctor(MapKit.MKMapView)">
            <summary>
            Initializes a new instance of the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MapKit.MKMapViewEvents.CalloutAccessoryControlTapped">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.CalloutAccessoryControlTapped"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.ChangedDragState">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.ChangedDragState"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddAnnotationViews">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddOverlayRenderers">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddOverlayViews">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddOverlayViews"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidChangeUserTrackingMode">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidChangeUserTrackingMode"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidChangeVisibleRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidDeselectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFailToLocateUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFinishRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidSelectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidStopLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidUpdateUserLocation">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.LoadingMapFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.LoadingMapFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.MapLoaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.MapLoaded"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionWillChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionWillChange"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLoadingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="T:MapKit.MKLocalSearchCompleterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults(MapKit.MKLocalSearchCompleter)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResults(MapKit.MKLocalSearchCompleter)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.MKMapViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKMapViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.CalloutAccessoryControlTappedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.CalloutAccessoryControlTapped(MapKit.MKMapView,MapKit.MKAnnotationView,UIKit.UIControl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.ChangedDragStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddAnnotationViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddOverlayViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddOverlayViews(MapKit.MKMapView,MapKit.MKOverlayView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidChangeUserTrackingModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidChangeVisibleRegion(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFailToLocateUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFinishRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidSelectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidStopLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidStopLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidUpdateUserLocationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.LoadingMapFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.MapLoadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.MapLoaded(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionChanged(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionWillChange(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLoadingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLoadingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartRenderingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.CalloutAccessoryControlTapped(MapKit.MKMapView,MapKit.MKAnnotationView,UIKit.UIControl)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddOverlayViews(MapKit.MKMapView,MapKit.MKOverlayView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegion(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidStopLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.MapLoaded(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionChanged(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionWillChange(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLoadingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartRenderingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.MKReverseGeocoderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKReverseGeocoderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKReverseGeocoderDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKReverseGeocoderDelegate.FailedWithError(MapKit.MKReverseGeocoder,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKReverseGeocoderDelegateRx.FoundWithPlacemarkObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKReverseGeocoderDelegate.FoundWithPlacemark(MapKit.MKReverseGeocoder,MapKit.MKPlacemark)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKReverseGeocoderDelegateRx.FailedWithError(MapKit.MKReverseGeocoder,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKReverseGeocoderDelegateRx.FoundWithPlacemark(MapKit.MKReverseGeocoder,MapKit.MKPlacemark)">
            <inheritdoc/>
        </member>
        <member name="T:MediaPlayer.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:MediaPlayer"/> namespace.
            </summary>
        </member>
        <member name="M:MediaPlayer.EventExtensions.Events(MediaPlayer.MPMediaPickerController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MediaPlayer.MPMediaPickerController"/> class.
            </summary>
        </member>
        <member name="T:MediaPlayer.MPMediaPickerControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MediaPlayer.MPMediaPickerController"/> class as observables.
            </summary>
        </member>
        <member name="M:MediaPlayer.MPMediaPickerControllerEvents.#ctor(MediaPlayer.MPMediaPickerController)">
            <summary>
            Initializes a new instance of the <see cref = "T:MediaPlayer.MPMediaPickerController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MediaPlayer.MPMediaPickerControllerEvents.DidCancel">
            <summary>
            Gets an observable which signals when the <see cref = "E:MediaPlayer.MPMediaPickerController.DidCancel"/> event triggers.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPMediaPickerControllerEvents.ItemsPicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:MediaPlayer.MPMediaPickerController.ItemsPicked"/> event triggers.
            </summary>
        </member>
        <member name="T:MediaPlayer.MPMediaPickerControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MediaPlayer.MPMediaPickerControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPMediaPickerControllerDelegateRx.MediaItemsPickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPMediaPickerControllerDelegate.MediaItemsPicked(MediaPlayer.MPMediaPickerController,MediaPlayer.MPMediaItemCollection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPMediaPickerControllerDelegateRx.MediaPickerDidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPMediaPickerControllerDelegate.MediaPickerDidCancel(MediaPlayer.MPMediaPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MediaPlayer.MPMediaPickerControllerDelegateRx.MediaItemsPicked(MediaPlayer.MPMediaPickerController,MediaPlayer.MPMediaItemCollection)">
            <inheritdoc/>
        </member>
        <member name="M:MediaPlayer.MPMediaPickerControllerDelegateRx.MediaPickerDidCancel(MediaPlayer.MPMediaPickerController)">
            <inheritdoc/>
        </member>
        <member name="T:MediaPlayer.MPPlayableContentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MediaPlayer.MPPlayableContentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPPlayableContentDelegateRx.ContextUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPPlayableContentDelegate.ContextUpdated(MediaPlayer.MPPlayableContentManager,MediaPlayer.MPPlayableContentManagerContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPPlayableContentDelegateRx.InitializePlaybackQueueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPPlayableContentDelegate.InitializePlaybackQueue(MediaPlayer.MPPlayableContentManager,MediaPlayer.MPContentItem[],System.Action{Foundation.NSError})"/> method is invoked.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPPlayableContentDelegateRx.InitiatePlaybackOfContentItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPPlayableContentDelegate.InitiatePlaybackOfContentItem(MediaPlayer.MPPlayableContentManager,Foundation.NSIndexPath,System.Action{Foundation.NSError})"/> method is invoked.
            </summary>
        </member>
        <member name="P:MediaPlayer.MPPlayableContentDelegateRx.PlayableContentManagerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MediaPlayer.MPPlayableContentDelegate.PlayableContentManager(MediaPlayer.MPPlayableContentManager,Foundation.NSIndexPath,System.Action{Foundation.NSError})"/> method is invoked.
            </summary>
        </member>
        <member name="M:MediaPlayer.MPPlayableContentDelegateRx.ContextUpdated(MediaPlayer.MPPlayableContentManager,MediaPlayer.MPPlayableContentManagerContext)">
            <inheritdoc/>
        </member>
        <member name="M:MediaPlayer.MPPlayableContentDelegateRx.InitializePlaybackQueue(MediaPlayer.MPPlayableContentManager,MediaPlayer.MPContentItem[],System.Action{Foundation.NSError})">
            <inheritdoc/>
        </member>
        <member name="M:MediaPlayer.MPPlayableContentDelegateRx.InitiatePlaybackOfContentItem(MediaPlayer.MPPlayableContentManager,Foundation.NSIndexPath,System.Action{Foundation.NSError})">
            <inheritdoc/>
        </member>
        <member name="M:MediaPlayer.MPPlayableContentDelegateRx.PlayableContentManager(MediaPlayer.MPPlayableContentManager,Foundation.NSIndexPath,System.Action{Foundation.NSError})">
            <inheritdoc/>
        </member>
        <member name="T:MessageUI.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:MessageUI"/> namespace.
            </summary>
        </member>
        <member name="M:MessageUI.EventExtensions.Events(MessageUI.MFMailComposeViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MessageUI.MFMailComposeViewController"/> class.
            </summary>
        </member>
        <member name="M:MessageUI.EventExtensions.Events(MessageUI.MFMessageComposeViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MessageUI.MFMessageComposeViewController"/> class.
            </summary>
        </member>
        <member name="T:MessageUI.MFMailComposeViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MessageUI.MFMailComposeViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:MessageUI.MFMailComposeViewControllerEvents.#ctor(MessageUI.MFMailComposeViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:MessageUI.MFMailComposeViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MessageUI.MFMailComposeViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:MessageUI.MFMailComposeViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:MessageUI.MFMessageComposeViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MessageUI.MFMessageComposeViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:MessageUI.MFMessageComposeViewControllerEvents.#ctor(MessageUI.MFMessageComposeViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:MessageUI.MFMessageComposeViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MessageUI.MFMessageComposeViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:MessageUI.MFMessageComposeViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:MessageUI.MFMailComposeViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MessageUI.MFMailComposeViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MessageUI.MFMailComposeViewControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MessageUI.MFMailComposeViewControllerDelegate.Finished(MessageUI.MFMailComposeViewController,MessageUI.MFMailComposeResult,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MessageUI.MFMailComposeViewControllerDelegateRx.Finished(MessageUI.MFMailComposeViewController,MessageUI.MFMailComposeResult,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:MessageUI.MFMessageComposeViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MessageUI.MFMessageComposeViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MessageUI.MFMessageComposeViewControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MessageUI.MFMessageComposeViewControllerDelegate.Finished(MessageUI.MFMessageComposeViewController,MessageUI.MessageComposeResult)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MessageUI.MFMessageComposeViewControllerDelegateRx.Finished(MessageUI.MFMessageComposeViewController,MessageUI.MessageComposeResult)">
            <inheritdoc/>
        </member>
        <member name="T:PassKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:PassKit"/> namespace.
            </summary>
        </member>
        <member name="M:PassKit.EventExtensions.Events(PassKit.PKAddPassesViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PassKit.PKAddPassesViewController"/> class.
            </summary>
        </member>
        <member name="M:PassKit.EventExtensions.Events(PassKit.PKPaymentAuthorizationViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PassKit.PKPaymentAuthorizationViewController"/> class.
            </summary>
        </member>
        <member name="T:PassKit.PKAddPassesViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PassKit.PKAddPassesViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:PassKit.PKAddPassesViewControllerEvents.#ctor(PassKit.PKAddPassesViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:PassKit.PKAddPassesViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PassKit.PKAddPassesViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKAddPassesViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:PassKit.PKPaymentAuthorizationViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PassKit.PKPaymentAuthorizationViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerEvents.#ctor(PassKit.PKPaymentAuthorizationViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:PassKit.PKPaymentAuthorizationViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidAuthorizePayment">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidAuthorizePayment"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidAuthorizePayment2">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidAuthorizePayment2"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectPaymentMethod">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectPaymentMethod"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectPaymentMethod2">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectPaymentMethod2"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectShippingAddress">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectShippingAddress"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectShippingContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectShippingContact"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectShippingContact2">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectShippingContact2"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectShippingMethod">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectShippingMethod"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.DidSelectShippingMethod2">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.DidSelectShippingMethod2"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.PaymentAuthorizationViewControllerDidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.PaymentAuthorizationViewControllerDidFinish"/> event triggers.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerEvents.WillAuthorizePayment">
            <summary>
            Gets an observable which signals when the <see cref = "E:PassKit.PKPaymentAuthorizationViewController.WillAuthorizePayment"/> event triggers.
            </summary>
        </member>
        <member name="T:PassKit.PKAddPassesViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PassKit.PKAddPassesViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PassKit.PKAddPassesViewControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKAddPassesViewControllerDelegate.Finished(PassKit.PKAddPassesViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PassKit.PKAddPassesViewControllerDelegateRx.Finished(PassKit.PKAddPassesViewController)">
            <inheritdoc/>
        </member>
        <member name="T:PassKit.PKAddPaymentPassViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PassKit.PKAddPaymentPassViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PassKit.PKAddPaymentPassViewControllerDelegateRx.DidFinishAddingPaymentPassObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKAddPaymentPassViewControllerDelegate.DidFinishAddingPaymentPass(PassKit.PKAddPaymentPassViewController,PassKit.PKPaymentPass,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKAddPaymentPassViewControllerDelegateRx.GenerateRequestWithCertificateChainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKAddPaymentPassViewControllerDelegate.GenerateRequestWithCertificateChain(PassKit.PKAddPaymentPassViewController,Foundation.NSData[],Foundation.NSData,Foundation.NSData,System.Action{PassKit.PKAddPaymentPassRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:PassKit.PKAddPaymentPassViewControllerDelegateRx.DidFinishAddingPaymentPass(PassKit.PKAddPaymentPassViewController,PassKit.PKPaymentPass,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKAddPaymentPassViewControllerDelegateRx.GenerateRequestWithCertificateChain(PassKit.PKAddPaymentPassViewController,Foundation.NSData[],Foundation.NSData,Foundation.NSData,System.Action{PassKit.PKAddPaymentPassRequest})">
            <inheritdoc/>
        </member>
        <member name="T:PassKit.PKDisbursementAuthorizationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PassKit.PKDisbursementAuthorizationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PassKit.PKDisbursementAuthorizationControllerDelegateRx.DidAuthorizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKDisbursementAuthorizationControllerDelegate.DidAuthorize(PassKit.PKDisbursementAuthorizationController,PassKit.PKDisbursementVoucher)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKDisbursementAuthorizationControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKDisbursementAuthorizationControllerDelegate.DidFinish(PassKit.PKDisbursementAuthorizationController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PassKit.PKDisbursementAuthorizationControllerDelegateRx.DidAuthorize(PassKit.PKDisbursementAuthorizationController,PassKit.PKDisbursementVoucher)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKDisbursementAuthorizationControllerDelegateRx.DidFinish(PassKit.PKDisbursementAuthorizationController)">
            <inheritdoc/>
        </member>
        <member name="T:PassKit.PKPaymentAuthorizationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PassKit.PKPaymentAuthorizationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidAuthorizePaymentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.DidAuthorizePayment(PassKit.PKPaymentAuthorizationController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationStatus})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.DidFinish(PassKit.PKPaymentAuthorizationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectPaymentMethodObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectPaymentMethod(PassKit.PKPaymentAuthorizationController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectShippingContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingContact(PassKit.PKPaymentAuthorizationController,PassKit.PKContact,System.Action{PassKit.PKPaymentAuthorizationStatus,PassKit.PKShippingMethod[],PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectShippingMethodObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.DidSelectShippingMethod(PassKit.PKPaymentAuthorizationController,PassKit.PKShippingMethod,System.Action{PassKit.PKPaymentAuthorizationStatus,PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationControllerDelegateRx.WillAuthorizePaymentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationControllerDelegate.WillAuthorizePayment(PassKit.PKPaymentAuthorizationController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidAuthorizePayment(PassKit.PKPaymentAuthorizationController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationStatus})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidFinish(PassKit.PKPaymentAuthorizationController)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectPaymentMethod(PassKit.PKPaymentAuthorizationController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentSummaryItem[]})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectShippingContact(PassKit.PKPaymentAuthorizationController,PassKit.PKContact,System.Action{PassKit.PKPaymentAuthorizationStatus,PassKit.PKShippingMethod[],PassKit.PKPaymentSummaryItem[]})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.DidSelectShippingMethod(PassKit.PKPaymentAuthorizationController,PassKit.PKShippingMethod,System.Action{PassKit.PKPaymentAuthorizationStatus,PassKit.PKPaymentSummaryItem[]})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationControllerDelegateRx.WillAuthorizePayment(PassKit.PKPaymentAuthorizationController)">
            <inheritdoc/>
        </member>
        <member name="T:PassKit.PKPaymentAuthorizationViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PassKit.PKPaymentAuthorizationViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidAuthorizePaymentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidAuthorizePayment(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationStatus})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidAuthorizePayment2Obs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidAuthorizePayment2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectPaymentMethodObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectPaymentMethod(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentSummaryItem[]})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectPaymentMethod2Obs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectPaymentMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentRequestPaymentMethodUpdate})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingAddressObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingAddress(PassKit.PKPaymentAuthorizationViewController,AddressBook.ABRecord,PassKit.PKPaymentShippingAddressSelected)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingContact(PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,PassKit.PKPaymentShippingAddressSelected)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingContact2Obs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingContact2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,System.Action{PassKit.PKPaymentRequestShippingContactUpdate})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingMethodObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingMethod(PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,PassKit.PKPaymentShippingMethodSelected)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingMethod2Obs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.DidSelectShippingMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,System.Action{PassKit.PKPaymentRequestShippingMethodUpdate})"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.PaymentAuthorizationViewControllerDidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.PaymentAuthorizationViewControllerDidFinish(PassKit.PKPaymentAuthorizationViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.WillAuthorizePaymentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PassKit.PKPaymentAuthorizationViewControllerDelegate.WillAuthorizePayment(PassKit.PKPaymentAuthorizationViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidAuthorizePayment(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationStatus})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidAuthorizePayment2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPayment,System.Action{PassKit.PKPaymentAuthorizationResult})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectPaymentMethod(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentSummaryItem[]})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectPaymentMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKPaymentMethod,System.Action{PassKit.PKPaymentRequestPaymentMethodUpdate})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingAddress(PassKit.PKPaymentAuthorizationViewController,AddressBook.ABRecord,PassKit.PKPaymentShippingAddressSelected)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingContact(PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,PassKit.PKPaymentShippingAddressSelected)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingContact2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKContact,System.Action{PassKit.PKPaymentRequestShippingContactUpdate})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingMethod(PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,PassKit.PKPaymentShippingMethodSelected)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.DidSelectShippingMethod2(PassKit.PKPaymentAuthorizationViewController,PassKit.PKShippingMethod,System.Action{PassKit.PKPaymentRequestShippingMethodUpdate})">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.PaymentAuthorizationViewControllerDidFinish(PassKit.PKPaymentAuthorizationViewController)">
            <inheritdoc/>
        </member>
        <member name="M:PassKit.PKPaymentAuthorizationViewControllerDelegateRx.WillAuthorizePayment(PassKit.PKPaymentAuthorizationViewController)">
            <inheritdoc/>
        </member>
        <member name="T:PdfKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:PdfKit"/> namespace.
            </summary>
        </member>
        <member name="M:PdfKit.EventExtensions.Events(PdfKit.PdfDocument)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PdfKit.PdfDocument"/> class.
            </summary>
        </member>
        <member name="M:PdfKit.EventExtensions.Events(PdfKit.PdfView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PdfKit.PdfView"/> class.
            </summary>
        </member>
        <member name="T:PdfKit.PdfDocumentEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PdfKit.PdfDocument"/> class as observables.
            </summary>
        </member>
        <member name="M:PdfKit.PdfDocumentEvents.#ctor(PdfKit.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref = "T:PdfKit.PdfDocument"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidBeginDocumentFind">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidBeginDocumentFind"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidMatchString">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidMatchString"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidUnlock">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidUnlock"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.FindFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.FindFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.MatchFound">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.MatchFound"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.PageFindFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.PageFindFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.PageFindStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.PageFindStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:PdfKit.PdfViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PdfKit.PdfView"/> class as observables.
            </summary>
        </member>
        <member name="M:PdfKit.PdfViewEvents.#ctor(PdfKit.PdfView)">
            <summary>
            Initializes a new instance of the <see cref = "T:PdfKit.PdfView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PdfKit.PdfViewEvents.OpenPdf">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.OpenPdf"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.PerformFind">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.PerformFind"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.PerformGoToPage">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.PerformGoToPage"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.WillClickOnLink">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.WillClickOnLink"/> event triggers.
            </summary>
        </member>
        <member name="T:PdfKit.PdfDocumentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PdfKit.PdfDocumentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidBeginDocumentFindObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidBeginDocumentFind(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidMatchStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidMatchString(PdfKit.PdfSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidUnlockObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidUnlock(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.FindFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.FindFinished(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.MatchFoundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.MatchFound(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.PageFindFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.PageFindFinished(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.PageFindStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.PageFindStarted(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidBeginDocumentFind(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidMatchString(PdfKit.PdfSelection)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidUnlock(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.FindFinished(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.MatchFound(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.PageFindFinished(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.PageFindStarted(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:PdfKit.PdfViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PdfKit.PdfViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.OpenPdfObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.OpenPdf(PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.PerformFindObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.PerformFind(PdfKit.PdfView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.PerformGoToPageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.PerformGoToPage(PdfKit.PdfView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.WillClickOnLinkObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.WillClickOnLink(PdfKit.PdfView,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.OpenPdf(PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.PerformFind(PdfKit.PdfView)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.PerformGoToPage(PdfKit.PdfView)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.WillClickOnLink(PdfKit.PdfView,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="T:QuickLook.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:QuickLook"/> namespace.
            </summary>
        </member>
        <member name="M:QuickLook.EventExtensions.Events(QuickLook.QLPreviewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:QuickLook.QLPreviewController"/> class.
            </summary>
        </member>
        <member name="T:QuickLook.QLPreviewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:QuickLook.QLPreviewController"/> class as observables.
            </summary>
        </member>
        <member name="M:QuickLook.QLPreviewControllerEvents.#ctor(QuickLook.QLPreviewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:QuickLook.QLPreviewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:QuickLook.QLPreviewControllerEvents.DidDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:QuickLook.QLPreviewController.DidDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerEvents.DidSaveEditedCopy">
            <summary>
            Gets an observable which signals when the <see cref = "E:QuickLook.QLPreviewController.DidSaveEditedCopy"/> event triggers.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerEvents.DidUpdateContents">
            <summary>
            Gets an observable which signals when the <see cref = "E:QuickLook.QLPreviewController.DidUpdateContents"/> event triggers.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerEvents.WillDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:QuickLook.QLPreviewController.WillDismiss"/> event triggers.
            </summary>
        </member>
        <member name="T:QuickLook.QLPreviewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:QuickLook.QLPreviewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLook.QLPreviewControllerDelegate.DidDismiss(QuickLook.QLPreviewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerDelegateRx.DidSaveEditedCopyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLook.QLPreviewControllerDelegate.DidSaveEditedCopy(QuickLook.QLPreviewController,QuickLook.IQLPreviewItem,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerDelegateRx.DidUpdateContentsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLook.QLPreviewControllerDelegate.DidUpdateContents(QuickLook.QLPreviewController,QuickLook.IQLPreviewItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLook.QLPreviewControllerDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLook.QLPreviewControllerDelegate.WillDismiss(QuickLook.QLPreviewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:QuickLook.QLPreviewControllerDelegateRx.DidDismiss(QuickLook.QLPreviewController)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLook.QLPreviewControllerDelegateRx.DidSaveEditedCopy(QuickLook.QLPreviewController,QuickLook.IQLPreviewItem,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLook.QLPreviewControllerDelegateRx.DidUpdateContents(QuickLook.QLPreviewController,QuickLook.IQLPreviewItem)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLook.QLPreviewControllerDelegateRx.WillDismiss(QuickLook.QLPreviewController)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SceneKit"/> namespace.
            </summary>
        </member>
        <member name="M:SceneKit.EventExtensions.Events(SceneKit.SCNPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SceneKit.SCNPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsWorldEvents.#ctor(SceneKit.SCNPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidUpdateContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SceneKit.SCNAvoidOccluderConstraintDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNCameraControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNCameraControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEnd(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStart(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNNodeRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNNodeRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNNodeRendererDelegateRx.RenderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNNodeRendererDelegate.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNNodeRendererDelegateRx.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNProgramDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNProgramDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNProgramDelegateRx.HandleErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNProgramDelegate.HandleError(SceneKit.SCNProgram,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNProgramDelegateRx.HandleError(SceneKit.SCNProgram,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNSceneRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNSceneRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.Update(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.WillRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.Update(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SpriteKit"/> namespace.
            </summary>
        </member>
        <member name="M:SpriteKit.EventExtensions.Events(SpriteKit.SKPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsWorldEvents.#ctor(SpriteKit.SKPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidBeginContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidEndContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidEndContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.SKSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidApplyConstraints(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidEvaluateActionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidEvaluateActions(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidFinishUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidFinishUpdate(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidSimulatePhysics(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.Update(System.Double,SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidApplyConstraints(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidEvaluateActions(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidFinishUpdate(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidSimulatePhysics(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.Update(System.Double,SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:StoreKit"/> namespace.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKProductsRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKStoreProductViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKStoreProductViewController"/> class.
            </summary>
        </member>
        <member name="T:StoreKit.SKProductsRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestEvents.#ctor(StoreKit.SKProductsRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKProductsRequestEvents.ReceivedResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestEvents.#ctor(StoreKit.SKRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFinished"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKStoreProductViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKStoreProductViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKStoreProductViewControllerEvents.#ctor(StoreKit.SKStoreProductViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKStoreProductViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKStoreProductViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKStoreProductViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKCloudServiceSetupViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKCloudServiceSetupViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKCloudServiceSetupViewControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKCloudServiceSetupViewControllerDelegate.DidDismiss(StoreKit.SKCloudServiceSetupViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKCloudServiceSetupViewControllerDelegateRx.DidDismiss(StoreKit.SKCloudServiceSetupViewController)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.SKProductsRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKProductsRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKProductsRequestDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKProductsRequestDelegate.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestDelegateRx.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.SKRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFailed(StoreKit.SKRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFinished(StoreKit.SKRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFailed(StoreKit.SKRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFinished(StoreKit.SKRequest)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.SKStoreProductViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKStoreProductViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKStoreProductViewControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKStoreProductViewControllerDelegate.Finished(StoreKit.SKStoreProductViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKStoreProductViewControllerDelegateRx.Finished(StoreKit.SKStoreProductViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:UIKit"/> namespace.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.NSTextStorage)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.NSTextStorage"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIAccelerometer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIAccelerometer"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIActionSheet)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIActionSheet"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIAlertView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIAlertView"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIBarButtonItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIBarButtonItem"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UICollisionBehavior)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UICollisionBehavior"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIControl)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIControl"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIDocumentInteractionController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIDocumentInteractionController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIDocumentMenuViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIDocumentMenuViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIDocumentPickerViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIDocumentPickerViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIImagePickerController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIImagePickerController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPageViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPageViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPopoverController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPopoverController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPopoverPresentationController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPopoverPresentationController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPreviewInteraction)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPreviewInteraction"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIPrintInteractionController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIPrintInteractionController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIScrollView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIScrollView"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UISearchBar)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UISearchBar"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UISplitViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UISplitViewController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITabBar)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITabBar"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITabBarController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITabBarController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITextField)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITextField"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UITextView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UITextView"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIVideoEditorController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIVideoEditorController"/> class.
            </summary>
        </member>
        <member name="M:UIKit.EventExtensions.Events(UIKit.UIWebView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:UIKit.UIWebView"/> class.
            </summary>
        </member>
        <member name="T:UIKit.NSTextStorageEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.NSTextStorage"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.NSTextStorageEvents.#ctor(UIKit.NSTextStorage)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.NSTextStorage"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.NSTextStorageEvents.DidProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.NSTextStorage.DidProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageEvents.WillProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.NSTextStorage.WillProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIAccelerometerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIAccelerometer"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIAccelerometerEvents.#ctor(UIKit.UIAccelerometer)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIAccelerometer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIAccelerometerEvents.Acceleration">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAccelerometer.Acceleration"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIActionSheetEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIActionSheet"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIActionSheetEvents.#ctor(UIKit.UIActionSheet)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIActionSheet"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.Canceled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.Canceled"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.Clicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.Clicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.Dismissed">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.Dismissed"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.Presented">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.Presented"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.WillDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.WillDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetEvents.WillPresent">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIActionSheet.WillPresent"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIAlertViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIAlertView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIAlertViewEvents.#ctor(UIKit.UIAlertView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIAlertView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.Canceled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.Canceled"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.Clicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.Clicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.Dismissed">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.Dismissed"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.Presented">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.Presented"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.WillDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.WillDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewEvents.WillPresent">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIAlertView.WillPresent"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIBarButtonItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIBarButtonItem"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIBarButtonItemEvents.#ctor(UIKit.UIBarButtonItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIBarButtonItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIBarButtonItemEvents.Clicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIBarButtonItem.Clicked"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UICollisionBehaviorEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UICollisionBehavior"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UICollisionBehaviorEvents.#ctor(UIKit.UICollisionBehavior)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UICollisionBehavior"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.BeganBoundaryContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.BeganBoundaryContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.BeganContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.BeganContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.EndedBoundaryContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.EndedBoundaryContact"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorEvents.EndedContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UICollisionBehavior.EndedContact"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIControlEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIControl"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIControlEvents.#ctor(UIKit.UIControl)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIControl"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIControlEvents.AllEditingEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllEditingEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.AllEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.AllTouchEvents">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.AllTouchEvents"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidBegin">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidBegin"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidEnd">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidEnd"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.EditingDidEndOnExit">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.EditingDidEndOnExit"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.PrimaryActionTriggered">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.PrimaryActionTriggered"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchCancel">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchCancel"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDown">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDown"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDownRepeat">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDownRepeat"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragEnter">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragEnter"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragExit">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragExit"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragInside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragInside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchDragOutside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchDragOutside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchUpInside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchUpInside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.TouchUpOutside">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.TouchUpOutside"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIControlEvents.ValueChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIControl.ValueChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIDocumentInteractionControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIDocumentInteractionController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerEvents.#ctor(UIKit.UIDocumentInteractionController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIDocumentInteractionController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.DidDismissOpenInMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.DidDismissOpenInMenu"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.DidDismissOptionsMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.DidDismissOptionsMenu"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.DidEndPreview">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.DidEndPreview"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.DidEndSendingToApplication">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.DidEndSendingToApplication"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.WillBeginPreview">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.WillBeginPreview"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.WillBeginSendingToApplication">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.WillBeginSendingToApplication"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.WillPresentOpenInMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.WillPresentOpenInMenu"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerEvents.WillPresentOptionsMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentInteractionController.WillPresentOptionsMenu"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIDocumentMenuViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIDocumentMenuViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentMenuViewControllerEvents.#ctor(UIKit.UIDocumentMenuViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIDocumentMenuViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIDocumentMenuViewControllerEvents.DidPickDocumentPicker">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentMenuViewController.DidPickDocumentPicker"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentMenuViewControllerEvents.WasCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentMenuViewController.WasCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIDocumentPickerViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIDocumentPickerViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentPickerViewControllerEvents.#ctor(UIKit.UIDocumentPickerViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIDocumentPickerViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIDocumentPickerViewControllerEvents.DidPickDocument">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentPickerViewController.DidPickDocument"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentPickerViewControllerEvents.DidPickDocumentAtUrls">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentPickerViewController.DidPickDocumentAtUrls"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentPickerViewControllerEvents.WasCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIDocumentPickerViewController.WasCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIImagePickerControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIImagePickerController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIImagePickerControllerEvents.#ctor(UIKit.UIImagePickerController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIImagePickerController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIImagePickerControllerEvents.Canceled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIImagePickerController.Canceled"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIImagePickerControllerEvents.FinishedPickingImage">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIImagePickerController.FinishedPickingImage"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIImagePickerControllerEvents.FinishedPickingMedia">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIImagePickerController.FinishedPickingMedia"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPageViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPageViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPageViewControllerEvents.#ctor(UIKit.UIPageViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPageViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPageViewControllerEvents.DidFinishAnimating">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPageViewController.DidFinishAnimating"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerEvents.WillTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPageViewController.WillTransition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPopoverControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPopoverController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverControllerEvents.#ctor(UIKit.UIPopoverController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPopoverController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPopoverControllerEvents.DidDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverController.DidDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverControllerEvents.WillReposition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverController.WillReposition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPopoverPresentationControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPopoverPresentationController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverPresentationControllerEvents.#ctor(UIKit.UIPopoverPresentationController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPopoverPresentationController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerEvents.DidDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverPresentationController.DidDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerEvents.PrepareForPresentation">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverPresentationController.PrepareForPresentation"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerEvents.WillReposition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPopoverPresentationController.WillReposition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPreviewInteractionEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPreviewInteraction"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPreviewInteractionEvents.#ctor(UIKit.UIPreviewInteraction)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPreviewInteraction"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPreviewInteractionEvents.DidCancel">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPreviewInteraction.DidCancel"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPreviewInteractionEvents.DidUpdateCommit">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPreviewInteraction.DidUpdateCommit"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPreviewInteractionEvents.DidUpdatePreviewTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPreviewInteraction.DidUpdatePreviewTransition"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIPrintInteractionControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIPrintInteractionController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerEvents.#ctor(UIKit.UIPrintInteractionController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIPrintInteractionController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.DidDismissPrinterOptions">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.DidDismissPrinterOptions"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.DidFinishJob">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.DidFinishJob"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.DidPresentPrinterOptions">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.DidPresentPrinterOptions"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.WillDismissPrinterOptions">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.WillDismissPrinterOptions"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.WillPresentPrinterOptions">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.WillPresentPrinterOptions"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerEvents.WillStartJob">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIPrintInteractionController.WillStartJob"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIScrollViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIScrollView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIScrollViewEvents.#ctor(UIKit.UIScrollView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIScrollView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DecelerationEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DecelerationEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DecelerationStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DecelerationStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DidChangeAdjustedContentInset">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DidChangeAdjustedContentInset"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DidZoom">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DidZoom"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DraggingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DraggingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.DraggingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.DraggingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ScrollAnimationEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ScrollAnimationEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.Scrolled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.Scrolled"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ScrolledToTop">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ScrolledToTop"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.WillEndDragging">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.WillEndDragging"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ZoomingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ZoomingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewEvents.ZoomingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIScrollView.ZoomingStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UISearchBarEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UISearchBar"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UISearchBarEvents.#ctor(UIKit.UISearchBar)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UISearchBar"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UISearchBarEvents.BookmarkButtonClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.BookmarkButtonClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.CancelButtonClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.CancelButtonClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.ListButtonClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.ListButtonClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.OnEditingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.OnEditingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.OnEditingStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.OnEditingStopped"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.SearchButtonClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.SearchButtonClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.SelectedScopeButtonIndexChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.SelectedScopeButtonIndexChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarEvents.TextChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISearchBar.TextChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UISplitViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UISplitViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UISplitViewControllerEvents.#ctor(UIKit.UISplitViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UISplitViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UISplitViewControllerEvents.WillChangeDisplayMode">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISplitViewController.WillChangeDisplayMode"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerEvents.WillHideViewController">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISplitViewController.WillHideViewController"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerEvents.WillPresentViewController">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISplitViewController.WillPresentViewController"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerEvents.WillShowViewController">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UISplitViewController.WillShowViewController"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITabBarEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITabBar"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarEvents.#ctor(UIKit.UITabBar)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITabBar"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITabBarEvents.DidBeginCustomizingItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.DidBeginCustomizingItems"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarEvents.DidEndCustomizingItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.DidEndCustomizingItems"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarEvents.ItemSelected">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.ItemSelected"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarEvents.WillBeginCustomizingItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.WillBeginCustomizingItems"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarEvents.WillEndCustomizingItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBar.WillEndCustomizingItems"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITabBarControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITabBarController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarControllerEvents.#ctor(UIKit.UITabBarController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITabBarController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITabBarControllerEvents.FinishedCustomizingViewControllers">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBarController.FinishedCustomizingViewControllers"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerEvents.OnCustomizingViewControllers">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBarController.OnCustomizingViewControllers"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerEvents.OnEndCustomizingViewControllers">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBarController.OnEndCustomizingViewControllers"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerEvents.ViewControllerSelected">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITabBarController.ViewControllerSelected"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITextFieldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITextField"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITextFieldEvents.#ctor(UIKit.UITextField)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITextField"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITextFieldEvents.Ended">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.Ended"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldEvents.EndedWithReason">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.EndedWithReason"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldEvents.Started">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextField.Started"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UITextViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UITextView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UITextViewEvents.#ctor(UIKit.UITextView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UITextView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UITextViewEvents.Changed">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Changed"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.Ended">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Ended"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.SelectionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.SelectionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewEvents.Started">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UITextView.Started"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIVideoEditorControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIVideoEditorController"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIVideoEditorControllerEvents.#ctor(UIKit.UIVideoEditorController)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIVideoEditorController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIVideoEditorController.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerEvents.Saved">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIVideoEditorController.Saved"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerEvents.UserCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIVideoEditorController.UserCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.UIWebViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:UIKit.UIWebView"/> class as observables.
            </summary>
        </member>
        <member name="M:UIKit.UIWebViewEvents.#ctor(UIKit.UIWebView)">
            <summary>
            Initializes a new instance of the <see cref = "T:UIKit.UIWebView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:UIKit.UIWebViewEvents.LoadError">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIWebView.LoadError"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIWebViewEvents.LoadFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIWebView.LoadFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:UIKit.UIWebViewEvents.LoadStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:UIKit.UIWebView.LoadStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:UIKit.NSLayoutManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.NSLayoutManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidChangeGeometryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidChangeGeometry(UIKit.NSLayoutManager,UIKit.NSTextContainer,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidCompleteLayoutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidCompleteLayout(UIKit.NSLayoutManager,UIKit.NSTextContainer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSLayoutManagerDelegateRx.DidInvalidatedLayoutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSLayoutManagerDelegate.DidInvalidatedLayout(UIKit.NSLayoutManager)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidChangeGeometry(UIKit.NSLayoutManager,UIKit.NSTextContainer,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidCompleteLayout(UIKit.NSLayoutManager,UIKit.NSTextContainer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSLayoutManagerDelegateRx.DidInvalidatedLayout(UIKit.NSLayoutManager)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.NSTextStorageDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.NSTextStorageDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageDelegateRx.DidProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSTextStorageDelegate.DidProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.NSTextStorageDelegateRx.WillProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.NSTextStorageDelegate.WillProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.NSTextStorageDelegateRx.DidProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.NSTextStorageDelegateRx.WillProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIAccelerometerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIAccelerometerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIAccelerometerDelegateRx.DidAccelerateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAccelerometerDelegate.DidAccelerate(UIKit.UIAccelerometer,UIKit.UIAcceleration)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIAccelerometerDelegateRx.DidAccelerate(UIKit.UIAccelerometer,UIKit.UIAcceleration)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIActionSheetDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIActionSheetDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.CanceledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.Canceled(UIKit.UIActionSheet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.ClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.Clicked(UIKit.UIActionSheet,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.DismissedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.Dismissed(UIKit.UIActionSheet,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.PresentedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.Presented(UIKit.UIActionSheet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.WillDismiss(UIKit.UIActionSheet,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIActionSheetDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIActionSheetDelegate.WillPresent(UIKit.UIActionSheet)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.Canceled(UIKit.UIActionSheet)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.Clicked(UIKit.UIActionSheet,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.Dismissed(UIKit.UIActionSheet,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.Presented(UIKit.UIActionSheet)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.WillDismiss(UIKit.UIActionSheet,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIActionSheetDelegateRx.WillPresent(UIKit.UIActionSheet)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIAdaptivePresentationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIAdaptivePresentationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.DidAttemptToDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.DidAttemptToDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.DidDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.WillDismiss(UIKit.UIPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAdaptivePresentationControllerDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAdaptivePresentationControllerDelegate.WillPresent(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.DidAttemptToDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.DidDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.WillDismiss(UIKit.UIPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAdaptivePresentationControllerDelegateRx.WillPresent(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIAlertViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIAlertViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.CanceledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.Canceled(UIKit.UIAlertView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.ClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.Clicked(UIKit.UIAlertView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.DismissedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.Dismissed(UIKit.UIAlertView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.PresentedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.Presented(UIKit.UIAlertView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.WillDismiss(UIKit.UIAlertView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIAlertViewDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIAlertViewDelegate.WillPresent(UIKit.UIAlertView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.Canceled(UIKit.UIAlertView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.Clicked(UIKit.UIAlertView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.Dismissed(UIKit.UIAlertView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.Presented(UIKit.UIAlertView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.WillDismiss(UIKit.UIAlertView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIAlertViewDelegateRx.WillPresent(UIKit.UIAlertView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIApplicationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIApplicationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ApplicationSignificantTimeChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ApplicationSignificantTimeChange(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ChangedStatusBarFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ChangedStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidChangeStatusBarOrientationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidDecodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidDiscardSceneSessionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidEnterBackground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidFailToContinueUserActivitiyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidReceiveRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.DidRegisterUserNotificationSettingsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.DidRegisterUserNotificationSettings(UIKit.UIApplication,UIKit.UIUserNotificationSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.FailedToRegisterForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.FinishedLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.FinishedLaunching(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleAction(UIKit.UIApplication,System.String,UIKit.UILocalNotification,Foundation.NSDictionary,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleEventsForBackgroundUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleIntentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleIntent(UIKit.UIApplication,Intents.INIntent,System.Action{Intents.INIntentResponse})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.HandleWatchKitExtensionRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.OnActivatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.OnActivated(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.OnResignActivationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.OnResignActivation(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.PerformActionForShortcutItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.PerformActionForShortcutItem(UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.PerformFetchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ProtectedDataDidBecomeAvailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ProtectedDataWillBecomeUnavailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ReceivedLocalNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ReceivedLocalNotification(UIKit.UIApplication,UIKit.UILocalNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ReceivedRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ReceiveMemoryWarningObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ReceiveMemoryWarning(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.RegisteredForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.ShouldRequestHealthAuthorizationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.ShouldRequestHealthAuthorization(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.UserActivityUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillChangeStatusBarFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillChangeStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillChangeStatusBarOrientationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillEnterForeground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIApplicationDelegateRx.WillTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIApplicationDelegate.WillTerminate(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ApplicationSignificantTimeChange(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ChangedStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidEnterBackground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.DidRegisterUserNotificationSettings(UIKit.UIApplication,UIKit.UIUserNotificationSettings)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.FinishedLaunching(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleAction(UIKit.UIApplication,System.String,UIKit.UILocalNotification,Foundation.NSDictionary,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleIntent(UIKit.UIApplication,Intents.INIntent,System.Action{Intents.INIntentResponse})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.OnActivated(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.OnResignActivation(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.PerformActionForShortcutItem(UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ReceivedLocalNotification(UIKit.UIApplication,UIKit.UILocalNotification)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ReceiveMemoryWarning(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.ShouldRequestHealthAuthorization(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillChangeStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillEnterForeground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIApplicationDelegateRx.WillTerminate(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICloudSharingControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICloudSharingControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICloudSharingControllerDelegateRx.DidSaveShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICloudSharingControllerDelegate.DidSaveShare(UIKit.UICloudSharingController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICloudSharingControllerDelegateRx.DidStopSharingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICloudSharingControllerDelegate.DidStopSharing(UIKit.UICloudSharingController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICloudSharingControllerDelegateRx.FailedToSaveShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICloudSharingControllerDelegate.FailedToSaveShare(UIKit.UICloudSharingController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICloudSharingControllerDelegateRx.DidSaveShare(UIKit.UICloudSharingController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICloudSharingControllerDelegateRx.DidStopSharing(UIKit.UICloudSharingController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICloudSharingControllerDelegateRx.FailedToSaveShare(UIKit.UICloudSharingController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollectionViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollectionViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DecelerationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DecelerationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DecelerationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DecelerationStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidBeginMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidBeginMultipleSelectionInteraction(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidChangeAdjustedContentInsetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidChangeAdjustedContentInset(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidEndMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidEndMultipleSelectionInteraction(UIKit.UICollectionView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DidZoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DidZoom(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DraggingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DraggingEnded(UIKit.UIScrollView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.DraggingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.DraggingStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ItemUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ScrollAnimationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ScrollAnimationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ScrolledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.Scrolled(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ScrolledToTopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ScrolledToTop(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.SupplementaryViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.WillDisplayCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.WillDisplaySupplementaryViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.WillPerformPreviewActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.WillPerformPreviewAction(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ZoomingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDelegateRx.ZoomingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDelegate.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DecelerationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DecelerationStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidBeginMultipleSelectionInteraction(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidChangeAdjustedContentInset(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidEndMultipleSelectionInteraction(UIKit.UICollectionView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DidZoom(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DraggingEnded(UIKit.UIScrollView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.DraggingStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ScrollAnimationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.Scrolled(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ScrolledToTop(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.WillPerformPreviewAction(UIKit.UICollectionView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDelegateRx.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollectionViewDragDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollectionViewDragDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDragDelegateRx.DragSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDragDelegate.DragSessionDidEnd(UIKit.UICollectionView,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDragDelegateRx.DragSessionWillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDragDelegate.DragSessionWillBegin(UIKit.UICollectionView,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollectionViewDragDelegateRx.DragSessionDidEnd(UIKit.UICollectionView,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDragDelegateRx.DragSessionWillBegin(UIKit.UICollectionView,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollectionViewDropDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollectionViewDropDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDropDelegateRx.DropSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDropDelegate.DropSessionDidEnd(UIKit.UICollectionView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDropDelegateRx.DropSessionDidEnterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDropDelegate.DropSessionDidEnter(UIKit.UICollectionView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDropDelegateRx.DropSessionDidExitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDropDelegate.DropSessionDidExit(UIKit.UICollectionView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollectionViewDropDelegateRx.PerformDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollectionViewDropDelegate.PerformDrop(UIKit.UICollectionView,UIKit.IUICollectionViewDropCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollectionViewDropDelegateRx.DropSessionDidEnd(UIKit.UICollectionView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDropDelegateRx.DropSessionDidEnter(UIKit.UICollectionView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDropDelegateRx.DropSessionDidExit(UIKit.UICollectionView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollectionViewDropDelegateRx.PerformDrop(UIKit.UICollectionView,UIKit.IUICollectionViewDropCoordinator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UICollisionBehaviorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UICollisionBehaviorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.BeganBoundaryContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.BeganBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.BeganContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.BeganContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.EndedBoundaryContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.EndedBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UICollisionBehaviorDelegateRx.EndedContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UICollisionBehaviorDelegate.EndedContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.BeganBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.BeganContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.EndedBoundaryContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UICollisionBehaviorDelegateRx.EndedContact(UIKit.UICollisionBehavior,UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIContextMenuInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIContextMenuInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIContextMenuInteractionDelegateRx.WillDisplayMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIContextMenuInteractionDelegate.WillDisplayMenu(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIContextMenuInteractionDelegateRx.WillEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIContextMenuInteractionDelegate.WillEnd(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIContextMenuInteractionDelegateRx.WillPerformPreviewActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIContextMenuInteractionDelegate.WillPerformPreviewAction(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIContextMenuInteractionDelegateRx.WillDisplayMenu(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIContextMenuInteractionDelegateRx.WillEnd(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionAnimating)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIContextMenuInteractionDelegateRx.WillPerformPreviewAction(UIKit.UIContextMenuInteraction,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDocumentBrowserViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDocumentBrowserViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidImportDocumentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.DidImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidPickDocumentsAtUrlsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentsAtUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidPickDocumentUrlsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidRequestDocumentCreationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.DidRequestDocumentCreation(UIKit.UIDocumentBrowserViewController,System.Action{Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.FailedToImportDocumentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.FailedToImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentBrowserViewControllerDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentBrowserViewControllerDelegate.WillPresent(UIKit.UIDocumentBrowserViewController,UIKit.UIActivityViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidPickDocumentsAtUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidPickDocumentUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.DidRequestDocumentCreation(UIKit.UIDocumentBrowserViewController,System.Action{Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.FailedToImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentBrowserViewControllerDelegateRx.WillPresent(UIKit.UIDocumentBrowserViewController,UIKit.UIActivityViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDocumentInteractionControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDocumentInteractionControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.DidDismissOpenInMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.DidDismissOpenInMenu(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.DidDismissOptionsMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.DidDismissOptionsMenu(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.DidEndPreviewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.DidEndPreview(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.DidEndSendingToApplicationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.DidEndSendingToApplication(UIKit.UIDocumentInteractionController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.WillBeginPreviewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.WillBeginPreview(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.WillBeginSendingToApplicationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.WillBeginSendingToApplication(UIKit.UIDocumentInteractionController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.WillPresentOpenInMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.WillPresentOpenInMenu(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentInteractionControllerDelegateRx.WillPresentOptionsMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentInteractionControllerDelegate.WillPresentOptionsMenu(UIKit.UIDocumentInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.DidDismissOpenInMenu(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.DidDismissOptionsMenu(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.DidEndPreview(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.DidEndSendingToApplication(UIKit.UIDocumentInteractionController,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.WillBeginPreview(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.WillBeginSendingToApplication(UIKit.UIDocumentInteractionController,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.WillPresentOpenInMenu(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentInteractionControllerDelegateRx.WillPresentOptionsMenu(UIKit.UIDocumentInteractionController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDocumentMenuDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDocumentMenuDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentMenuDelegateRx.DidPickDocumentPickerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentMenuDelegate.DidPickDocumentPicker(UIKit.UIDocumentMenuViewController,UIKit.UIDocumentPickerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentMenuDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentMenuDelegate.WasCancelled(UIKit.UIDocumentMenuViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentMenuDelegateRx.DidPickDocumentPicker(UIKit.UIDocumentMenuViewController,UIKit.UIDocumentPickerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentMenuDelegateRx.WasCancelled(UIKit.UIDocumentMenuViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDocumentPickerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDocumentPickerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentPickerDelegateRx.DidPickDocumentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentPickerDelegate.DidPickDocument(UIKit.UIDocumentPickerViewController,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDocumentPickerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDocumentPickerDelegate.WasCancelled(UIKit.UIDocumentPickerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDocumentPickerDelegateRx.DidPickDocument(UIKit.UIDocumentPickerViewController,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDocumentPickerDelegateRx.WasCancelled(UIKit.UIDocumentPickerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDragInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDragInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.SessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.SessionDidEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.SessionDidMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.SessionDidMove(UIKit.UIDragInteraction,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.SessionDidTransferItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.SessionDidTransferItems(UIKit.UIDragInteraction,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.SessionWillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.SessionWillBegin(UIKit.UIDragInteraction,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.SessionWillEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.SessionWillEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.WillAddItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.WillAddItems(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDragItem[],UIKit.UIDragInteraction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.WillAnimateCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.WillAnimateCancel(UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDragInteractionDelegateRx.WillAnimateLiftObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDragInteractionDelegate.WillAnimateLift(UIKit.UIDragInteraction,UIKit.IUIDragAnimating,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.SessionDidEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.SessionDidMove(UIKit.UIDragInteraction,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.SessionDidTransferItems(UIKit.UIDragInteraction,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.SessionWillBegin(UIKit.UIDragInteraction,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.SessionWillEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.WillAddItems(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDragItem[],UIKit.UIDragInteraction)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.WillAnimateCancel(UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDragInteractionDelegateRx.WillAnimateLift(UIKit.UIDragInteraction,UIKit.IUIDragAnimating,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDropInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDropInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.ConcludeDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.ConcludeDrop(UIKit.UIDropInteraction,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.PerformDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.PerformDrop(UIKit.UIDropInteraction,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.SessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.SessionDidEnd(UIKit.UIDropInteraction,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.SessionDidEnterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.SessionDidEnter(UIKit.UIDropInteraction,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.SessionDidExitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.SessionDidExit(UIKit.UIDropInteraction,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDropInteractionDelegateRx.WillAnimateDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDropInteractionDelegate.WillAnimateDrop(UIKit.UIDropInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.ConcludeDrop(UIKit.UIDropInteraction,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.PerformDrop(UIKit.UIDropInteraction,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.SessionDidEnd(UIKit.UIDropInteraction,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.SessionDidEnter(UIKit.UIDropInteraction,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.SessionDidExit(UIKit.UIDropInteraction,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDropInteractionDelegateRx.WillAnimateDrop(UIKit.UIDropInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIDynamicAnimatorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIDynamicAnimatorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIDynamicAnimatorDelegateRx.DidPauseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDynamicAnimatorDelegate.DidPause(UIKit.UIDynamicAnimator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIDynamicAnimatorDelegateRx.WillResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIDynamicAnimatorDelegate.WillResume(UIKit.UIDynamicAnimator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIDynamicAnimatorDelegateRx.DidPause(UIKit.UIDynamicAnimator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIDynamicAnimatorDelegateRx.WillResume(UIKit.UIDynamicAnimator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIFontPickerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIFontPickerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIFontPickerViewControllerDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIFontPickerViewControllerDelegate.DidCancel(UIKit.UIFontPickerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIFontPickerViewControllerDelegateRx.DidPickFontObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIFontPickerViewControllerDelegate.DidPickFont(UIKit.UIFontPickerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIFontPickerViewControllerDelegateRx.DidCancel(UIKit.UIFontPickerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIFontPickerViewControllerDelegateRx.DidPickFont(UIKit.UIFontPickerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIImagePickerControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIImagePickerControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIImagePickerControllerDelegateRx.CanceledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIImagePickerControllerDelegate.Canceled(UIKit.UIImagePickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIImagePickerControllerDelegateRx.FinishedPickingImageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIImagePickerControllerDelegate.FinishedPickingImage(UIKit.UIImagePickerController,UIKit.UIImage,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIImagePickerControllerDelegateRx.FinishedPickingMediaObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIImagePickerControllerDelegate.FinishedPickingMedia(UIKit.UIImagePickerController,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIImagePickerControllerDelegateRx.Canceled(UIKit.UIImagePickerController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIImagePickerControllerDelegateRx.FinishedPickingImage(UIKit.UIImagePickerController,UIKit.UIImage,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIImagePickerControllerDelegateRx.FinishedPickingMedia(UIKit.UIImagePickerController,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UILargeContentViewerInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UILargeContentViewerInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UILargeContentViewerInteractionDelegateRx.DidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UILargeContentViewerInteractionDelegate.DidEnd(UIKit.UILargeContentViewerInteraction,UIKit.IUILargeContentViewerItem,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UILargeContentViewerInteractionDelegateRx.DidEnd(UIKit.UILargeContentViewerInteraction,UIKit.IUILargeContentViewerItem,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UINavigationBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UINavigationBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationBarDelegateRx.DidPopItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationBarDelegate.DidPopItem(UIKit.UINavigationBar,UIKit.UINavigationItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationBarDelegateRx.DidPushItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationBarDelegate.DidPushItem(UIKit.UINavigationBar,UIKit.UINavigationItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UINavigationBarDelegateRx.DidPopItem(UIKit.UINavigationBar,UIKit.UINavigationItem)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UINavigationBarDelegateRx.DidPushItem(UIKit.UINavigationBar,UIKit.UINavigationItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UINavigationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UINavigationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationControllerDelegateRx.DidShowViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationControllerDelegate.DidShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UINavigationControllerDelegateRx.WillShowViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UINavigationControllerDelegate.WillShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UINavigationControllerDelegateRx.DidShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UINavigationControllerDelegateRx.WillShowViewController(UIKit.UINavigationController,UIKit.UIViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPageViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPageViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerDelegateRx.DidFinishAnimatingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPageViewControllerDelegate.DidFinishAnimating(UIKit.UIPageViewController,System.Boolean,UIKit.UIViewController[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPageViewControllerDelegateRx.WillTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPageViewControllerDelegate.WillTransition(UIKit.UIPageViewController,UIKit.UIViewController[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPageViewControllerDelegateRx.DidFinishAnimating(UIKit.UIPageViewController,System.Boolean,UIKit.UIViewController[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPageViewControllerDelegateRx.WillTransition(UIKit.UIPageViewController,UIKit.UIViewController[])">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPencilInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPencilInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPencilInteractionDelegateRx.DidTapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPencilInteractionDelegate.DidTap(UIKit.UIPencilInteraction)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPencilInteractionDelegateRx.DidTap(UIKit.UIPencilInteraction)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPickerViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPickerViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPickerViewDelegateRx.SelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPickerViewDelegate.Selected(UIKit.UIPickerView,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPickerViewDelegateRx.Selected(UIKit.UIPickerView,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPopoverControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPopoverControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPopoverControllerDelegate.DidDismiss(UIKit.UIPopoverController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverControllerDelegateRx.DidDismiss(UIKit.UIPopoverController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPopoverPresentationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPopoverPresentationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerDelegateRx.DidDismissPopoverObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPopoverPresentationControllerDelegate.DidDismissPopover(UIKit.UIPopoverPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerDelegateRx.PrepareForPopoverPresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPopoverPresentationControllerDelegate.PrepareForPopoverPresentation(UIKit.UIPopoverPresentationController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPopoverPresentationControllerDelegateRx.WillRepositionPopoverObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPopoverPresentationControllerDelegate.WillRepositionPopover(UIKit.UIPopoverPresentationController,CoreGraphics.CGRect,UIKit.UIView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPopoverPresentationControllerDelegateRx.DidDismissPopover(UIKit.UIPopoverPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPopoverPresentationControllerDelegateRx.PrepareForPopoverPresentation(UIKit.UIPopoverPresentationController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPopoverPresentationControllerDelegateRx.WillRepositionPopover(UIKit.UIPopoverPresentationController,CoreGraphics.CGRect,UIKit.UIView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPreviewInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPreviewInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPreviewInteractionDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPreviewInteractionDelegate.DidCancel(UIKit.UIPreviewInteraction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPreviewInteractionDelegateRx.DidUpdateCommitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPreviewInteractionDelegate.DidUpdateCommit(UIKit.UIPreviewInteraction,System.nfloat,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPreviewInteractionDelegateRx.DidUpdatePreviewTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPreviewInteractionDelegate.DidUpdatePreviewTransition(UIKit.UIPreviewInteraction,System.nfloat,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPreviewInteractionDelegateRx.DidCancel(UIKit.UIPreviewInteraction)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPreviewInteractionDelegateRx.DidUpdateCommit(UIKit.UIPreviewInteraction,System.nfloat,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPreviewInteractionDelegateRx.DidUpdatePreviewTransition(UIKit.UIPreviewInteraction,System.nfloat,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPrinterPickerControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPrinterPickerControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPrinterPickerControllerDelegateRx.DidDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrinterPickerControllerDelegate.DidDismiss(UIKit.UIPrinterPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrinterPickerControllerDelegateRx.DidPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrinterPickerControllerDelegate.DidPresent(UIKit.UIPrinterPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrinterPickerControllerDelegateRx.DidSelectPrinterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrinterPickerControllerDelegate.DidSelectPrinter(UIKit.UIPrinterPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrinterPickerControllerDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrinterPickerControllerDelegate.WillDismiss(UIKit.UIPrinterPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrinterPickerControllerDelegateRx.WillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrinterPickerControllerDelegate.WillPresent(UIKit.UIPrinterPickerController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPrinterPickerControllerDelegateRx.DidDismiss(UIKit.UIPrinterPickerController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrinterPickerControllerDelegateRx.DidPresent(UIKit.UIPrinterPickerController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrinterPickerControllerDelegateRx.DidSelectPrinter(UIKit.UIPrinterPickerController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrinterPickerControllerDelegateRx.WillDismiss(UIKit.UIPrinterPickerController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrinterPickerControllerDelegateRx.WillPresent(UIKit.UIPrinterPickerController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIPrintInteractionControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIPrintInteractionControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.DidDismissPrinterOptionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.DidDismissPrinterOptions(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.DidFinishJobObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.DidFinishJob(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.DidPresentPrinterOptionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.DidPresentPrinterOptions(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.WillDismissPrinterOptionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.WillDismissPrinterOptions(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.WillPresentPrinterOptionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.WillPresentPrinterOptions(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIPrintInteractionControllerDelegateRx.WillStartJobObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIPrintInteractionControllerDelegate.WillStartJob(UIKit.UIPrintInteractionController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.DidDismissPrinterOptions(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.DidFinishJob(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.DidPresentPrinterOptions(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.WillDismissPrinterOptions(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.WillPresentPrinterOptions(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIPrintInteractionControllerDelegateRx.WillStartJob(UIKit.UIPrintInteractionController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.ContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidBecomeActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidDisconnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidDisconnect(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidEnterBackground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidFailToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.DidUpdateUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.OpenUrlContextsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillContinueUserActivity(UIKit.UIScene,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillEnterForeground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISceneDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISceneDelegate.WillResignActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidBecomeActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidDisconnect(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidEnterBackground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillContinueUserActivity(UIKit.UIScene,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillEnterForeground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISceneDelegateRx.WillResignActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIScreenshotServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIScreenshotServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIScreenshotServiceDelegateRx.GeneratePdfRepresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScreenshotServiceDelegate.GeneratePdfRepresentation(UIKit.UIScreenshotService,UIKit.UIScreenshotServiceDelegatePdfHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIScreenshotServiceDelegateRx.GeneratePdfRepresentation(UIKit.UIScreenshotService,UIKit.UIScreenshotServiceDelegatePdfHandler)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIScrollViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIScrollViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DecelerationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DecelerationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DecelerationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DecelerationStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DidChangeAdjustedContentInsetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DidChangeAdjustedContentInset(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DidZoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DidZoom(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DraggingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DraggingEnded(UIKit.UIScrollView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.DraggingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.DraggingStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrollAnimationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ScrollAnimationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrolledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.Scrolled(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ScrolledToTopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ScrolledToTop(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ZoomingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIScrollViewDelegateRx.ZoomingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIScrollViewDelegate.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DecelerationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DecelerationStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DidChangeAdjustedContentInset(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DidZoom(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DraggingEnded(UIKit.UIScrollView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.DraggingStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ScrollAnimationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.Scrolled(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ScrolledToTop(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIScrollViewDelegateRx.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.BookmarkButtonClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.BookmarkButtonClicked(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.CancelButtonClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.CancelButtonClicked(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.ListButtonClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.ListButtonClicked(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.OnEditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.OnEditingStarted(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.OnEditingStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.OnEditingStopped(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.SearchButtonClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.SearchButtonClicked(UIKit.UISearchBar)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.SelectedScopeButtonIndexChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.SelectedScopeButtonIndexChanged(UIKit.UISearchBar,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchBarDelegateRx.TextChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchBarDelegate.TextChanged(UIKit.UISearchBar,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.BookmarkButtonClicked(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.CancelButtonClicked(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.ListButtonClicked(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.OnEditingStarted(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.OnEditingStopped(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.SearchButtonClicked(UIKit.UISearchBar)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.SelectedScopeButtonIndexChanged(UIKit.UISearchBar,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchBarDelegateRx.TextChanged(UIKit.UISearchBar,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.DidDismissSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.DidDismissSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.DidPresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.DidPresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.PresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.PresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.WillDismissSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.WillDismissSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchControllerDelegateRx.WillPresentSearchControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchControllerDelegate.WillPresentSearchController(UIKit.UISearchController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.DidDismissSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.DidPresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.PresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.WillDismissSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchControllerDelegateRx.WillPresentSearchController(UIKit.UISearchController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchDisplayDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchDisplayDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.DidBeginSearchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.DidBeginSearch(UIKit.UISearchDisplayController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.DidEndSearchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.DidEndSearch(UIKit.UISearchDisplayController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.DidHideSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.DidHideSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.DidLoadSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.DidLoadSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.DidShowSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.DidShowSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.WillBeginSearchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.WillBeginSearch(UIKit.UISearchDisplayController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.WillEndSearchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.WillEndSearch(UIKit.UISearchDisplayController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.WillHideSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.WillHideSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.WillShowSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.WillShowSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchDisplayDelegateRx.WillUnloadSearchResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchDisplayDelegate.WillUnloadSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.DidBeginSearch(UIKit.UISearchDisplayController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.DidEndSearch(UIKit.UISearchDisplayController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.DidHideSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.DidLoadSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.DidShowSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.WillBeginSearch(UIKit.UISearchDisplayController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.WillEndSearch(UIKit.UISearchDisplayController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.WillHideSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.WillShowSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchDisplayDelegateRx.WillUnloadSearchResults(UIKit.UISearchDisplayController,UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISearchTextFieldDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISearchTextFieldDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISearchTextFieldDelegateRx.DidChangeSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchTextFieldDelegate.DidChangeSelection(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchTextFieldDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchTextFieldDelegate.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISearchTextFieldDelegateRx.EditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISearchTextFieldDelegate.EditingStarted(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISearchTextFieldDelegateRx.DidChangeSelection(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchTextFieldDelegateRx.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISearchTextFieldDelegateRx.EditingStarted(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UISplitViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UISplitViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerDelegateRx.WillChangeDisplayModeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISplitViewControllerDelegate.WillChangeDisplayMode(UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerDelegateRx.WillHideViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISplitViewControllerDelegate.WillHideViewController(UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem,UIKit.UIPopoverController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerDelegateRx.WillPresentViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISplitViewControllerDelegate.WillPresentViewController(UIKit.UISplitViewController,UIKit.UIPopoverController,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UISplitViewControllerDelegateRx.WillShowViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UISplitViewControllerDelegate.WillShowViewController(UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UISplitViewControllerDelegateRx.WillChangeDisplayMode(UIKit.UISplitViewController,UIKit.UISplitViewControllerDisplayMode)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISplitViewControllerDelegateRx.WillHideViewController(UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem,UIKit.UIPopoverController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISplitViewControllerDelegateRx.WillPresentViewController(UIKit.UISplitViewController,UIKit.UIPopoverController,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UISplitViewControllerDelegateRx.WillShowViewController(UIKit.UISplitViewController,UIKit.UIViewController,UIKit.UIBarButtonItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITabBarControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITabBarControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerDelegateRx.FinishedCustomizingViewControllersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarControllerDelegate.FinishedCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerDelegateRx.OnCustomizingViewControllersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarControllerDelegate.OnCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerDelegateRx.OnEndCustomizingViewControllersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarControllerDelegate.OnEndCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarControllerDelegateRx.ViewControllerSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarControllerDelegate.ViewControllerSelected(UIKit.UITabBarController,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarControllerDelegateRx.FinishedCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarControllerDelegateRx.OnCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[])">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarControllerDelegateRx.OnEndCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarControllerDelegateRx.ViewControllerSelected(UIKit.UITabBarController,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITabBarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITabBarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.DidBeginCustomizingItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.DidBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.DidEndCustomizingItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.DidEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.ItemSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.ItemSelected(UIKit.UITabBar,UIKit.UITabBarItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.WillBeginCustomizingItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.WillBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITabBarDelegateRx.WillEndCustomizingItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITabBarDelegate.WillEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.DidBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.DidEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.ItemSelected(UIKit.UITabBar,UIKit.UITabBarItem)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.WillBeginCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[])">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITabBarDelegateRx.WillEndCustomizingItems(UIKit.UITabBar,UIKit.UITabBarItem[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.AccessoryButtonTappedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.DidBeginMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.DidBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.DidEndEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.DidEndMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.DidEndMultipleSelectionInteraction(UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.FooterViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.HeaderViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.RowUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillBeginEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayFooterViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillDisplayHeaderViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDelegateRx.WillPerformPreviewActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDelegate.WillPerformPreviewAction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.DidBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.DidEndMultipleSelectionInteraction(UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDelegateRx.WillPerformPreviewAction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewDragDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewDragDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDragDelegateRx.DragSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDragDelegate.DragSessionDidEnd(UIKit.UITableView,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDragDelegateRx.DragSessionWillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDragDelegate.DragSessionWillBegin(UIKit.UITableView,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewDragDelegateRx.DragSessionDidEnd(UIKit.UITableView,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDragDelegateRx.DragSessionWillBegin(UIKit.UITableView,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewDropDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewDropDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDropDelegateRx.DropSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDropDelegate.DropSessionDidEnd(UIKit.UITableView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDropDelegateRx.DropSessionDidEnterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDropDelegate.DropSessionDidEnter(UIKit.UITableView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDropDelegateRx.DropSessionDidExitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDropDelegate.DropSessionDidExit(UIKit.UITableView,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewDropDelegateRx.PerformDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewDropDelegate.PerformDrop(UIKit.UITableView,UIKit.IUITableViewDropCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewDropDelegateRx.DropSessionDidEnd(UIKit.UITableView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDropDelegateRx.DropSessionDidEnter(UIKit.UITableView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDropDelegateRx.DropSessionDidExit(UIKit.UITableView,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewDropDelegateRx.PerformDrop(UIKit.UITableView,UIKit.IUITableViewDropCoordinator)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITableViewSourceRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITableViewSource"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.AccessoryButtonTappedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.CellDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.CommitEditingStyleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.DidBeginMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.DidBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.DidEndEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.DidEndMultipleSelectionInteractionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.DidEndMultipleSelectionInteraction(UIKit.UITableView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.DidUpdateFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.FooterViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.HeaderViewDisplayingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.MoveRowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowHighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.RowUnhighlightedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillBeginEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayFooterViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillDisplayHeaderViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITableViewSourceRx.WillPerformPreviewActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITableViewSource.WillPerformPreviewAction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.DidBeginMultipleSelectionInteraction(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.DidEndMultipleSelectionInteraction(UIKit.UITableView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITableViewSourceRx.WillPerformPreviewAction(UIKit.UITableView,UIKit.UIContextMenuConfiguration,UIKit.IUIContextMenuInteractionCommitAnimating)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextDragDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextDragDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextDragDelegateRx.DragSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDragDelegate.DragSessionDidEnd(UIKit.IUITextDraggable,UIKit.IUIDragSession,UIKit.UIDropOperation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDragDelegateRx.DragSessionWillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDragDelegate.DragSessionWillBegin(UIKit.IUITextDraggable,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDragDelegateRx.WillAnimateLiftObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDragDelegate.WillAnimateLift(UIKit.IUITextDraggable,UIKit.IUIDragAnimating,UIKit.IUIDragSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextDragDelegateRx.DragSessionDidEnd(UIKit.IUITextDraggable,UIKit.IUIDragSession,UIKit.UIDropOperation)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDragDelegateRx.DragSessionWillBegin(UIKit.IUITextDraggable,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDragDelegateRx.WillAnimateLift(UIKit.IUITextDraggable,UIKit.IUIDragAnimating,UIKit.IUIDragSession)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextDropDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextDropDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextDropDelegateRx.DropSessionDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDropDelegate.DropSessionDidEnd(UIKit.IUITextDroppable,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDropDelegateRx.DropSessionDidEnterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDropDelegate.DropSessionDidEnter(UIKit.IUITextDroppable,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDropDelegateRx.DropSessionDidExitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDropDelegate.DropSessionDidExit(UIKit.IUITextDroppable,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDropDelegateRx.DropSessionDidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDropDelegate.DropSessionDidUpdate(UIKit.IUITextDroppable,UIKit.IUIDropSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextDropDelegateRx.WillPerformDropObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextDropDelegate.WillPerformDrop(UIKit.IUITextDroppable,UIKit.IUITextDropRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextDropDelegateRx.DropSessionDidEnd(UIKit.IUITextDroppable,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDropDelegateRx.DropSessionDidEnter(UIKit.IUITextDroppable,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDropDelegateRx.DropSessionDidExit(UIKit.IUITextDroppable,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDropDelegateRx.DropSessionDidUpdate(UIKit.IUITextDroppable,UIKit.IUIDropSession)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextDropDelegateRx.WillPerformDrop(UIKit.IUITextDroppable,UIKit.IUITextDropRequest)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextFieldDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextFieldDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.DidChangeSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.DidChangeSelection(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextFieldDelegateRx.EditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFieldDelegate.EditingStarted(UIKit.UITextField)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.DidChangeSelection(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextFieldDelegateRx.EditingStarted(UIKit.UITextField)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextFormattingCoordinatorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextFormattingCoordinatorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextFormattingCoordinatorDelegateRx.UpdateTextAttributesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextFormattingCoordinatorDelegate.UpdateTextAttributes(UIKit.UITextAttributesConversionHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextFormattingCoordinatorDelegateRx.UpdateTextAttributes(UIKit.UITextAttributesConversionHandler)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextInputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextInputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.SelectionDidChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.SelectionWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.SelectionWillChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.TextDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.TextDidChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInputDelegateRx.TextWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInputDelegate.TextWillChange(UIKit.IUITextInput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.SelectionDidChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.SelectionWillChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.TextDidChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInputDelegateRx.TextWillChange(UIKit.IUITextInput)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextInteractionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextInteractionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextInteractionDelegateRx.DidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInteractionDelegate.DidEnd(UIKit.UITextInteraction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextInteractionDelegateRx.WillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextInteractionDelegate.WillBegin(UIKit.UITextInteraction)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextInteractionDelegateRx.DidEnd(UIKit.UITextInteraction)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextInteractionDelegateRx.WillBegin(UIKit.UITextInteraction)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextPasteDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextPasteDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextPasteDelegateRx.TransformPasteItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextPasteDelegate.TransformPasteItem(UIKit.IUITextPasteConfigurationSupporting,UIKit.IUITextPasteItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextPasteDelegateRx.TransformPasteItem(UIKit.IUITextPasteConfigurationSupporting,UIKit.IUITextPasteItem)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UITextViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UITextViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.ChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.Changed(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.EditingEnded(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.EditingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.EditingStarted(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UITextViewDelegateRx.SelectionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UITextViewDelegate.SelectionChanged(UIKit.UITextView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.Changed(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.EditingEnded(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.EditingStarted(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UITextViewDelegateRx.SelectionChanged(UIKit.UITextView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIVideoEditorControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIVideoEditorControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIVideoEditorControllerDelegate.Failed(UIKit.UIVideoEditorController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerDelegateRx.UserCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIVideoEditorControllerDelegate.UserCancelled(UIKit.UIVideoEditorController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIVideoEditorControllerDelegateRx.VideoSavedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIVideoEditorControllerDelegate.VideoSaved(UIKit.UIVideoEditorController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIVideoEditorControllerDelegateRx.Failed(UIKit.UIVideoEditorController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIVideoEditorControllerDelegateRx.UserCancelled(UIKit.UIVideoEditorController)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIVideoEditorControllerDelegateRx.VideoSaved(UIKit.UIVideoEditorController,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIViewControllerPreviewingDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIViewControllerPreviewingDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIViewControllerPreviewingDelegateRx.CommitViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIViewControllerPreviewingDelegate.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIViewControllerPreviewingDelegateRx.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIWebViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIWebViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIWebViewDelegateRx.LoadFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWebViewDelegate.LoadFailed(UIKit.UIWebView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWebViewDelegateRx.LoadingFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWebViewDelegate.LoadingFinished(UIKit.UIWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWebViewDelegateRx.LoadStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWebViewDelegate.LoadStarted(UIKit.UIWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIWebViewDelegateRx.LoadFailed(UIKit.UIWebView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWebViewDelegateRx.LoadingFinished(UIKit.UIWebView)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWebViewDelegateRx.LoadStarted(UIKit.UIWebView)">
            <inheritdoc/>
        </member>
        <member name="T:UIKit.UIWindowSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UIKit.UIWindowSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.ContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidBecomeActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidDisconnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidDisconnect(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidEnterBackground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidFailToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidUpdateCoordinateSpaceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidUpdateCoordinateSpace(UIKit.UIWindowScene,UIKit.IUICoordinateSpace,UIKit.UIInterfaceOrientation,UIKit.UITraitCollection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.DidUpdateUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.OpenUrlContextsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.PerformActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.PerformAction(UIKit.UIWindowScene,UIKit.UIApplicationShortcutItem,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.UserDidAcceptCloudKitShare(UIKit.UIWindowScene,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillContinueUserActivity(UIKit.UIScene,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillEnterForeground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UIKit.UIWindowSceneDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UIKit.UIWindowSceneDelegate.WillResignActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidBecomeActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidDisconnect(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidEnterBackground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidUpdateCoordinateSpace(UIKit.UIWindowScene,UIKit.IUICoordinateSpace,UIKit.UIInterfaceOrientation,UIKit.UITraitCollection)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.PerformAction(UIKit.UIWindowScene,UIKit.UIApplicationShortcutItem,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.UserDidAcceptCloudKitShare(UIKit.UIWindowScene,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillContinueUserActivity(UIKit.UIScene,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillEnterForeground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:UIKit.UIWindowSceneDelegateRx.WillResignActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="T:ObjCRuntime.Events">
            <summary>
            A class that contains extension methods to wrap events contained within static classes within the <see cref = "N:ObjCRuntime"/> namespace.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalManagedException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalObjectiveCException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
            </summary>
        </member>
        <member name="T:ARKit.ARCoachingOverlayViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ARKit.ARCoachingOverlayViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ARKit.ARCoachingOverlayViewDelegateRx.DidDeactivateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARCoachingOverlayViewDelegate.DidDeactivate(ARKit.ARCoachingOverlayView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARCoachingOverlayViewDelegateRx.DidRequestSessionResetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARCoachingOverlayViewDelegate.DidRequestSessionReset(ARKit.ARCoachingOverlayView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARCoachingOverlayViewDelegateRx.WillActivateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARCoachingOverlayViewDelegate.WillActivate(ARKit.ARCoachingOverlayView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ARKit.ARCoachingOverlayViewDelegateRx.DidDeactivate(ARKit.ARCoachingOverlayView)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARCoachingOverlayViewDelegateRx.DidRequestSessionReset(ARKit.ARCoachingOverlayView)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARCoachingOverlayViewDelegateRx.WillActivate(ARKit.ARCoachingOverlayView)">
            <inheritdoc/>
        </member>
        <member name="T:ARKit.ARSCNViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ARKit.ARSCNViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.CameraDidChangeTrackingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidAddNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidAddNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidApplyAnimationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidFail(ARKit.ARSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidOutputAudioSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidOutputCollaborationDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidRemoveNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidRemoveNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.DidUpdateNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.DidUpdateNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.InterruptionEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.InterruptionEnded(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.Update(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.WasInterruptedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.WasInterrupted(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.WillRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSCNViewDelegateRx.WillUpdateNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSCNViewDelegate.WillUpdateNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidAddNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidFail(ARKit.ARSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidRemoveNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.DidUpdateNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.InterruptionEnded(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.Update(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.WasInterrupted(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSCNViewDelegateRx.WillUpdateNode(SceneKit.ISCNSceneRenderer,SceneKit.SCNNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="T:ARKit.ARSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ARKit.ARSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.CameraDidChangeTrackingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidAddAnchorsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidAddAnchors(ARKit.ARSession,ARKit.ARAnchor[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidFail(ARKit.ARSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidOutputAudioSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidOutputCollaborationDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidRemoveAnchorsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidRemoveAnchors(ARKit.ARSession,ARKit.ARAnchor[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidUpdateAnchorsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidUpdateAnchors(ARKit.ARSession,ARKit.ARAnchor[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.DidUpdateFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.DidUpdateFrame(ARKit.ARSession,ARKit.ARFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.InterruptionEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.InterruptionEnded(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSessionDelegateRx.WasInterruptedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSessionDelegate.WasInterrupted(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidAddAnchors(ARKit.ARSession,ARKit.ARAnchor[])">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidFail(ARKit.ARSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidRemoveAnchors(ARKit.ARSession,ARKit.ARAnchor[])">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidUpdateAnchors(ARKit.ARSession,ARKit.ARAnchor[])">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.DidUpdateFrame(ARKit.ARSession,ARKit.ARFrame)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.InterruptionEnded(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSessionDelegateRx.WasInterrupted(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="T:ARKit.ARSKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ARKit.ARSKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.CameraDidChangeTrackingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidAddNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidAddNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidFail(ARKit.ARSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidOutputAudioSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidOutputCollaborationDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidRemoveNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidRemoveNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.DidUpdateNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.DidUpdateNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.InterruptionEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.InterruptionEnded(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.WasInterruptedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.WasInterrupted(ARKit.ARSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ARKit.ARSKViewDelegateRx.WillUpdateNodeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ARKit.ARSKViewDelegate.WillUpdateNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.CameraDidChangeTrackingState(ARKit.ARSession,ARKit.ARCamera)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidAddNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidFail(ARKit.ARSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidOutputAudioSampleBuffer(ARKit.ARSession,CoreMedia.CMSampleBuffer)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidOutputCollaborationData(ARKit.ARSession,ARKit.ARCollaborationData)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidRemoveNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.DidUpdateNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.InterruptionEnded(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.WasInterrupted(ARKit.ARSession)">
            <inheritdoc/>
        </member>
        <member name="M:ARKit.ARSKViewDelegateRx.WillUpdateNode(ARKit.ARSKView,SpriteKit.SKNode,ARKit.ARAnchor)">
            <inheritdoc/>
        </member>
        <member name="T:AuthenticationServices.ASAuthorizationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AuthenticationServices.ASAuthorizationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AuthenticationServices.ASAuthorizationControllerDelegate.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVPictureInPictureControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVPictureInPictureControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.DidStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.DidStartPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.DidStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.DidStopPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.FailedToStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.FailedToStartPictureInPicture(AVKit.AVPictureInPictureController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.RestoreUserInterfaceForPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.RestoreUserInterfaceForPictureInPicture(AVKit.AVPictureInPictureController,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.WillStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.WillStartPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.WillStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.WillStopPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.DidStartPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.DidStopPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.FailedToStartPictureInPicture(AVKit.AVPictureInPictureController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.RestoreUserInterfaceForPictureInPicture(AVKit.AVPictureInPictureController,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.WillStartPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.WillStopPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVPlayerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVPlayerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidStartPictureInPicture(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.DidStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.DidStopPictureInPicture(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.FailedToStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.FailedToStartPictureInPicture(AVKit.AVPlayerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.RestoreUserInterfaceForPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.RestoreUserInterfaceForPictureInPicture(AVKit.AVPlayerViewController,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillBeginFullScreenPresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillBeginFullScreenPresentation(AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillEndFullScreenPresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillEndFullScreenPresentation(AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillStartPictureInPicture(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewControllerDelegateRx.WillStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewControllerDelegate.WillStopPictureInPicture(AVKit.AVPlayerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidStartPictureInPicture(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.DidStopPictureInPicture(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.FailedToStartPictureInPicture(AVKit.AVPlayerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.RestoreUserInterfaceForPictureInPicture(AVKit.AVPlayerViewController,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillBeginFullScreenPresentation(AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillEndFullScreenPresentation(AVKit.AVPlayerViewController,UIKit.IUIViewControllerTransitionCoordinator)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillStartPictureInPicture(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewControllerDelegateRx.WillStopPictureInPicture(AVKit.AVPlayerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVRoutePickerViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVRoutePickerViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.DidEndPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="T:CallKit.CXCallDirectoryExtensionContextDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CallKit.CXCallDirectoryExtensionContextDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CallKit.CXCallDirectoryExtensionContextDelegateRx.RequestFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXCallDirectoryExtensionContextDelegate.RequestFailed(CallKit.CXCallDirectoryExtensionContext,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CallKit.CXCallDirectoryExtensionContextDelegateRx.RequestFailed(CallKit.CXCallDirectoryExtensionContext,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CallKit.CXCallObserverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CallKit.CXCallObserverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CallKit.CXCallObserverDelegateRx.CallChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXCallObserverDelegate.CallChanged(CallKit.CXCallObserver,CallKit.CXCall)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CallKit.CXCallObserverDelegateRx.CallChanged(CallKit.CXCallObserver,CallKit.CXCall)">
            <inheritdoc/>
        </member>
        <member name="T:CallKit.CXProviderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CallKit.CXProviderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.DidActivateAudioSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.DidActivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.DidBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.DidBegin(CallKit.CXProvider)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.DidDeactivateAudioSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.DidDeactivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.DidResetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.DidReset(CallKit.CXProvider)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformAnswerCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformAnswerCallAction(CallKit.CXProvider,CallKit.CXAnswerCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformEndCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformEndCallAction(CallKit.CXProvider,CallKit.CXEndCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformPlayDtmfCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformPlayDtmfCallAction(CallKit.CXProvider,CallKit.CXPlayDtmfCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformSetGroupCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformSetGroupCallAction(CallKit.CXProvider,CallKit.CXSetGroupCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformSetHeldCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformSetHeldCallAction(CallKit.CXProvider,CallKit.CXSetHeldCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformSetMutedCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformSetMutedCallAction(CallKit.CXProvider,CallKit.CXSetMutedCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.PerformStartCallActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.PerformStartCallAction(CallKit.CXProvider,CallKit.CXStartCallAction)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CallKit.CXProviderDelegateRx.TimedOutPerformingActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CallKit.CXProviderDelegate.TimedOutPerformingAction(CallKit.CXProvider,CallKit.CXAction)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.DidActivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.DidBegin(CallKit.CXProvider)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.DidDeactivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.DidReset(CallKit.CXProvider)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformAnswerCallAction(CallKit.CXProvider,CallKit.CXAnswerCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformEndCallAction(CallKit.CXProvider,CallKit.CXEndCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformPlayDtmfCallAction(CallKit.CXProvider,CallKit.CXPlayDtmfCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformSetGroupCallAction(CallKit.CXProvider,CallKit.CXSetGroupCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformSetHeldCallAction(CallKit.CXProvider,CallKit.CXSetHeldCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformSetMutedCallAction(CallKit.CXProvider,CallKit.CXSetMutedCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.PerformStartCallAction(CallKit.CXProvider,CallKit.CXStartCallAction)">
            <inheritdoc/>
        </member>
        <member name="M:CallKit.CXProviderDelegateRx.TimedOutPerformingAction(CallKit.CXProvider,CallKit.CXAction)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPApplicationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPApplicationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ApplicationSignificantTimeChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ApplicationSignificantTimeChange(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ChangedStatusBarFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ChangedStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidChangeStatusBarOrientationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidConnectCarInterfaceControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidConnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidDecodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidDiscardSceneSessionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidDisconnectCarInterfaceControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidDisconnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidEnterBackground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidFailToContinueUserActivitiyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidReceiveRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidRegisterUserNotificationSettingsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidRegisterUserNotificationSettings(UIKit.UIApplication,UIKit.UIUserNotificationSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidSelectManeuverObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidSelectManeuver(UIKit.UIApplication,CarPlay.CPManeuver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.DidSelectNavigationAlertObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.DidSelectNavigationAlert(UIKit.UIApplication,CarPlay.CPNavigationAlert)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.FailedToRegisterForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.FinishedLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.FinishedLaunching(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.HandleActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.HandleAction(UIKit.UIApplication,System.String,UIKit.UILocalNotification,Foundation.NSDictionary,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.HandleEventsForBackgroundUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.HandleIntentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.HandleIntent(UIKit.UIApplication,Intents.INIntent,System.Action{Intents.INIntentResponse})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.HandleWatchKitExtensionRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.OnActivatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.OnActivated(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.OnResignActivationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.OnResignActivation(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.PerformActionForShortcutItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.PerformActionForShortcutItem(UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.PerformFetchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ProtectedDataDidBecomeAvailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ProtectedDataWillBecomeUnavailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ReceivedLocalNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ReceivedLocalNotification(UIKit.UIApplication,UIKit.UILocalNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ReceivedRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ReceiveMemoryWarningObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ReceiveMemoryWarning(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.RegisteredForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.ShouldRequestHealthAuthorizationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.ShouldRequestHealthAuthorization(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.UserActivityUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.WillChangeStatusBarFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.WillChangeStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.WillChangeStatusBarOrientationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.WillChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.WillEnterForeground(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPApplicationDelegateRx.WillTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPApplicationDelegate.WillTerminate(UIKit.UIApplication)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ApplicationSignificantTimeChange(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ChangedStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidConnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidDecodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidDiscardSceneSessions(UIKit.UIApplication,Foundation.NSSet{UIKit.UISceneSession})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidDisconnectCarInterfaceController(UIKit.UIApplication,CarPlay.CPInterfaceController,CarPlay.CPWindow)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidEnterBackground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidFailToContinueUserActivitiy(UIKit.UIApplication,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidReceiveRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidRegisterUserNotificationSettings(UIKit.UIApplication,UIKit.UIUserNotificationSettings)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidSelectManeuver(UIKit.UIApplication,CarPlay.CPManeuver)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.DidSelectNavigationAlert(UIKit.UIApplication,CarPlay.CPNavigationAlert)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.FailedToRegisterForRemoteNotifications(UIKit.UIApplication,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.FinishedLaunching(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.HandleAction(UIKit.UIApplication,System.String,UIKit.UILocalNotification,Foundation.NSDictionary,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.HandleEventsForBackgroundUrl(UIKit.UIApplication,System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.HandleIntent(UIKit.UIApplication,Intents.INIntent,System.Action{Intents.INIntentResponse})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.HandleWatchKitExtensionRequest(UIKit.UIApplication,Foundation.NSDictionary,System.Action{Foundation.NSDictionary})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.OnActivated(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.OnResignActivation(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.PerformActionForShortcutItem(UIKit.UIApplication,UIKit.UIApplicationShortcutItem,UIKit.UIOperationHandler)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.PerformFetch(UIKit.UIApplication,System.Action{UIKit.UIBackgroundFetchResult})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ProtectedDataDidBecomeAvailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ProtectedDataWillBecomeUnavailable(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ReceivedLocalNotification(UIKit.UIApplication,UIKit.UILocalNotification)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ReceivedRemoteNotification(UIKit.UIApplication,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ReceiveMemoryWarning(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.RegisteredForRemoteNotifications(UIKit.UIApplication,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.ShouldRequestHealthAuthorization(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.UserActivityUpdated(UIKit.UIApplication,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.UserDidAcceptCloudKitShare(UIKit.UIApplication,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.WillChangeStatusBarFrame(UIKit.UIApplication,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.WillChangeStatusBarOrientation(UIKit.UIApplication,UIKit.UIInterfaceOrientation,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.WillEncodeRestorableState(UIKit.UIApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.WillEnterForeground(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPApplicationDelegateRx.WillTerminate(UIKit.UIApplication)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPInterfaceControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPInterfaceControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPInterfaceControllerDelegateRx.TemplateDidAppearObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPInterfaceControllerDelegate.TemplateDidAppear(CarPlay.CPTemplate,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPInterfaceControllerDelegateRx.TemplateDidDisappearObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPInterfaceControllerDelegate.TemplateDidDisappear(CarPlay.CPTemplate,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPInterfaceControllerDelegateRx.TemplateWillAppearObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPInterfaceControllerDelegate.TemplateWillAppear(CarPlay.CPTemplate,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPInterfaceControllerDelegateRx.TemplateWillDisappearObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPInterfaceControllerDelegate.TemplateWillDisappear(CarPlay.CPTemplate,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPInterfaceControllerDelegateRx.TemplateDidAppear(CarPlay.CPTemplate,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPInterfaceControllerDelegateRx.TemplateDidDisappear(CarPlay.CPTemplate,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPInterfaceControllerDelegateRx.TemplateWillAppear(CarPlay.CPTemplate,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPInterfaceControllerDelegateRx.TemplateWillDisappear(CarPlay.CPTemplate,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPListTemplateDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPListTemplateDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPListTemplateDelegateRx.DidSelectListItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPListTemplateDelegate.DidSelectListItem(CarPlay.CPListTemplate,CarPlay.CPListItem,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPListTemplateDelegateRx.DidSelectListItem(CarPlay.CPListTemplate,CarPlay.CPListItem,System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPMapTemplateDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPMapTemplateDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidBeginPanGestureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidBeginPanGesture(CarPlay.CPMapTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidCancelNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidCancelNavigation(CarPlay.CPMapTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidDismissNavigationAlertObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidDismissNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidDismissPanningInterfaceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidDismissPanningInterface(CarPlay.CPMapTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidEndPanGestureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidEndPanGesture(CarPlay.CPMapTemplate,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidShowNavigationAlertObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidShowNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidShowPanningInterfaceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidShowPanningInterface(CarPlay.CPMapTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.DidUpdatePanGestureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.DidUpdatePanGesture(CarPlay.CPMapTemplate,CoreGraphics.CGPoint,CoreGraphics.CGPoint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.PanObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.Pan(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.PanBeganObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.PanBegan(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.PanEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.PanEnded(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.SelectedPreviewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.SelectedPreview(CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.StartedTripObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.StartedTrip(CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.WillDismissNavigationAlertObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.WillDismissNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.WillDismissPanningInterfaceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.WillDismissPanningInterface(CarPlay.CPMapTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPMapTemplateDelegateRx.WillShowNavigationAlertObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPMapTemplateDelegate.WillShowNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidBeginPanGesture(CarPlay.CPMapTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidCancelNavigation(CarPlay.CPMapTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidDismissNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidDismissPanningInterface(CarPlay.CPMapTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidEndPanGesture(CarPlay.CPMapTemplate,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidShowNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidShowPanningInterface(CarPlay.CPMapTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.DidUpdatePanGesture(CarPlay.CPMapTemplate,CoreGraphics.CGPoint,CoreGraphics.CGPoint)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.Pan(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.PanBegan(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.PanEnded(CarPlay.CPMapTemplate,CarPlay.CPPanDirection)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.SelectedPreview(CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.StartedTrip(CarPlay.CPMapTemplate,CarPlay.CPTrip,CarPlay.CPRouteChoice)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.WillDismissNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert,CarPlay.CPNavigationAlertDismissalContext)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.WillDismissPanningInterface(CarPlay.CPMapTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPMapTemplateDelegateRx.WillShowNavigationAlert(CarPlay.CPMapTemplate,CarPlay.CPNavigationAlert)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPSearchTemplateDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPSearchTemplateDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPSearchTemplateDelegateRx.SearchButtonPressedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPSearchTemplateDelegate.SearchButtonPressed(CarPlay.CPSearchTemplate)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPSearchTemplateDelegateRx.SelectedResultObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPSearchTemplateDelegate.SelectedResult(CarPlay.CPSearchTemplate,CarPlay.CPListItem,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPSearchTemplateDelegateRx.UpdatedSearchTextObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPSearchTemplateDelegate.UpdatedSearchText(CarPlay.CPSearchTemplate,System.String,CarPlay.CPSearchTemplateDelegateUpdateHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPSearchTemplateDelegateRx.SearchButtonPressed(CarPlay.CPSearchTemplate)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPSearchTemplateDelegateRx.SelectedResult(CarPlay.CPSearchTemplate,CarPlay.CPListItem,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPSearchTemplateDelegateRx.UpdatedSearchText(CarPlay.CPSearchTemplate,System.String,CarPlay.CPSearchTemplateDelegateUpdateHandler)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPSessionConfigurationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPSessionConfigurationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPSessionConfigurationDelegateRx.ContentStyleChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPSessionConfigurationDelegate.ContentStyleChanged(CarPlay.CPSessionConfiguration,CarPlay.CPContentStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPSessionConfigurationDelegateRx.LimitedUserInterfacesChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPSessionConfigurationDelegate.LimitedUserInterfacesChanged(CarPlay.CPSessionConfiguration,CarPlay.CPLimitableUserInterface)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPSessionConfigurationDelegateRx.ContentStyleChanged(CarPlay.CPSessionConfiguration,CarPlay.CPContentStyle)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPSessionConfigurationDelegateRx.LimitedUserInterfacesChanged(CarPlay.CPSessionConfiguration,CarPlay.CPLimitableUserInterface)">
            <inheritdoc/>
        </member>
        <member name="T:CarPlay.CPTemplateApplicationSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CarPlay.CPTemplateApplicationSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.ContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidBecomeActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidConnect(CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidDisconnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidDisconnect(CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidEnterBackgroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidEnterBackground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidFailToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidSelectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidSelect(CarPlay.CPTemplateApplicationScene,CarPlay.CPNavigationAlert)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.DidUpdateUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.OpenUrlContextsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.WillConnectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.WillContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.WillContinueUserActivity(UIKit.UIScene,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.WillEnterForegroundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.WillEnterForeground(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CarPlay.CPTemplateApplicationSceneDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CarPlay.CPTemplateApplicationSceneDelegate.WillResignActive(UIKit.UIScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.ContinueUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidBecomeActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidConnect(CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidDisconnect(CarPlay.CPTemplateApplicationScene,CarPlay.CPInterfaceController,CarPlay.CPWindow)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidEnterBackground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidFailToContinueUserActivity(UIKit.UIScene,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidSelect(CarPlay.CPTemplateApplicationScene,CarPlay.CPNavigationAlert)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.DidUpdateUserActivity(UIKit.UIScene,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.OpenUrlContexts(UIKit.UIScene,Foundation.NSSet{UIKit.UIOpenUrlContext})">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.WillConnect(UIKit.UIScene,UIKit.UISceneSession,UIKit.UISceneConnectionOptions)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.WillContinueUserActivity(UIKit.UIScene,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.WillEnterForeground(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="M:CarPlay.CPTemplateApplicationSceneDelegateRx.WillResignActive(UIKit.UIScene)">
            <inheritdoc/>
        </member>
        <member name="T:ContactsUI.CNContactPickerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ContactsUI.CNContactPickerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.ContactPickerDidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.ContactPickerDidCancel(ContactsUI.CNContactPickerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.DidSelectContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.DidSelectContact(ContactsUI.CNContactPickerViewController,Contacts.CNContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.DidSelectContactPropertiesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.DidSelectContactProperties(ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.DidSelectContactPropertyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.DidSelectContactProperty(ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.DidSelectContactsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.DidSelectContacts(ContactsUI.CNContactPickerViewController,Contacts.CNContact[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.ContactPickerDidCancel(ContactsUI.CNContactPickerViewController)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.DidSelectContact(ContactsUI.CNContactPickerViewController,Contacts.CNContact)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.DidSelectContactProperties(ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty[])">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.DidSelectContactProperty(ContactsUI.CNContactPickerViewController,Contacts.CNContactProperty)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.DidSelectContacts(ContactsUI.CNContactPickerViewController,Contacts.CNContact[])">
            <inheritdoc/>
        </member>
        <member name="T:ContactsUI.CNContactViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ContactsUI.CNContactViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactViewControllerDelegateRx.DidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactViewControllerDelegate.DidComplete(ContactsUI.CNContactViewController,Contacts.CNContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ContactsUI.CNContactViewControllerDelegateRx.DidComplete(ContactsUI.CNContactViewController,Contacts.CNContact)">
            <inheritdoc/>
        </member>
        <member name="T:CoreData.NSCoreDataCoreSpotlightDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreData.NSCoreDataCoreSpotlightDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexAllSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSCoreDataCoreSpotlightDelegate.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSCoreDataCoreSpotlightDelegate.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:CoreData.NSFetchedResultsControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreData.NSFetchedResultsControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeContentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeContent(CoreData.NSFetchedResultsController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeObject(CoreData.NSFetchedResultsController,Foundation.NSObject,Foundation.NSIndexPath,CoreData.NSFetchedResultsChangeType,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeSectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.DidChangeSection(CoreData.NSFetchedResultsController,CoreData.INSFetchedResultsSectionInfo,System.nuint,CoreData.NSFetchedResultsChangeType)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSFetchedResultsControllerDelegateRx.WillChangeContentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSFetchedResultsControllerDelegate.WillChangeContent(CoreData.NSFetchedResultsController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeContent(CoreData.NSFetchedResultsController)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeObject(CoreData.NSFetchedResultsController,Foundation.NSObject,Foundation.NSIndexPath,CoreData.NSFetchedResultsChangeType,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.DidChangeSection(CoreData.NSFetchedResultsController,CoreData.INSFetchedResultsSectionInfo,System.nuint,CoreData.NSFetchedResultsChangeType)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSFetchedResultsControllerDelegateRx.WillChangeContent(CoreData.NSFetchedResultsController)">
            <inheritdoc/>
        </member>
        <member name="T:CoreNFC.NFCNdefReaderSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreNFC.NFCNdefReaderSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCNdefReaderSessionDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCNdefReaderSessionDelegate.DidBecomeActive(CoreNFC.NFCNdefReaderSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCNdefReaderSessionDelegateRx.DidDetectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCNdefReaderSessionDelegate.DidDetect(CoreNFC.NFCNdefReaderSession,CoreNFC.NFCNdefMessage[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCNdefReaderSessionDelegateRx.DidDetectTagsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCNdefReaderSessionDelegate.DidDetectTags(CoreNFC.NFCNdefReaderSession,CoreNFC.INFCNdefTag[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCNdefReaderSessionDelegateRx.DidInvalidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCNdefReaderSessionDelegate.DidInvalidate(CoreNFC.NFCNdefReaderSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreNFC.NFCNdefReaderSessionDelegateRx.DidBecomeActive(CoreNFC.NFCNdefReaderSession)">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCNdefReaderSessionDelegateRx.DidDetect(CoreNFC.NFCNdefReaderSession,CoreNFC.NFCNdefMessage[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCNdefReaderSessionDelegateRx.DidDetectTags(CoreNFC.NFCNdefReaderSession,CoreNFC.INFCNdefTag[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCNdefReaderSessionDelegateRx.DidInvalidate(CoreNFC.NFCNdefReaderSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreNFC.NFCReaderSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreNFC.NFCReaderSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCReaderSessionDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCReaderSessionDelegate.DidBecomeActive(CoreNFC.NFCReaderSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCReaderSessionDelegateRx.DidDetectTagsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCReaderSessionDelegate.DidDetectTags(CoreNFC.NFCReaderSession,CoreNFC.INFCTag[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCReaderSessionDelegateRx.DidInvalidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCReaderSessionDelegate.DidInvalidate(CoreNFC.NFCReaderSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreNFC.NFCReaderSessionDelegateRx.DidBecomeActive(CoreNFC.NFCReaderSession)">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCReaderSessionDelegateRx.DidDetectTags(CoreNFC.NFCReaderSession,CoreNFC.INFCTag[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCReaderSessionDelegateRx.DidInvalidate(CoreNFC.NFCReaderSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreNFC.NFCTagReaderSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreNFC.NFCTagReaderSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCTagReaderSessionDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCTagReaderSessionDelegate.DidBecomeActive(CoreNFC.NFCTagReaderSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCTagReaderSessionDelegateRx.DidDetectTagsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCTagReaderSessionDelegate.DidDetectTags(CoreNFC.NFCTagReaderSession,CoreNFC.INFCTag[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCTagReaderSessionDelegateRx.DidInvalidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCTagReaderSessionDelegate.DidInvalidate(CoreNFC.NFCTagReaderSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreNFC.NFCTagReaderSessionDelegateRx.DidBecomeActive(CoreNFC.NFCTagReaderSession)">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCTagReaderSessionDelegateRx.DidDetectTags(CoreNFC.NFCTagReaderSession,CoreNFC.INFCTag[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCTagReaderSessionDelegateRx.DidInvalidate(CoreNFC.NFCTagReaderSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreNFC.NFCVasReaderSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreNFC.NFCVasReaderSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCVasReaderSessionDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCVasReaderSessionDelegate.DidBecomeActive(CoreNFC.NFCVasReaderSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCVasReaderSessionDelegateRx.DidInvalidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCVasReaderSessionDelegate.DidInvalidate(CoreNFC.NFCVasReaderSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreNFC.NFCVasReaderSessionDelegateRx.DidReceiveVasResponsesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreNFC.NFCVasReaderSessionDelegate.DidReceiveVasResponses(CoreNFC.NFCVasReaderSession,CoreNFC.NFCVasResponse[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreNFC.NFCVasReaderSessionDelegateRx.DidBecomeActive(CoreNFC.NFCVasReaderSession)">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCVasReaderSessionDelegateRx.DidInvalidate(CoreNFC.NFCVasReaderSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreNFC.NFCVasReaderSessionDelegateRx.DidReceiveVasResponses(CoreNFC.NFCVasReaderSession,CoreNFC.NFCVasResponse[])">
            <inheritdoc/>
        </member>
        <member name="T:CoreSpotlight.CSSearchableIndexDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreSpotlight.CSSearchableIndexDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.DidFinishThrottleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.DidFinishThrottle(CoreSpotlight.CSSearchableIndex)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.DidThrottleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.DidThrottle(CoreSpotlight.CSSearchableIndex)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexAllSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.DidFinishThrottle(CoreSpotlight.CSSearchableIndex)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.DidThrottle(CoreSpotlight.CSSearchableIndex)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:CoreTelephony.CTTelephonyNetworkInfoDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreTelephony.CTTelephonyNetworkInfoDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreTelephony.CTTelephonyNetworkInfoDelegateRx.DataServiceIdentifierDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreTelephony.CTTelephonyNetworkInfoDelegate.DataServiceIdentifierDidChange(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreTelephony.CTTelephonyNetworkInfoDelegateRx.DataServiceIdentifierDidChange(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GameplayKit.GKAgentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameplayKit.GKAgentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentDidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentDidUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentWillUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentWillUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentDidUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentWillUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="T:IntentsUI.INUIAddVoiceShortcutButtonDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:IntentsUI.INUIAddVoiceShortcutButtonDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIAddVoiceShortcutButtonDelegateRx.PresentAddVoiceShortcutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIAddVoiceShortcutButtonDelegate.PresentAddVoiceShortcut(IntentsUI.INUIAddVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)"/> method is invoked.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIAddVoiceShortcutButtonDelegateRx.PresentEditVoiceShortcutObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIAddVoiceShortcutButtonDelegate.PresentEditVoiceShortcut(IntentsUI.INUIEditVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)"/> method is invoked.
            </summary>
        </member>
        <member name="M:IntentsUI.INUIAddVoiceShortcutButtonDelegateRx.PresentAddVoiceShortcut(IntentsUI.INUIAddVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)">
            <inheritdoc/>
        </member>
        <member name="M:IntentsUI.INUIAddVoiceShortcutButtonDelegateRx.PresentEditVoiceShortcut(IntentsUI.INUIEditVoiceShortcutViewController,IntentsUI.INUIAddVoiceShortcutButton)">
            <inheritdoc/>
        </member>
        <member name="T:IntentsUI.INUIAddVoiceShortcutViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:IntentsUI.INUIAddVoiceShortcutViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIAddVoiceShortcutViewControllerDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIAddVoiceShortcutViewControllerDelegate.DidCancel(IntentsUI.INUIAddVoiceShortcutViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIAddVoiceShortcutViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIAddVoiceShortcutViewControllerDelegate.DidFinish(IntentsUI.INUIAddVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:IntentsUI.INUIAddVoiceShortcutViewControllerDelegateRx.DidCancel(IntentsUI.INUIAddVoiceShortcutViewController)">
            <inheritdoc/>
        </member>
        <member name="M:IntentsUI.INUIAddVoiceShortcutViewControllerDelegateRx.DidFinish(IntentsUI.INUIAddVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:IntentsUI.INUIEditVoiceShortcutViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidCancel(IntentsUI.INUIEditVoiceShortcutViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidDeleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidDelete(IntentsUI.INUIEditVoiceShortcutViewController,Foundation.NSUuid)"/> method is invoked.
            </summary>
        </member>
        <member name="P:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegate.DidUpdate(IntentsUI.INUIEditVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidCancel(IntentsUI.INUIEditVoiceShortcutViewController)">
            <inheritdoc/>
        </member>
        <member name="M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidDelete(IntentsUI.INUIEditVoiceShortcutViewController,Foundation.NSUuid)">
            <inheritdoc/>
        </member>
        <member name="M:IntentsUI.INUIEditVoiceShortcutViewControllerDelegateRx.DidUpdate(IntentsUI.INUIEditVoiceShortcutViewController,Intents.INVoiceShortcut,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:MetalKit.MTKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MetalKit.MTKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.Draw(MetalKit.MTKView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawableSizeWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.Draw(MetalKit.MTKView)">
            <inheritdoc/>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCBrowserViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinish(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelled(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidChangeStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)">
            <inheritdoc/>
        </member>
        <member name="T:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:NetworkExtension.NWTcpConnectionAuthenticationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.EvaluateTrustObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrust(NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action{Security.SecTrust})"/> method is invoked.
            </summary>
        </member>
        <member name="P:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.ProvideIdentityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.ProvideIdentity(NetworkExtension.NWTcpConnection,System.Action{Security.SecIdentity,Foundation.NSArray})"/> method is invoked.
            </summary>
        </member>
        <member name="M:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.EvaluateTrust(NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action{Security.SecTrust})">
            <inheritdoc/>
        </member>
        <member name="M:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.ProvideIdentity(NetworkExtension.NWTcpConnection,System.Action{Security.SecIdentity,Foundation.NSArray})">
            <inheritdoc/>
        </member>
        <member name="T:PencilKit.PKCanvasViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PencilKit.PKCanvasViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DecelerationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DecelerationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DecelerationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DecelerationStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DidBeginUsingToolObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DidBeginUsingTool(PencilKit.PKCanvasView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DidChangeAdjustedContentInsetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DidChangeAdjustedContentInset(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DidFinishRenderingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DidFinishRendering(PencilKit.PKCanvasView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DidZoomObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DidZoom(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DraggingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DraggingEnded(UIKit.UIScrollView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DraggingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DraggingStarted(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.DrawingDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.DrawingDidChange(PencilKit.PKCanvasView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.EndUsingToolObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.EndUsingTool(PencilKit.PKCanvasView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.ScrollAnimationEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.ScrollAnimationEnded(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.ScrolledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.Scrolled(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.ScrolledToTopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.ScrolledToTop(UIKit.UIScrollView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.ZoomingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PencilKit.PKCanvasViewDelegateRx.ZoomingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PencilKit.PKCanvasViewDelegate.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DecelerationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DecelerationStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DidBeginUsingTool(PencilKit.PKCanvasView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DidChangeAdjustedContentInset(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DidFinishRendering(PencilKit.PKCanvasView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DidZoom(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DraggingEnded(UIKit.UIScrollView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DraggingStarted(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.DrawingDidChange(PencilKit.PKCanvasView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.EndUsingTool(PencilKit.PKCanvasView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.ScrollAnimationEnded(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.Scrolled(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.ScrolledToTop(UIKit.UIScrollView)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)">
            <inheritdoc/>
        </member>
        <member name="M:PencilKit.PKCanvasViewDelegateRx.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)">
            <inheritdoc/>
        </member>
        <member name="T:PhotosUI.PHLivePhotoViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="T:PushKit.PKPushRegistryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PushKit.PKPushRegistryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidInvalidatePushTokenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidInvalidatePushToken(PushKit.PKPushRegistry,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidReceiveIncomingPushObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidReceiveIncomingPush(PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidUpdatePushCredentialsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidUpdatePushCredentials(PushKit.PKPushRegistry,PushKit.PKPushCredentials,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidInvalidatePushToken(PushKit.PKPushRegistry,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidReceiveIncomingPush(PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidUpdatePushCredentials(PushKit.PKPushRegistry,PushKit.PKPushCredentials,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPBroadcastActivityViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPBroadcastActivityViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastActivityViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastActivityViewControllerDelegate.DidFinish(ReplayKit.RPBroadcastActivityViewController,ReplayKit.RPBroadcastController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPBroadcastActivityViewControllerDelegateRx.DidFinish(ReplayKit.RPBroadcastActivityViewController,ReplayKit.RPBroadcastController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPBroadcastControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPBroadcastControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidFinish(ReplayKit.RPBroadcastController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateBroadcastUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidUpdateBroadcastUrl(ReplayKit.RPBroadcastController,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateServiceInfoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPBroadcastControllerDelegate.DidUpdateServiceInfo(ReplayKit.RPBroadcastController,Foundation.NSDictionary{Foundation.NSString,Foundation.INSCoding})"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidFinish(ReplayKit.RPBroadcastController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateBroadcastUrl(ReplayKit.RPBroadcastController,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPBroadcastControllerDelegateRx.DidUpdateServiceInfo(ReplayKit.RPBroadcastController,Foundation.NSDictionary{Foundation.NSString,Foundation.INSCoding})">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPPreviewViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPPreviewViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPPreviewViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPPreviewViewControllerDelegate.DidFinish(ReplayKit.RPPreviewViewController,Foundation.NSSet{Foundation.NSString})"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPPreviewViewControllerDelegateRx.DidFinish(ReplayKit.RPPreviewViewController,Foundation.NSSet{Foundation.NSString})">
            <inheritdoc/>
        </member>
        <member name="T:ReplayKit.RPScreenRecorderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ReplayKit.RPScreenRecorderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ReplayKit.RPScreenRecorderDelegateRx.DidChangeAvailabilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPScreenRecorderDelegate.DidChangeAvailability(ReplayKit.RPScreenRecorder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ReplayKit.RPScreenRecorderDelegateRx.DidStopRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ReplayKit.RPScreenRecorderDelegate.DidStopRecording(ReplayKit.RPScreenRecorder,Foundation.NSError,ReplayKit.RPPreviewViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ReplayKit.RPScreenRecorderDelegateRx.DidChangeAvailability(ReplayKit.RPScreenRecorder)">
            <inheritdoc/>
        </member>
        <member name="M:ReplayKit.RPScreenRecorderDelegateRx.DidStopRecording(ReplayKit.RPScreenRecorder,Foundation.NSError,ReplayKit.RPPreviewViewController)">
            <inheritdoc/>
        </member>
        <member name="T:SafariServices.SFSafariViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SafariServices.SFSafariViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SafariServices.SFSafariViewControllerDelegateRx.DidCompleteInitialLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SafariServices.SFSafariViewControllerDelegate.DidCompleteInitialLoad(SafariServices.SFSafariViewController,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SafariServices.SFSafariViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SafariServices.SFSafariViewControllerDelegate.DidFinish(SafariServices.SFSafariViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SafariServices.SFSafariViewControllerDelegateRx.InitialLoadDidRedirectToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SafariServices.SFSafariViewControllerDelegate.InitialLoadDidRedirectToUrl(SafariServices.SFSafariViewController,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SafariServices.SFSafariViewControllerDelegateRx.DidCompleteInitialLoad(SafariServices.SFSafariViewController,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SafariServices.SFSafariViewControllerDelegateRx.DidFinish(SafariServices.SFSafariViewController)">
            <inheritdoc/>
        </member>
        <member name="M:SafariServices.SFSafariViewControllerDelegateRx.InitialLoadDidRedirectToUrl(SafariServices.SFSafariViewController,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="T:Speech.SFSpeechRecognitionTaskDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Speech.SFSpeechRecognitionTaskDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidDetectSpeechObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidDetectSpeech(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishRecognitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidFinishRecognition(Speech.SFSpeechRecognitionTask,Speech.SFSpeechRecognitionResult)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishSuccessfullyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidFinishSuccessfully(Speech.SFSpeechRecognitionTask,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidHypothesizeTranscriptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidHypothesizeTranscription(Speech.SFSpeechRecognitionTask,Speech.SFTranscription)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.FinishedReadingAudioObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.FinishedReadingAudio(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.WasCancelled(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidDetectSpeech(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishRecognition(Speech.SFSpeechRecognitionTask,Speech.SFSpeechRecognitionResult)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishSuccessfully(Speech.SFSpeechRecognitionTask,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidHypothesizeTranscription(Speech.SFSpeechRecognitionTask,Speech.SFTranscription)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.FinishedReadingAudio(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.WasCancelled(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="T:Speech.SFSpeechRecognizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Speech.SFSpeechRecognizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognizerDelegateRx.AvailabilityDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognizerDelegate.AvailabilityDidChange(Speech.SFSpeechRecognizer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Speech.SFSpeechRecognizerDelegateRx.AvailabilityDidChange(Speech.SFSpeechRecognizer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UserNotifications.UNUserNotificationCenterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.DidReceiveNotificationResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.DidReceiveNotificationResponse(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotificationResponse,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.OpenSettingsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.OpenSettings(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})"/> method is invoked.
            </summary>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.DidReceiveNotificationResponse(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotificationResponse,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.OpenSettings(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification)">
            <inheritdoc/>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})">
            <inheritdoc/>
        </member>
        <member name="T:VideoSubscriberAccount.VSAccountManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewController(VideoSubscriberAccount.VSAccountManager,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="T:VisionKit.VNDocumentCameraViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:VisionKit.VNDocumentCameraViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VisionKit.VNDocumentCameraViewControllerDelegate.DidCancel(VisionKit.VNDocumentCameraViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VisionKit.VNDocumentCameraViewControllerDelegate.DidFail(VisionKit.VNDocumentCameraViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VisionKit.VNDocumentCameraViewControllerDelegate.DidFinish(VisionKit.VNDocumentCameraViewController,VisionKit.VNDocumentCameraScan)"/> method is invoked.
            </summary>
        </member>
        <member name="M:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidCancel(VisionKit.VNDocumentCameraViewController)">
            <inheritdoc/>
        </member>
        <member name="M:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidFail(VisionKit.VNDocumentCameraViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:VisionKit.VNDocumentCameraViewControllerDelegateRx.DidFinish(VisionKit.VNDocumentCameraViewController,VisionKit.VNDocumentCameraScan)">
            <inheritdoc/>
        </member>
        <member name="T:WatchConnectivity.WCSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WatchConnectivity.WCSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.ActivationDidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.ActivationDidComplete(WatchConnectivity.WCSession,WatchConnectivity.WCSessionActivationState,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidBecomeInactiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidBecomeInactive(WatchConnectivity.WCSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidDeactivateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidDeactivate(WatchConnectivity.WCSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidFinishFileTransferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidFinishFileTransfer(WatchConnectivity.WCSession,WatchConnectivity.WCSessionFileTransfer,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidFinishUserInfoTransferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidFinishUserInfoTransfer(WatchConnectivity.WCSession,WatchConnectivity.WCSessionUserInfoTransfer,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidReceiveApplicationContextObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidReceiveApplicationContext(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidReceiveFileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidReceiveFile(WatchConnectivity.WCSession,WatchConnectivity.WCSessionFile)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidReceiveMessageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidReceiveMessage(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},WatchConnectivity.WCSessionReplyHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidReceiveMessageDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidReceiveMessageData(WatchConnectivity.WCSession,Foundation.NSData,WatchConnectivity.WCSessionReplyDataHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.DidReceiveUserInfoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.DidReceiveUserInfo(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.SessionReachabilityDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.SessionReachabilityDidChange(WatchConnectivity.WCSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WatchConnectivity.WCSessionDelegateRx.SessionWatchStateDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WatchConnectivity.WCSessionDelegate.SessionWatchStateDidChange(WatchConnectivity.WCSession)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.ActivationDidComplete(WatchConnectivity.WCSession,WatchConnectivity.WCSessionActivationState,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidBecomeInactive(WatchConnectivity.WCSession)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidDeactivate(WatchConnectivity.WCSession)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidFinishFileTransfer(WatchConnectivity.WCSession,WatchConnectivity.WCSessionFileTransfer,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidFinishUserInfoTransfer(WatchConnectivity.WCSession,WatchConnectivity.WCSessionUserInfoTransfer,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidReceiveApplicationContext(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidReceiveFile(WatchConnectivity.WCSession,WatchConnectivity.WCSessionFile)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidReceiveMessage(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},WatchConnectivity.WCSessionReplyHandler)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidReceiveMessageData(WatchConnectivity.WCSession,Foundation.NSData,WatchConnectivity.WCSessionReplyDataHandler)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.DidReceiveUserInfo(WatchConnectivity.WCSession,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.SessionReachabilityDidChange(WatchConnectivity.WCSession)">
            <inheritdoc/>
        </member>
        <member name="M:WatchConnectivity.WCSessionDelegateRx.SessionWatchStateDidChange(WatchConnectivity.WCSession)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WKNavigationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WKNavigationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.ContentProcessDidTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.ContentProcessDidTerminate(WebKit.WKWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DecidePolicyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKWebpagePreferences,System.Action{WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidCommitNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidCommitNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFailNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFailNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFailProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFailProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFinishNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFinishNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidReceiveAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidReceiveAuthenticationChallenge(WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidReceiveServerRedirectForProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidStartProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidStartProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.ContentProcessDidTerminate(WebKit.WKWebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKWebpagePreferences,System.Action{WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidCommitNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFailNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFailProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFinishNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidReceiveAuthenticationChallenge(WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidReceiveServerRedirectForProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidStartProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WKUIDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WKUIDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.CommitPreviewingViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.CommitPreviewingViewController(WebKit.WKWebView,UIKit.UIViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.ContextMenuDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.ContextMenuDidEnd(WebKit.WKWebView,WebKit.WKContextMenuElementInfo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.ContextMenuWillPresentObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.ContextMenuWillPresent(WebKit.WKWebView,WebKit.WKContextMenuElementInfo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.DidClose(WebKit.WKWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptAlertPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptAlertPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptConfirmPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptConfirmPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptTextInputPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptTextInputPanel(WebKit.WKWebView,System.String,System.String,WebKit.WKFrameInfo,System.Action{System.String})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.SetContextMenuConfigurationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.SetContextMenuConfiguration(WebKit.WKWebView,WebKit.WKContextMenuElementInfo,System.Action{UIKit.UIContextMenuConfiguration})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.WillCommitContextMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.WillCommitContextMenu(WebKit.WKWebView,WebKit.WKContextMenuElementInfo,UIKit.IUIContextMenuInteractionCommitAnimating)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.CommitPreviewingViewController(WebKit.WKWebView,UIKit.UIViewController)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.ContextMenuDidEnd(WebKit.WKWebView,WebKit.WKContextMenuElementInfo)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.ContextMenuWillPresent(WebKit.WKWebView,WebKit.WKContextMenuElementInfo)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.DidClose(WebKit.WKWebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptAlertPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptConfirmPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptTextInputPanel(WebKit.WKWebView,System.String,System.String,WebKit.WKFrameInfo,System.Action{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.SetContextMenuConfiguration(WebKit.WKWebView,WebKit.WKContextMenuElementInfo,System.Action{UIKit.UIContextMenuConfiguration})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.WillCommitContextMenu(WebKit.WKWebView,WebKit.WKContextMenuElementInfo,UIKit.IUIContextMenuInteractionCommitAnimating)">
            <inheritdoc/>
        </member>
    </members>
</doc>
