<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReactiveUI.Events</name>
    </assembly>
    <members>
        <member name="T:AppKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AppKit"/> namespace.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSActionCell)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSActionCell"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSAnimation)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSAnimation"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSApplication)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSApplication"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSBrowser"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSColorPickerTouchBarItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSColorPickerTouchBarItem"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSComboBox)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSComboBox"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSControl)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSControl"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSDatePicker)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSDatePicker"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSDatePickerCell)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSDatePickerCell"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSDrawer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSDrawer"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSImage)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSImage"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSMatrix)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSMatrix"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSMenuItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSMenuItem"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSPageController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSPageController"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSPathCell)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSPathCell"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSPathControl)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSPathControl"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSRuleEditor)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSRuleEditor"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSavePanel)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSavePanel"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSearchField)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSearchField"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSharingService)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSharingService"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSharingServicePicker)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSharingServicePicker"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSliderTouchBarItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSliderTouchBarItem"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSSound)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSSound"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSStatusItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSStatusItem"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSTableView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSTableView"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSTabView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSTabView"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSText)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSText"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSTextField)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSTextField"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSTextStorage)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSTextStorage"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSTextView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSTextView"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSToolbar)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSToolbar"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSToolbarItem)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSToolbarItem"/> class.
            </summary>
        </member>
        <member name="M:AppKit.EventExtensions.Events(AppKit.NSWindow)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AppKit.NSWindow"/> class.
            </summary>
        </member>
        <member name="T:AppKit.NSActionCellEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSActionCell"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSActionCellEvents.#ctor(AppKit.NSActionCell)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSActionCell"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSActionCellEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSActionCell.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSAnimationEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSAnimation"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSAnimationEvents.#ctor(AppKit.NSAnimation)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSAnimation"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSAnimationEvents.AnimationDidEnd">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSAnimation.AnimationDidEnd"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSAnimationEvents.AnimationDidReachProgressMark">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSAnimation.AnimationDidReachProgressMark"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSAnimationEvents.AnimationDidStop">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSAnimation.AnimationDidStop"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSApplicationEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSApplication"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSApplicationEvents.#ctor(AppKit.NSApplication)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSApplication"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DecodedRestorableState">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DecodedRestorableState"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidBecomeActive">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidBecomeActive"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidFinishLaunching">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidFinishLaunching"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidHide">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidHide"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidResignActive">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidResignActive"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidUnhide">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidUnhide"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.DidUpdate">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.DidUpdate"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.FailedToContinueUserActivity">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.FailedToContinueUserActivity"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.FailedToRegisterForRemoteNotifications">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.FailedToRegisterForRemoteNotifications"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.OpenFiles">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.OpenFiles"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.OpenUrls">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.OpenUrls"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.OrderFrontStandardAboutPanel">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.OrderFrontStandardAboutPanel"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.OrderFrontStandardAboutPanelWithOptions">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.OrderFrontStandardAboutPanelWithOptions"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.ReceivedRemoteNotification">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.ReceivedRemoteNotification"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.RegisteredForRemoteNotifications">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.RegisteredForRemoteNotifications"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.RegisterServicesMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.RegisterServicesMenu"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.ScreenParametersChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.ScreenParametersChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.UpdatedUserActivity">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.UpdatedUserActivity"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.UserDidAcceptCloudKitShare">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.UserDidAcceptCloudKitShare"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillBecomeActive">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillBecomeActive"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillEncodeRestorableState">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillEncodeRestorableState"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillFinishLaunching">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillFinishLaunching"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillHide">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillHide"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillResignActive">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillResignActive"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillTerminate">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillTerminate"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillUnhide">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillUnhide"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationEvents.WillUpdate">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSApplication.WillUpdate"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSBrowserEvents.#ctor(AppKit.NSBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSBrowserEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSBrowser.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSColorPickerTouchBarItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSColorPickerTouchBarItem"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSColorPickerTouchBarItemEvents.#ctor(AppKit.NSColorPickerTouchBarItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSColorPickerTouchBarItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSColorPickerTouchBarItemEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSColorPickerTouchBarItem.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSComboBoxEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSComboBox"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSComboBoxEvents.#ctor(AppKit.NSComboBox)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSComboBox"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSComboBoxEvents.SelectionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSComboBox.SelectionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxEvents.SelectionIsChanging">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSComboBox.SelectionIsChanging"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxEvents.WillDismiss">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSComboBox.WillDismiss"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxEvents.WillPopUp">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSComboBox.WillPopUp"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSControlEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSControl"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSControlEvents.#ctor(AppKit.NSControl)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSControl"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSControlEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSControl.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSDatePickerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSDatePicker"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSDatePickerEvents.#ctor(AppKit.NSDatePicker)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSDatePicker"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSDatePickerEvents.ValidateProposedDateValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDatePicker.ValidateProposedDateValue"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSDatePickerCellEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSDatePickerCell"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSDatePickerCellEvents.#ctor(AppKit.NSDatePickerCell)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSDatePickerCell"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSDatePickerCellEvents.ValidateProposedDateValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDatePickerCell.ValidateProposedDateValue"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSDrawerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSDrawer"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSDrawerEvents.#ctor(AppKit.NSDrawer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSDrawer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSDrawerEvents.DrawerDidClose">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDrawer.DrawerDidClose"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerEvents.DrawerDidOpen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDrawer.DrawerDidOpen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerEvents.DrawerWillClose">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDrawer.DrawerWillClose"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerEvents.DrawerWillOpen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSDrawer.DrawerWillOpen"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSImageEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSImage"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSImageEvents.#ctor(AppKit.NSImage)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSImage"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSImageEvents.DidLoadPartOfRepresentation">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSImage.DidLoadPartOfRepresentation"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSImageEvents.DidLoadRepresentation">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSImage.DidLoadRepresentation"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSImageEvents.DidLoadRepresentationHeader">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSImage.DidLoadRepresentationHeader"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSImageEvents.WillLoadRepresentation">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSImage.WillLoadRepresentation"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSMatrixEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSMatrix"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSMatrixEvents.#ctor(AppKit.NSMatrix)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSMatrix"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSMatrixEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSMatrix.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSMenuItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSMenuItem"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSMenuItemEvents.#ctor(AppKit.NSMenuItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSMenuItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSMenuItemEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSMenuItem.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSPageControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSPageController"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSPageControllerEvents.#ctor(AppKit.NSPageController)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSPageController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSPageControllerEvents.DidEndLiveTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPageController.DidEndLiveTransition"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerEvents.DidTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPageController.DidTransition"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerEvents.PrepareViewController">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPageController.PrepareViewController"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerEvents.WillStartLiveTransition">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPageController.WillStartLiveTransition"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSPathCellEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSPathCell"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSPathCellEvents.#ctor(AppKit.NSPathCell)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSPathCell"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSPathCellEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPathCell.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSPathCellEvents.WillDisplayOpenPanel">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPathCell.WillDisplayOpenPanel"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSPathCellEvents.WillPopupMenu">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPathCell.WillPopupMenu"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSPathControlEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSPathControl"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSPathControlEvents.#ctor(AppKit.NSPathControl)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSPathControl"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSPathControlEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSPathControl.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSRuleEditorEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSRuleEditor"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSRuleEditorEvents.#ctor(AppKit.NSRuleEditor)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSRuleEditor"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSRuleEditorEvents.Changed">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSRuleEditor.Changed"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorEvents.EditingBegan">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSRuleEditor.EditingBegan"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorEvents.EditingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSRuleEditor.EditingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorEvents.RowsDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSRuleEditor.RowsDidChange"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSavePanelEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSavePanel"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSavePanelEvents.#ctor(AppKit.NSSavePanel)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSavePanel"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSavePanelEvents.DidChangeToDirectory">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSavePanel.DidChangeToDirectory"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSavePanelEvents.DirectoryDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSavePanel.DirectoryDidChange"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSavePanelEvents.SelectionDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSavePanel.SelectionDidChange"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSavePanelEvents.WillExpand">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSavePanel.WillExpand"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSearchFieldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSearchField"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSearchFieldEvents.#ctor(AppKit.NSSearchField)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSearchField"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSearchFieldEvents.SearchingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSearchField.SearchingEnded"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldEvents.SearchingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSearchField.SearchingStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSharingServiceEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSharingService"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSharingServiceEvents.#ctor(AppKit.NSSharingService)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSharingService"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSharingServiceEvents.DidFailToShareItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSharingService.DidFailToShareItems"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServiceEvents.DidShareItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSharingService.DidShareItems"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServiceEvents.WillShareItems">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSharingService.WillShareItems"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSharingServicePickerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSharingServicePicker"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSharingServicePickerEvents.#ctor(AppKit.NSSharingServicePicker)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSharingServicePicker"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSharingServicePickerEvents.DidChooseSharingService">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSharingServicePicker.DidChooseSharingService"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSliderTouchBarItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSliderTouchBarItem"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSliderTouchBarItemEvents.#ctor(AppKit.NSSliderTouchBarItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSliderTouchBarItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSliderTouchBarItemEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSliderTouchBarItem.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSSoundEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSSound"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSSoundEvents.#ctor(AppKit.NSSound)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSSound"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSSoundEvents.DidFinishPlaying">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSSound.DidFinishPlaying"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSStatusItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSStatusItem"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSStatusItemEvents.#ctor(AppKit.NSStatusItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSStatusItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSStatusItemEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSStatusItem.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTableViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSTableView"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTableViewEvents.#ctor(AppKit.NSTableView)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSTableView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTableViewEvents.ColumnDidMove">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.ColumnDidMove"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.ColumnDidResize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.ColumnDidResize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.DidAddRowView">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.DidAddRowView"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.DidClickTableColumn">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.DidClickTableColumn"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.DidDragTableColumn">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.DidDragTableColumn"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.DidRemoveRowView">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.DidRemoveRowView"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.DoubleClick">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.DoubleClick"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.MouseDownInHeaderOfTableColumn">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.MouseDownInHeaderOfTableColumn"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.SelectionDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.SelectionDidChange"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.SelectionIsChanging">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.SelectionIsChanging"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewEvents.WillDisplayCell">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTableView.WillDisplayCell"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTabViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSTabView"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTabViewEvents.#ctor(AppKit.NSTabView)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSTabView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTabViewEvents.DidSelect">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTabView.DidSelect"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTabViewEvents.NumberOfItemsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTabView.NumberOfItemsChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTabViewEvents.WillSelect">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTabView.WillSelect"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTextEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSText"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTextEvents.#ctor(AppKit.NSText)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSText"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTextEvents.TextDidBeginEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSText.TextDidBeginEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextEvents.TextDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSText.TextDidChange"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextEvents.TextDidEndEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSText.TextDidEndEditing"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTextFieldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSTextField"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTextFieldEvents.#ctor(AppKit.NSTextField)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSTextField"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTextFieldEvents.Changed">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextField.Changed"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldEvents.DidFailToValidatePartialString">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextField.DidFailToValidatePartialString"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldEvents.EditingBegan">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextField.EditingBegan"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldEvents.EditingEnded">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextField.EditingEnded"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTextStorageEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSTextStorage"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTextStorageEvents.#ctor(AppKit.NSTextStorage)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSTextStorage"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTextStorageEvents.DidProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextStorage.DidProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageEvents.TextStorageDidProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextStorage.TextStorageDidProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageEvents.TextStorageWillProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextStorage.TextStorageWillProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageEvents.WillProcessEditing">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextStorage.WillProcessEditing"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSTextViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSTextView"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSTextViewEvents.#ctor(AppKit.NSTextView)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSTextView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSTextViewEvents.CellClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextView.CellClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewEvents.CellDoubleClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextView.CellDoubleClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewEvents.DidChangeSelection">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextView.DidChangeSelection"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewEvents.DidChangeTypingAttributes">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextView.DidChangeTypingAttributes"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewEvents.DraggedCell">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSTextView.DraggedCell"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSToolbarEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSToolbar"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSToolbarEvents.#ctor(AppKit.NSToolbar)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSToolbar"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSToolbarEvents.DidRemoveItem">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSToolbar.DidRemoveItem"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSToolbarEvents.WillAddItem">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSToolbar.WillAddItem"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSToolbarItemEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSToolbarItem"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSToolbarItemEvents.#ctor(AppKit.NSToolbarItem)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSToolbarItem"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSToolbarItemEvents.Activated">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSToolbarItem.Activated"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSWindowEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AppKit.NSWindow"/> class as observables.
            </summary>
        </member>
        <member name="M:AppKit.NSWindowEvents.#ctor(AppKit.NSWindow)">
            <summary>
            Initializes a new instance of the <see cref = "T:AppKit.NSWindow"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidBecomeKey">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidBecomeKey"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidBecomeMain">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidBecomeMain"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidChangeBackingProperties">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidChangeBackingProperties"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidChangeScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidChangeScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidChangeScreenProfile">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidChangeScreenProfile"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidDecodeRestorableState">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidDecodeRestorableState"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidDeminiaturize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidDeminiaturize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidEndLiveResize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidEndLiveResize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidEndSheet">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidEndSheet"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidEnterFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidEnterFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidEnterVersionBrowser">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidEnterVersionBrowser"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidExitFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidExitFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidExitVersionBrowser">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidExitVersionBrowser"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidExpose">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidExpose"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidFailToEnterFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidFailToEnterFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidFailToExitFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidFailToExitFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidMiniaturize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidMiniaturize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidMove">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidMove"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidResignKey">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidResignKey"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidResignMain">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidResignMain"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidResize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidResize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.DidUpdate">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.DidUpdate"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.StartCustomAnimationToEnterFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.StartCustomAnimationToEnterFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.StartCustomAnimationToExitFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.StartCustomAnimationToExitFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillBeginSheet">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillBeginSheet"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillClose">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillClose"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillEncodeRestorableState">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillEncodeRestorableState"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillEnterFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillEnterFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillEnterVersionBrowser">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillEnterVersionBrowser"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillExitFullScreen">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillExitFullScreen"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillExitVersionBrowser">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillExitVersionBrowser"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillMiniaturize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillMiniaturize"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillMove">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillMove"/> event triggers.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowEvents.WillStartLiveResize">
            <summary>
            Gets an observable which signals when the <see cref = "E:AppKit.NSWindow.WillStartLiveResize"/> event triggers.
            </summary>
        </member>
        <member name="T:AppKit.NSAnimationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSAnimationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSAnimationDelegateRx.AnimationDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSAnimationDelegate.AnimationDidEnd(AppKit.NSAnimation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSAnimationDelegateRx.AnimationDidReachProgressMarkObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSAnimationDelegate.AnimationDidReachProgressMark(AppKit.NSAnimation,System.Single)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSAnimationDelegateRx.AnimationDidStopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSAnimationDelegate.AnimationDidStop(AppKit.NSAnimation)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSAnimationDelegateRx.AnimationDidEnd(AppKit.NSAnimation)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSAnimationDelegateRx.AnimationDidReachProgressMark(AppKit.NSAnimation,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSAnimationDelegateRx.AnimationDidStop(AppKit.NSAnimation)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSApplicationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSApplicationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DecodedRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DecodedRestorableState(AppKit.NSApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidBecomeActive(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidFinishLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidFinishLaunching(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidHideObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidHide(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidResignActive(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidUnhideObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidUnhide(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.DidUpdate(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.FailedToContinueUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.FailedToContinueUserActivity(AppKit.NSApplication,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.FailedToRegisterForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.FailedToRegisterForRemoteNotifications(AppKit.NSApplication,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.OpenFilesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.OpenFiles(AppKit.NSApplication,System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.OpenUrlsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.OpenUrls(AppKit.NSApplication,Foundation.NSUrl[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.OrderFrontStandardAboutPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.OrderFrontStandardAboutPanel(Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.OrderFrontStandardAboutPanelWithOptionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.OrderFrontStandardAboutPanelWithOptions(Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.ReceivedRemoteNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.ReceivedRemoteNotification(AppKit.NSApplication,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.RegisteredForRemoteNotificationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.RegisteredForRemoteNotifications(AppKit.NSApplication,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.RegisterServicesMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.RegisterServicesMenu(System.String[],System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.ScreenParametersChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.ScreenParametersChanged(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.UpdatedUserActivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.UpdatedUserActivity(AppKit.NSApplication,Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.UserDidAcceptCloudKitShareObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.UserDidAcceptCloudKitShare(AppKit.NSApplication,CloudKit.CKShareMetadata)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillBecomeActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillBecomeActive(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillEncodeRestorableState(AppKit.NSApplication,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillFinishLaunchingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillFinishLaunching(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillHideObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillHide(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillResignActiveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillResignActive(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillTerminate(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillUnhideObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillUnhide(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSApplicationDelegateRx.WillUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSApplicationDelegate.WillUpdate(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DecodedRestorableState(AppKit.NSApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidBecomeActive(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidFinishLaunching(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidHide(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidResignActive(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidUnhide(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.DidUpdate(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.FailedToContinueUserActivity(AppKit.NSApplication,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.FailedToRegisterForRemoteNotifications(AppKit.NSApplication,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.OpenFiles(AppKit.NSApplication,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.OpenUrls(AppKit.NSApplication,Foundation.NSUrl[])">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.OrderFrontStandardAboutPanel(Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.OrderFrontStandardAboutPanelWithOptions(Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.ReceivedRemoteNotification(AppKit.NSApplication,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.RegisteredForRemoteNotifications(AppKit.NSApplication,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.RegisterServicesMenu(System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.ScreenParametersChanged(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.UpdatedUserActivity(AppKit.NSApplication,Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.UserDidAcceptCloudKitShare(AppKit.NSApplication,CloudKit.CKShareMetadata)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillBecomeActive(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillEncodeRestorableState(AppKit.NSApplication,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillFinishLaunching(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillHide(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillResignActive(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillTerminate(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillUnhide(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSApplicationDelegateRx.WillUpdate(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.ColumnConfigurationDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.ColumnConfigurationDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.CreateRowsForColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.CreateRowsForColumn(AppKit.NSBrowser,System.nint,AppKit.NSMatrix)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.DidChangeLastColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.DidChangeLastColumn(AppKit.NSBrowser,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.DidScrollObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.DidScroll(AppKit.NSBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.SetObjectValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.SetObjectValue(AppKit.NSBrowser,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.WillDisplayCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.WillDisplayCell(AppKit.NSBrowser,Foundation.NSObject,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSBrowserDelegateRx.WillScrollObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSBrowserDelegate.WillScroll(AppKit.NSBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.ColumnConfigurationDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.CreateRowsForColumn(AppKit.NSBrowser,System.nint,AppKit.NSMatrix)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.DidChangeLastColumn(AppKit.NSBrowser,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.DidScroll(AppKit.NSBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.SetObjectValue(AppKit.NSBrowser,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.WillDisplayCell(AppKit.NSBrowser,Foundation.NSObject,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSBrowserDelegateRx.WillScroll(AppKit.NSBrowser)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSCandidateListTouchBarItemDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSCandidateListTouchBarItemDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSCandidateListTouchBarItemDelegateRx.BeginSelectingCandidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCandidateListTouchBarItemDelegate.BeginSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCandidateListTouchBarItemDelegateRx.ChangedCandidateListVisibilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCandidateListTouchBarItemDelegate.ChangedCandidateListVisibility(AppKit.NSCandidateListTouchBarItem,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCandidateListTouchBarItemDelegateRx.ChangeSelectionFromCandidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCandidateListTouchBarItemDelegate.ChangeSelectionFromCandidate(AppKit.NSCandidateListTouchBarItem,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCandidateListTouchBarItemDelegateRx.EndSelectingCandidateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCandidateListTouchBarItemDelegate.EndSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSCandidateListTouchBarItemDelegateRx.BeginSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCandidateListTouchBarItemDelegateRx.ChangedCandidateListVisibility(AppKit.NSCandidateListTouchBarItem,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCandidateListTouchBarItemDelegateRx.ChangeSelectionFromCandidate(AppKit.NSCandidateListTouchBarItem,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCandidateListTouchBarItemDelegateRx.EndSelectingCandidate(AppKit.NSCandidateListTouchBarItem,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSCloudSharingServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSCloudSharingServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSCloudSharingServiceDelegateRx.CompletedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCloudSharingServiceDelegate.Completed(AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCloudSharingServiceDelegateRx.SavedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCloudSharingServiceDelegate.Saved(AppKit.NSSharingService,CloudKit.CKShare)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCloudSharingServiceDelegateRx.StoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCloudSharingServiceDelegate.Stopped(AppKit.NSSharingService,CloudKit.CKShare)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSCloudSharingServiceDelegateRx.Completed(AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCloudSharingServiceDelegateRx.Saved(AppKit.NSSharingService,CloudKit.CKShare)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCloudSharingServiceDelegateRx.Stopped(AppKit.NSSharingService,CloudKit.CKShare)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSCollectionViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSCollectionViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.DisplayingItemEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.DisplayingItemEnded(AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.DisplayingSupplementaryViewEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.DisplayingSupplementaryViewEnded(AppKit.NSCollectionView,AppKit.NSView,System.String,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.DraggingSessionEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.DraggingSessionEnded(AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.DraggingSessionWillBeginObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.DraggingSessionWillBegin(AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.ItemsChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.ItemsChanged(AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSCollectionViewItemHighlightState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.ItemsDeselectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.ItemsDeselected(AppKit.NSCollectionView,Foundation.NSSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.ItemsSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.ItemsSelected(AppKit.NSCollectionView,Foundation.NSSet)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.UpdateDraggingItemsForDragObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.UpdateDraggingItemsForDrag(AppKit.NSCollectionView,AppKit.NSDraggingInfo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.WillDisplayItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.WillDisplayItem(AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSCollectionViewDelegateRx.WillDisplaySupplementaryViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSCollectionViewDelegate.WillDisplaySupplementaryView(AppKit.NSCollectionView,AppKit.NSView,Foundation.NSString,Foundation.NSIndexPath)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.DisplayingItemEnded(AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.DisplayingSupplementaryViewEnded(AppKit.NSCollectionView,AppKit.NSView,System.String,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.DraggingSessionEnded(AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,AppKit.NSDragOperation)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.DraggingSessionWillBegin(AppKit.NSCollectionView,AppKit.NSDraggingSession,CoreGraphics.CGPoint,Foundation.NSSet)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.ItemsChanged(AppKit.NSCollectionView,Foundation.NSSet,AppKit.NSCollectionViewItemHighlightState)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.ItemsDeselected(AppKit.NSCollectionView,Foundation.NSSet)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.ItemsSelected(AppKit.NSCollectionView,Foundation.NSSet)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.UpdateDraggingItemsForDrag(AppKit.NSCollectionView,AppKit.NSDraggingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.WillDisplayItem(AppKit.NSCollectionView,AppKit.NSCollectionViewItem,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSCollectionViewDelegateRx.WillDisplaySupplementaryView(AppKit.NSCollectionView,AppKit.NSView,Foundation.NSString,Foundation.NSIndexPath)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSComboBoxDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSComboBoxDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxDelegateRx.SelectionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSComboBoxDelegate.SelectionChanged(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxDelegateRx.SelectionIsChangingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSComboBoxDelegate.SelectionIsChanging(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxDelegateRx.WillDismissObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSComboBoxDelegate.WillDismiss(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSComboBoxDelegateRx.WillPopUpObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSComboBoxDelegate.WillPopUp(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSComboBoxDelegateRx.SelectionChanged(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSComboBoxDelegateRx.SelectionIsChanging(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSComboBoxDelegateRx.WillDismiss(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSComboBoxDelegateRx.WillPopUp(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSControlTextEditingDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSControlTextEditingDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSControlTextEditingDelegateRx.ControlTextDidBeginEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSControlTextEditingDelegate.ControlTextDidBeginEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSControlTextEditingDelegateRx.ControlTextDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSControlTextEditingDelegate.ControlTextDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSControlTextEditingDelegateRx.ControlTextDidEndEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSControlTextEditingDelegate.ControlTextDidEndEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSControlTextEditingDelegateRx.DidFailToValidatePartialStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSControlTextEditingDelegate.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSControlTextEditingDelegateRx.ControlTextDidBeginEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSControlTextEditingDelegateRx.ControlTextDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSControlTextEditingDelegateRx.ControlTextDidEndEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSControlTextEditingDelegateRx.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSDrawerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSDrawerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerDelegateRx.DrawerDidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSDrawerDelegate.DrawerDidClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerDelegateRx.DrawerDidOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSDrawerDelegate.DrawerDidOpen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerDelegateRx.DrawerWillCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSDrawerDelegate.DrawerWillClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSDrawerDelegateRx.DrawerWillOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSDrawerDelegate.DrawerWillOpen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSDrawerDelegateRx.DrawerDidClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSDrawerDelegateRx.DrawerDidOpen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSDrawerDelegateRx.DrawerWillClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSDrawerDelegateRx.DrawerWillOpen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSFilePromiseProviderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSFilePromiseProviderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSFilePromiseProviderDelegateRx.WritePromiseToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSFilePromiseProviderDelegate.WritePromiseToUrl(AppKit.NSFilePromiseProvider,Foundation.NSUrl,System.Action{Foundation.NSError})"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSFilePromiseProviderDelegateRx.WritePromiseToUrl(AppKit.NSFilePromiseProvider,Foundation.NSUrl,System.Action{Foundation.NSError})">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSImageDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSImageDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSImageDelegateRx.DidLoadPartOfRepresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSImageDelegate.DidLoadPartOfRepresentation(AppKit.NSImage,AppKit.NSImageRep,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSImageDelegateRx.DidLoadRepresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSImageDelegate.DidLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep,AppKit.NSImageLoadStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSImageDelegateRx.DidLoadRepresentationHeaderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSImageDelegate.DidLoadRepresentationHeader(AppKit.NSImage,AppKit.NSImageRep)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSImageDelegateRx.WillLoadRepresentationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSImageDelegate.WillLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSImageDelegateRx.DidLoadPartOfRepresentation(AppKit.NSImage,AppKit.NSImageRep,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSImageDelegateRx.DidLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep,AppKit.NSImageLoadStatus)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSImageDelegateRx.DidLoadRepresentationHeader(AppKit.NSImage,AppKit.NSImageRep)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSImageDelegateRx.WillLoadRepresentation(AppKit.NSImage,AppKit.NSImageRep)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSLayoutManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSLayoutManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSLayoutManagerDelegateRx.DidChangeGeometryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSLayoutManagerDelegate.DidChangeGeometry(AppKit.NSLayoutManager,AppKit.NSTextContainer,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSLayoutManagerDelegateRx.LayoutCompletedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSLayoutManagerDelegate.LayoutCompleted(AppKit.NSLayoutManager,AppKit.NSTextContainer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSLayoutManagerDelegateRx.LayoutInvalidatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSLayoutManagerDelegate.LayoutInvalidated(AppKit.NSLayoutManager)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSLayoutManagerDelegateRx.DidChangeGeometry(AppKit.NSLayoutManager,AppKit.NSTextContainer,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSLayoutManagerDelegateRx.LayoutCompleted(AppKit.NSLayoutManager,AppKit.NSTextContainer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSLayoutManagerDelegateRx.LayoutInvalidated(AppKit.NSLayoutManager)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSMatrixDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSMatrixDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSMatrixDelegateRx.ControlTextDidBeginEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMatrixDelegate.ControlTextDidBeginEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMatrixDelegateRx.ControlTextDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMatrixDelegate.ControlTextDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMatrixDelegateRx.ControlTextDidEndEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMatrixDelegate.ControlTextDidEndEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMatrixDelegateRx.DidFailToValidatePartialStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMatrixDelegate.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSMatrixDelegateRx.ControlTextDidBeginEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMatrixDelegateRx.ControlTextDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMatrixDelegateRx.ControlTextDidEndEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMatrixDelegateRx.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSMenuDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSMenuDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSMenuDelegateRx.MenuDidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMenuDelegate.MenuDidClose(AppKit.NSMenu)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMenuDelegateRx.MenuWillHighlightItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMenuDelegate.MenuWillHighlightItem(AppKit.NSMenu,AppKit.NSMenuItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMenuDelegateRx.MenuWillOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMenuDelegate.MenuWillOpen(AppKit.NSMenu)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSMenuDelegateRx.NeedsUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSMenuDelegate.NeedsUpdate(AppKit.NSMenu)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSMenuDelegateRx.MenuDidClose(AppKit.NSMenu)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMenuDelegateRx.MenuWillHighlightItem(AppKit.NSMenu,AppKit.NSMenuItem)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMenuDelegateRx.MenuWillOpen(AppKit.NSMenu)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSMenuDelegateRx.NeedsUpdate(AppKit.NSMenu)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSOpenSavePanelDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSOpenSavePanelDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSOpenSavePanelDelegateRx.DidChangeToDirectoryObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOpenSavePanelDelegate.DidChangeToDirectory(AppKit.NSSavePanel,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOpenSavePanelDelegateRx.DirectoryDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOpenSavePanelDelegate.DirectoryDidChange(AppKit.NSSavePanel,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOpenSavePanelDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOpenSavePanelDelegate.SelectionDidChange(AppKit.NSSavePanel)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOpenSavePanelDelegateRx.WillExpandObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOpenSavePanelDelegate.WillExpand(AppKit.NSSavePanel,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSOpenSavePanelDelegateRx.DidChangeToDirectory(AppKit.NSSavePanel,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOpenSavePanelDelegateRx.DirectoryDidChange(AppKit.NSSavePanel,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOpenSavePanelDelegateRx.SelectionDidChange(AppKit.NSSavePanel)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOpenSavePanelDelegateRx.WillExpand(AppKit.NSSavePanel,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSOutlineViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSOutlineViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ColumnDidMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ColumnDidMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ColumnDidResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ColumnDidResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.DidAddRowViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.DidAddRowView(AppKit.NSOutlineView,AppKit.NSTableRowView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.DidClickTableColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.DidClickTableColumn(AppKit.NSOutlineView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.DidDragTableColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.DidDragTableColumn(AppKit.NSOutlineView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.DidRemoveRowViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.DidRemoveRowView(AppKit.NSOutlineView,AppKit.NSTableRowView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ItemDidCollapseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ItemDidCollapse(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ItemDidExpandObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ItemDidExpand(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ItemWillCollapseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ItemWillCollapse(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.ItemWillExpandObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.ItemWillExpand(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.MouseDownObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.MouseDown(AppKit.NSOutlineView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.SelectionDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.SelectionIsChangingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.SelectionIsChanging(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.WillDisplayCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.WillDisplayCell(AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSOutlineViewDelegateRx.WillDisplayOutlineCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSOutlineViewDelegate.WillDisplayOutlineCell(AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ColumnDidMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ColumnDidResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.DidAddRowView(AppKit.NSOutlineView,AppKit.NSTableRowView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.DidClickTableColumn(AppKit.NSOutlineView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.DidDragTableColumn(AppKit.NSOutlineView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.DidRemoveRowView(AppKit.NSOutlineView,AppKit.NSTableRowView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ItemDidCollapse(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ItemDidExpand(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ItemWillCollapse(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.ItemWillExpand(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.MouseDown(AppKit.NSOutlineView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.SelectionDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.SelectionIsChanging(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.WillDisplayCell(AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSOutlineViewDelegateRx.WillDisplayOutlineCell(AppKit.NSOutlineView,Foundation.NSObject,AppKit.NSTableColumn,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSPageControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSPageControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerDelegateRx.DidEndLiveTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPageControllerDelegate.DidEndLiveTransition(AppKit.NSPageController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerDelegateRx.DidTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPageControllerDelegate.DidTransition(AppKit.NSPageController,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerDelegateRx.PrepareViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPageControllerDelegate.PrepareViewController(AppKit.NSPageController,AppKit.NSViewController,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPageControllerDelegateRx.WillStartLiveTransitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPageControllerDelegate.WillStartLiveTransition(AppKit.NSPageController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSPageControllerDelegateRx.DidEndLiveTransition(AppKit.NSPageController)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPageControllerDelegateRx.DidTransition(AppKit.NSPageController,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPageControllerDelegateRx.PrepareViewController(AppKit.NSPageController,AppKit.NSViewController,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPageControllerDelegateRx.WillStartLiveTransition(AppKit.NSPageController)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSPathCellDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSPathCellDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSPathCellDelegateRx.WillDisplayOpenPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPathCellDelegate.WillDisplayOpenPanel(AppKit.NSPathCell,AppKit.NSOpenPanel)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPathCellDelegateRx.WillPopupMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPathCellDelegate.WillPopupMenu(AppKit.NSPathCell,AppKit.NSMenu)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSPathCellDelegateRx.WillDisplayOpenPanel(AppKit.NSPathCell,AppKit.NSOpenPanel)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPathCellDelegateRx.WillPopupMenu(AppKit.NSPathCell,AppKit.NSMenu)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSPathControlDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSPathControlDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSPathControlDelegateRx.WillDisplayOpenPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPathControlDelegate.WillDisplayOpenPanel(AppKit.NSPathControl,AppKit.NSOpenPanel)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPathControlDelegateRx.WillPopUpMenuObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPathControlDelegate.WillPopUpMenu(AppKit.NSPathControl,AppKit.NSMenu)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSPathControlDelegateRx.WillDisplayOpenPanel(AppKit.NSPathControl,AppKit.NSOpenPanel)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPathControlDelegateRx.WillPopUpMenu(AppKit.NSPathControl,AppKit.NSMenu)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSPopoverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSPopoverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSPopoverDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPopoverDelegate.DidClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPopoverDelegateRx.DidDetachObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPopoverDelegate.DidDetach(AppKit.NSPopover)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPopoverDelegateRx.DidShowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPopoverDelegate.DidShow(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPopoverDelegateRx.WillCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPopoverDelegate.WillClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSPopoverDelegateRx.WillShowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSPopoverDelegate.WillShow(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSPopoverDelegateRx.DidClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPopoverDelegateRx.DidDetach(AppKit.NSPopover)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPopoverDelegateRx.DidShow(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPopoverDelegateRx.WillClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSPopoverDelegateRx.WillShow(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSRuleEditorDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSRuleEditorDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorDelegateRx.ChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSRuleEditorDelegate.Changed(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorDelegateRx.EditingBeganObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSRuleEditorDelegate.EditingBegan(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSRuleEditorDelegate.EditingEnded(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSRuleEditorDelegateRx.RowsDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSRuleEditorDelegate.RowsDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSRuleEditorDelegateRx.Changed(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSRuleEditorDelegateRx.EditingBegan(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSRuleEditorDelegateRx.EditingEnded(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSRuleEditorDelegateRx.RowsDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSScrubberDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSScrubberDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidBeginInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidBeginInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidCancelInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidCancelInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidChangeVisibleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidChangeVisible(AppKit.NSScrubber,Foundation.NSRange)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidFinishInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidFinishInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidHighlightItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidHighlightItem(AppKit.NSScrubber,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberDelegateRx.DidSelectItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberDelegate.DidSelectItem(AppKit.NSScrubber,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidBeginInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidCancelInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidChangeVisible(AppKit.NSScrubber,Foundation.NSRange)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidFinishInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidHighlightItem(AppKit.NSScrubber,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberDelegateRx.DidSelectItem(AppKit.NSScrubber,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSScrubberFlowLayoutDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSScrubberFlowLayoutDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidBeginInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidBeginInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidCancelInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidCancelInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidChangeVisibleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidChangeVisible(AppKit.NSScrubber,Foundation.NSRange)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidFinishInteractingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidFinishInteracting(AppKit.NSScrubber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidHighlightItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidHighlightItem(AppKit.NSScrubber,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSScrubberFlowLayoutDelegateRx.DidSelectItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSScrubberFlowLayoutDelegate.DidSelectItem(AppKit.NSScrubber,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidBeginInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidCancelInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidChangeVisible(AppKit.NSScrubber,Foundation.NSRange)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidFinishInteracting(AppKit.NSScrubber)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidHighlightItem(AppKit.NSScrubber,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSScrubberFlowLayoutDelegateRx.DidSelectItem(AppKit.NSScrubber,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSearchFieldDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSearchFieldDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.ChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.Changed(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.DidFailToValidatePartialStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.EditingBeganObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.EditingBegan(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.EditingEnded(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.SearchingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.SearchingEnded(AppKit.NSSearchField)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSearchFieldDelegateRx.SearchingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSearchFieldDelegate.SearchingStarted(AppKit.NSSearchField)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.Changed(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.EditingBegan(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.EditingEnded(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.SearchingEnded(AppKit.NSSearchField)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSearchFieldDelegateRx.SearchingStarted(AppKit.NSSearchField)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSharingServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSharingServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServiceDelegateRx.DidFailToShareItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSharingServiceDelegate.DidFailToShareItems(AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServiceDelegateRx.DidShareItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSharingServiceDelegate.DidShareItems(AppKit.NSSharingService,Foundation.NSObject[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServiceDelegateRx.WillShareItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSharingServiceDelegate.WillShareItems(AppKit.NSSharingService,Foundation.NSObject[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSharingServiceDelegateRx.DidFailToShareItems(AppKit.NSSharingService,Foundation.NSObject[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSharingServiceDelegateRx.DidShareItems(AppKit.NSSharingService,Foundation.NSObject[])">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSharingServiceDelegateRx.WillShareItems(AppKit.NSSharingService,Foundation.NSObject[])">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSharingServicePickerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSharingServicePickerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServicePickerDelegateRx.DidChooseSharingServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSharingServicePickerDelegate.DidChooseSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSharingServicePickerDelegateRx.DidChooseSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSharingServicePickerTouchBarItemDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSharingServicePickerTouchBarItemDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSharingServicePickerTouchBarItemDelegateRx.DidChooseSharingServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSharingServicePickerTouchBarItemDelegate.DidChooseSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSharingServicePickerTouchBarItemDelegateRx.DidChooseSharingService(AppKit.NSSharingServicePicker,AppKit.NSSharingService)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSoundDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSoundDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSoundDelegateRx.DidFinishPlayingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSoundDelegate.DidFinishPlaying(AppKit.NSSound,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSoundDelegateRx.DidFinishPlaying(AppKit.NSSound,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSpeechRecognizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSpeechRecognizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechRecognizerDelegateRx.DidRecognizeCommandObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechRecognizerDelegate.DidRecognizeCommand(AppKit.NSSpeechRecognizer,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSpeechRecognizerDelegateRx.DidRecognizeCommand(AppKit.NSSpeechRecognizer,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSpeechSynthesizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSpeechSynthesizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechSynthesizerDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechSynthesizerDelegate.DidEncounterError(AppKit.NSSpeechSynthesizer,System.nuint,System.String,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechSynthesizerDelegateRx.DidEncounterSyncMessageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechSynthesizerDelegate.DidEncounterSyncMessage(AppKit.NSSpeechSynthesizer,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechSynthesizerDelegateRx.DidFinishSpeakingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechSynthesizerDelegate.DidFinishSpeaking(AppKit.NSSpeechSynthesizer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechSynthesizerDelegateRx.WillSpeakPhonemeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechSynthesizerDelegate.WillSpeakPhoneme(AppKit.NSSpeechSynthesizer,System.Int16)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSpeechSynthesizerDelegateRx.WillSpeakWordObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSpeechSynthesizerDelegate.WillSpeakWord(AppKit.NSSpeechSynthesizer,Foundation.NSRange,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSpeechSynthesizerDelegateRx.DidEncounterError(AppKit.NSSpeechSynthesizer,System.nuint,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSpeechSynthesizerDelegateRx.DidEncounterSyncMessage(AppKit.NSSpeechSynthesizer,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSpeechSynthesizerDelegateRx.DidFinishSpeaking(AppKit.NSSpeechSynthesizer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSpeechSynthesizerDelegateRx.WillSpeakPhoneme(AppKit.NSSpeechSynthesizer,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSpeechSynthesizerDelegateRx.WillSpeakWord(AppKit.NSSpeechSynthesizer,Foundation.NSRange,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSSplitViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSSplitViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSSplitViewDelegateRx.DidResizeSubviewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSplitViewDelegate.DidResizeSubviews(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSplitViewDelegateRx.ResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSplitViewDelegate.Resize(AppKit.NSSplitView,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSSplitViewDelegateRx.SplitViewWillResizeSubviewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSSplitViewDelegate.SplitViewWillResizeSubviews(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSSplitViewDelegateRx.DidResizeSubviews(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSplitViewDelegateRx.Resize(AppKit.NSSplitView,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSSplitViewDelegateRx.SplitViewWillResizeSubviews(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSStackViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSStackViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSStackViewDelegateRx.DidReattachViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSStackViewDelegate.DidReattachViews(AppKit.NSStackView,AppKit.NSView[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSStackViewDelegateRx.WillDetachViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSStackViewDelegate.WillDetachViews(AppKit.NSStackView,AppKit.NSView[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSStackViewDelegateRx.DidReattachViews(AppKit.NSStackView,AppKit.NSView[])">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSStackViewDelegateRx.WillDetachViews(AppKit.NSStackView,AppKit.NSView[])">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTableViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTableViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.ColumnDidMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.ColumnDidMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.ColumnDidResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.ColumnDidResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.DidAddRowViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.DidAddRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.DidClickTableColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.DidClickTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.DidDragTableColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.DidDragTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.DidRemoveRowViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.DidRemoveRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.MouseDownInHeaderOfTableColumnObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.MouseDownInHeaderOfTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.SelectionDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.SelectionIsChangingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.SelectionIsChanging(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTableViewDelegateRx.WillDisplayCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTableViewDelegate.WillDisplayCell(AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.ColumnDidMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.ColumnDidResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.DidAddRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.DidClickTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.DidDragTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.DidRemoveRowView(AppKit.NSTableView,AppKit.NSTableRowView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.MouseDownInHeaderOfTableColumn(AppKit.NSTableView,AppKit.NSTableColumn)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.SelectionDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.SelectionIsChanging(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTableViewDelegateRx.WillDisplayCell(AppKit.NSTableView,Foundation.NSObject,AppKit.NSTableColumn,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTabViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTabViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTabViewDelegateRx.DidSelectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTabViewDelegate.DidSelect(AppKit.NSTabView,AppKit.NSTabViewItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTabViewDelegateRx.NumberOfItemsChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTabViewDelegate.NumberOfItemsChanged(AppKit.NSTabView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTabViewDelegateRx.WillSelectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTabViewDelegate.WillSelect(AppKit.NSTabView,AppKit.NSTabViewItem)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTabViewDelegateRx.DidSelect(AppKit.NSTabView,AppKit.NSTabViewItem)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTabViewDelegateRx.NumberOfItemsChanged(AppKit.NSTabView)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTabViewDelegateRx.WillSelect(AppKit.NSTabView,AppKit.NSTabViewItem)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTextDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTextDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTextDelegateRx.TextDidBeginEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextDelegate.TextDidBeginEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextDelegateRx.TextDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextDelegate.TextDidChange(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextDelegateRx.TextDidEndEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextDelegate.TextDidEndEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTextDelegateRx.TextDidBeginEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextDelegateRx.TextDidChange(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextDelegateRx.TextDidEndEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTextFieldDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTextFieldDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldDelegateRx.ChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextFieldDelegate.Changed(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldDelegateRx.DidFailToValidatePartialStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextFieldDelegate.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldDelegateRx.EditingBeganObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextFieldDelegate.EditingBegan(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextFieldDelegateRx.EditingEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextFieldDelegate.EditingEnded(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTextFieldDelegateRx.Changed(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextFieldDelegateRx.DidFailToValidatePartialString(AppKit.NSControl,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextFieldDelegateRx.EditingBegan(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextFieldDelegateRx.EditingEnded(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTextStorageDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTextStorageDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageDelegateRx.DidProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextStorageDelegate.DidProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageDelegateRx.TextStorageDidProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextStorageDelegate.TextStorageDidProcessEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageDelegateRx.TextStorageWillProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextStorageDelegate.TextStorageWillProcessEditing(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextStorageDelegateRx.WillProcessEditingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextStorageDelegate.WillProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTextStorageDelegateRx.DidProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextStorageDelegateRx.TextStorageDidProcessEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextStorageDelegateRx.TextStorageWillProcessEditing(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextStorageDelegateRx.WillProcessEditing(AppKit.NSTextStorage,AppKit.NSTextStorageEditActions,Foundation.NSRange,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSTextViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSTextViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewDelegateRx.CellClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextViewDelegate.CellClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewDelegateRx.CellDoubleClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextViewDelegate.CellDoubleClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewDelegateRx.DidChangeSelectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextViewDelegate.DidChangeSelection(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewDelegateRx.DidChangeTypingAttributesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextViewDelegate.DidChangeTypingAttributes(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSTextViewDelegateRx.DraggedCellObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSTextViewDelegate.DraggedCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,AppKit.NSEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSTextViewDelegateRx.CellClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextViewDelegateRx.CellDoubleClicked(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextViewDelegateRx.DidChangeSelection(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextViewDelegateRx.DidChangeTypingAttributes(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSTextViewDelegateRx.DraggedCell(AppKit.NSTextView,AppKit.NSTextAttachmentCell,CoreGraphics.CGRect,AppKit.NSEvent)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSToolbarDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSToolbarDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSToolbarDelegateRx.DidRemoveItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSToolbarDelegate.DidRemoveItem(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSToolbarDelegateRx.WillAddItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSToolbarDelegate.WillAddItem(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSToolbarDelegateRx.DidRemoveItem(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSToolbarDelegateRx.WillAddItem(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AppKit.NSWindowDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AppKit.NSWindowDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidBecomeKeyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidBecomeKey(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidBecomeMainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidBecomeMain(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidChangeBackingPropertiesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidChangeBackingProperties(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidChangeScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidChangeScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidChangeScreenProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidChangeScreenProfile(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidDecodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidDecodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidDeminiaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidDeminiaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidEndLiveResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidEndLiveResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidEndSheetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidEndSheet(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidEnterFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidEnterVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidEnterVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidExitFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidExitVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidExitVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidExposeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidExpose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidFailToEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidFailToEnterFullScreen(AppKit.NSWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidFailToExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidFailToExitFullScreen(AppKit.NSWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidMiniaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidMiniaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidResignKeyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidResignKey(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidResignMainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidResignMain(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.DidUpdate(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.StartCustomAnimationToEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.StartCustomAnimationToEnterFullScreen(AppKit.NSWindow,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.StartCustomAnimationToExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.StartCustomAnimationToExitFullScreen(AppKit.NSWindow,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillBeginSheetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillBeginSheet(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillEncodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillEnterFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillEnterVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillEnterVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillExitFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillExitVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillExitVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillMiniaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillMiniaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AppKit.NSWindowDelegateRx.WillStartLiveResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AppKit.NSWindowDelegate.WillStartLiveResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidBecomeKey(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidBecomeMain(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidChangeBackingProperties(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidChangeScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidChangeScreenProfile(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidDecodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidDeminiaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidEndLiveResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidEndSheet(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidEnterFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidEnterVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidExitFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidExitVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidExpose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidFailToEnterFullScreen(AppKit.NSWindow)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidFailToExitFullScreen(AppKit.NSWindow)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidMiniaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidResignKey(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidResignMain(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.DidUpdate(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.StartCustomAnimationToEnterFullScreen(AppKit.NSWindow,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.StartCustomAnimationToExitFullScreen(AppKit.NSWindow,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillBeginSheet(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillEncodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillEnterFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillEnterVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillExitFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillExitVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillMiniaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:AppKit.NSWindowDelegateRx.WillStartLiveResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:AudioToolbox.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AudioToolbox"/> namespace.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.InputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
        </member>
        <member name="M:AudioToolbox.EventExtensions.Events(AudioToolbox.OutputAudioQueue)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
        </member>
        <member name="T:AudioToolbox.InputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.InputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.InputAudioQueueEvents.#ctor(AudioToolbox.InputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.InputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.InputAudioQueueEvents.InputCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.InputAudioQueue.InputCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AudioToolbox.OutputAudioQueueEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class as observables.
            </summary>
        </member>
        <member name="M:AudioToolbox.OutputAudioQueueEvents.#ctor(AudioToolbox.OutputAudioQueue)">
            <summary>
            Initializes a new instance of the <see cref = "T:AudioToolbox.OutputAudioQueue"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AudioToolbox.OutputAudioQueueEvents.BufferCompleted">
            <summary>
            Gets an observable which signals when the <see cref = "E:AudioToolbox.OutputAudioQueue.BufferCompleted"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:AVFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioPlayer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVAudioRecorder)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVAudioRecorder"/> class.
            </summary>
        </member>
        <member name="M:AVFoundation.EventExtensions.Events(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioPlayer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerEvents.#ctor(AVFoundation.AVAudioPlayer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioPlayer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.DecoderError">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.DecoderError"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerEvents.FinishedPlaying">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioPlayer.FinishedPlaying"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAudioRecorderEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVAudioRecorder"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderEvents.#ctor(AVFoundation.AVAudioRecorder)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVAudioRecorder"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.BeginInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.BeginInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.EncoderError">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.EncoderError"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.EndInterruption">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.EndInterruption"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderEvents.FinishedRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVAudioRecorder.FinishedRecording"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class as observables.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerEvents.#ctor(AVFoundation.AVSpeechSynthesizer)">
            <summary>
            Initializes a new instance of the <see cref = "T:AVFoundation.AVSpeechSynthesizer"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidCancelSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidCancelSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidContinueSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidContinueSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidFinishSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidFinishSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidPauseSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidPauseSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.DidStartSpeechUtterance">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.DidStartSpeechUtterance"/> event triggers.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerEvents.WillSpeakRangeOfSpeechString">
            <summary>
            Gets an observable which signals when the <see cref = "E:AVFoundation.AVSpeechSynthesizer.WillSpeakRangeOfSpeechString"/> event triggers.
            </summary>
        </member>
        <member name="T:AVFoundation.AVAssetResourceLoaderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAssetResourceLoaderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAssetResourceLoaderDelegate.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelAuthenticationChallenge(AVFoundation.AVAssetResourceLoader,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAssetResourceLoaderDelegateRx.DidCancelLoadingRequest(AVFoundation.AVAssetResourceLoader,AVFoundation.AVAssetResourceLoadingRequest)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioPlayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioPlayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.DecoderErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlayingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioPlayerDelegate.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.DecoderError(AVFoundation.AVAudioPlayer,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioPlayerDelegateRx.FinishedPlaying(AVFoundation.AVAudioPlayer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVAudioRecorderDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVAudioRecorderDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.EncoderErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.EncoderError(AVFoundation.AVAudioRecorder,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVAudioRecorderDelegateRx.FinishedRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVAudioRecorderDelegate.FinishedRecording(AVFoundation.AVAudioRecorder,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.EncoderError(AVFoundation.AVAudioRecorder,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVAudioRecorderDelegateRx.FinishedRecording(AVFoundation.AVAudioRecorder,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidDropSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegateRx.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="P:AVFoundation.AVCaptureDataOutputSynchronizerDelegateRx.DidOutputSynchronizedDataCollectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureDataOutputSynchronizerDelegate.DidOutputSynchronizedDataCollection(AVFoundation.AVCaptureDataOutputSynchronizer,AVFoundation.AVCaptureSynchronizedDataCollection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureDataOutputSynchronizerDelegateRx.DidOutputSynchronizedDataCollection(AVFoundation.AVCaptureDataOutputSynchronizer,AVFoundation.AVCaptureSynchronizedDataCollection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureFileOutputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureFileOutputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputDelegateRx.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureFileOutputRecordingDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureFileOutputRecordingDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidPauseRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.DidPauseRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidResumeRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.DidResumeRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidStartRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.DidStartRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.FinishedRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.WillFinishRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureFileOutputRecordingDelegate.WillFinishRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidPauseRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidResumeRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.DidStartRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[])">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.FinishedRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,Foundation.NSObject[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureFileOutputRecordingDelegateRx.WillFinishRecording(AVFoundation.AVCaptureFileOutput,Foundation.NSUrl,AVFoundation.AVCaptureConnection[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCapturePhotoCaptureDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCapturePhotoCaptureDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidCapturePhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishCaptureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingPhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.DidFinishProcessingPhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCapturePhoto,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillBeginCaptureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.WillBeginCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillCapturePhotoObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCapturePhotoCaptureDelegate.WillCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.DidFinishProcessingPhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCapturePhoto,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillBeginCapture(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCapturePhotoCaptureDelegateRx.WillCapturePhoto(AVFoundation.AVCapturePhotoOutput,AVFoundation.AVCaptureResolvedPhotoSettings)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidDropSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidDropSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegateRx.DidOutputSampleBuffer(AVFoundation.AVCaptureOutput,CoreMedia.CMSampleBuffer,AVFoundation.AVCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVContentKeySessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVContentKeySessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidChange(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReportObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidSucceedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVContentKeySessionDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVContentKeySessionDelegate.DidUpdate(AVFoundation.AVContentKeySession,Foundation.NSData,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidChange(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidFail(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidGenerateExpiredSessionReport(AVFoundation.AVContentKeySession)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvidePersistableContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVPersistableContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidProvideRenewingContentKeyRequest(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidSucceed(AVFoundation.AVContentKeySession,AVFoundation.AVContentKeyRequest)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVContentKeySessionDelegateRx.DidUpdate(AVFoundation.AVContentKeySession,Foundation.NSData,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegate.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataCollectorPushDelegateRx.DidCollectDateRange(AVFoundation.AVPlayerItemMetadataCollector,AVFoundation.AVDateRangeMetadataGroup[],Foundation.NSIndexSet,Foundation.NSIndexSet)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemMetadataOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroupsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemMetadataOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.DidOutputTimedMetadataGroups(AVFoundation.AVPlayerItemMetadataOutput,AVFoundation.AVTimedMetadataGroup[],AVFoundation.AVPlayerItemTrack)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemMetadataOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPullDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPullDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPullDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputMediaDataWillChange(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPullDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVPlayerItemOutputPushDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVPlayerItemOutputPushDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVPlayerItemOutputPushDelegate.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVPlayerItemOutputPushDelegateRx.OutputSequenceWasFlushed(AVFoundation.AVPlayerItemOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVFoundation.AVSpeechSynthesizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVFoundation.AVSpeechSynthesizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtteranceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVFoundation.AVSpeechSynthesizerDelegate.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidCancelSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidContinueSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidFinishSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidPauseSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.DidStartSpeechUtterance(AVFoundation.AVSpeechSynthesizer,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="M:AVFoundation.AVSpeechSynthesizerDelegateRx.WillSpeakRangeOfSpeechString(AVFoundation.AVSpeechSynthesizer,Foundation.NSRange,AVFoundation.AVSpeechUtterance)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreAnimation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreAnimation.EventExtensions.Events(CoreAnimation.CAAnimation)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreAnimation.CAAnimation"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationEvents.#ctor(CoreAnimation.CAAnimation)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreAnimation.CAAnimation"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationEvents.AnimationStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreAnimation.CAAnimation.AnimationStopped"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreAnimation.CAAnimationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CAAnimationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStarted(CoreAnimation.CAAnimation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CAAnimationDelegateRx.AnimationStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CAAnimationDelegate.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStarted(CoreAnimation.CAAnimation)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CAAnimationDelegateRx.AnimationStopped(CoreAnimation.CAAnimation,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:CoreAnimation.CALayerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreAnimation.CALayerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DisplayLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DisplayLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.DrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.LayoutSublayersOfLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreAnimation.CALayerDelegateRx.WillDrawLayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreAnimation.CALayerDelegate.WillDrawLayer(CoreAnimation.CALayer)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DisplayLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.LayoutSublayersOfLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="M:CoreAnimation.CALayerDelegateRx.WillDrawLayer(CoreAnimation.CALayer)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreBluetooth"/> namespace.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBCentralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheral)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
        </member>
        <member name="M:CoreBluetooth.EventExtensions.Events(CoreBluetooth.CBPeripheralManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBCentralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerEvents.#ctor(CoreBluetooth.CBCentralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBCentralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.ConnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.ConnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DisconnectedPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DisconnectedPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.DiscoveredPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.DiscoveredPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.FailedToConnectPeripheral">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.FailedToConnectPeripheral"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.RetrievedConnectedPeripherals">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.RetrievedConnectedPeripherals"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.RetrievedPeripherals">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.RetrievedPeripherals"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.UpdatedState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.UpdatedState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBCentralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheral"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralEvents.#ctor(CoreBluetooth.CBPeripheral)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheral"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredCharacteristic">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredCharacteristic"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredDescriptor">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredDescriptor"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredIncludedService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredIncludedService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.DiscoveredService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.DiscoveredService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.InvalidatedService">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.InvalidatedService"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.IsReadyToSendWriteWithoutResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.IsReadyToSendWriteWithoutResponse"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.ModifiedServices">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.ModifiedServices"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiRead">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiRead"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.RssiUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.RssiUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedCharacterteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedCharacterteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedName">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedName"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedNotificationState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedNotificationState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.UpdatedValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.UpdatedValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteCharacteristicValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteCharacteristicValue"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralEvents.WroteDescriptorValue">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheral.WroteDescriptorValue"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerEvents.#ctor(CoreBluetooth.CBPeripheralManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreBluetooth.CBPeripheralManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.AdvertisingStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.AdvertisingStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicSubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicSubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.CharacteristicUnsubscribed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.CharacteristicUnsubscribed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidOpenL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidOpenL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidPublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidPublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.DidUnpublishL2CapChannel">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.DidUnpublishL2CapChannel"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadRequestReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadRequestReceived"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ReadyToUpdateSubscribers">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ReadyToUpdateSubscribers"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.ServiceAdded">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.ServiceAdded"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.StateUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.StateUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WillRestoreState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WillRestoreState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerEvents.WriteRequestsReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreBluetooth.CBPeripheralManager.WriteRequestsReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreBluetooth.CBCentralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBCentralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheralObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedConnectedPeripheralsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.RetrievedConnectedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedPeripheralsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.RetrievedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.UpdatedState(CoreBluetooth.CBCentralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBCentralManagerDelegate.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.ConnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DisconnectedPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.DiscoveredPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSDictionary,Foundation.NSNumber)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.FailedToConnectPeripheral(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedConnectedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.RetrievedPeripherals(CoreBluetooth.CBCentralManager,CoreBluetooth.CBPeripheral[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.UpdatedState(CoreBluetooth.CBCentralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBCentralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBCentralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristicObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.InvalidatedServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.InvalidatedService(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiReadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedName(CoreBluetooth.CBPeripheral)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralDelegate.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheral,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredCharacteristic(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredDescriptor(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredIncludedService(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.DiscoveredService(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.InvalidatedService(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.IsReadyToSendWriteWithoutResponse(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.ModifiedServices(CoreBluetooth.CBPeripheral,CoreBluetooth.CBService[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiRead(CoreBluetooth.CBPeripheral,Foundation.NSNumber,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.RssiUpdated(CoreBluetooth.CBPeripheral,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedCharacterteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedName(CoreBluetooth.CBPeripheral)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedNotificationState(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.UpdatedValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteCharacteristicValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBCharacteristic,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralDelegateRx.WroteDescriptorValue(CoreBluetooth.CBPeripheral,CoreBluetooth.CBDescriptor,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:CoreBluetooth.CBPeripheralManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreBluetooth.CBPeripheralManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAddedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.StateUpdated(CoreBluetooth.CBPeripheralManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreBluetooth.CBPeripheralManagerDelegate.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.AdvertisingStarted(CoreBluetooth.CBPeripheralManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicSubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.CharacteristicUnsubscribed(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBCentral,CoreBluetooth.CBCharacteristic)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidOpenL2CapChannel(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBL2CapChannel,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidPublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.DidUnpublishL2CapChannel(CoreBluetooth.CBPeripheralManager,System.UInt16,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadRequestReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ReadyToUpdateSubscribers(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.ServiceAdded(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBService,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.StateUpdated(CoreBluetooth.CBPeripheralManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WillRestoreState(CoreBluetooth.CBPeripheralManager,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:CoreBluetooth.CBPeripheralManagerDelegateRx.WriteRequestsReceived(CoreBluetooth.CBPeripheralManager,CoreBluetooth.CBATTRequest[])">
            <inheritdoc/>
        </member>
        <member name="T:CoreFoundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreFoundation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFSocket)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
        </member>
        <member name="M:CoreFoundation.EventExtensions.Events(CoreFoundation.CFStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFSocketEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFSocket"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFSocketEvents.#ctor(CoreFoundation.CFSocket)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFSocket"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.AcceptEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.AcceptEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ConnectEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ConnectEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.DataEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.DataEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.ReadEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.ReadEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFSocketEvents.WriteEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFSocket.WriteEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreFoundation.CFStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreFoundation.CFStream"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreFoundation.CFStreamEvents.#ctor(CoreFoundation.CFStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreFoundation.CFStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.CanAcceptBytesEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.CanAcceptBytesEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ClosedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ClosedEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.ErrorEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.ErrorEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.HasBytesAvailableEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.HasBytesAvailableEvent"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreFoundation.CFStreamEvents.OpenCompletedEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreFoundation.CFStream.OpenCompletedEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreLocation"/> namespace.
            </summary>
        </member>
        <member name="M:CoreLocation.EventExtensions.Events(CoreLocation.CLLocationManager)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreLocation.CLLocationManager"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerEvents.#ctor(CoreLocation.CLLocationManager)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreLocation.CLLocationManager"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.AuthorizationChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.AuthorizationChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DeferredUpdatesFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DeferredUpdatesFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidDetermineState">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidDetermineState"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.DidStartMonitoringForRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.DidStartMonitoringForRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationsUpdated">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationsUpdated"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationUpdatesPaused">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationUpdatesPaused"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.LocationUpdatesResumed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.LocationUpdatesResumed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.MonitoringFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.MonitoringFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.RegionEntered">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.RegionEntered"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.RegionLeft">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.RegionLeft"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerEvents.UpdatedLocation">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreLocation.CLLocationManager.UpdatedLocation"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreLocation.CLLocationManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreLocation.CLLocationManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DeferredUpdatesFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DeferredUpdatesFinished(CoreLocation.CLLocationManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidDetermineStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidDetermineState(CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.DidStartMonitoringForRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.DidStartMonitoringForRegion(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.Failed(CoreLocation.CLLocationManager,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesPausedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationUpdatesPaused(CoreLocation.CLLocationManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesResumedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.LocationUpdatesResumed(CoreLocation.CLLocationManager)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.MonitoringFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.MonitoringFailed(CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.RegionEnteredObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.RegionEntered(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.RegionLeftObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.RegionLeft(CoreLocation.CLLocationManager,CoreLocation.CLRegion)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreLocation.CLLocationManagerDelegateRx.UpdatedLocationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreLocation.CLLocationManagerDelegate.UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.AuthorizationChanged(CoreLocation.CLLocationManager,CoreLocation.CLAuthorizationStatus)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DeferredUpdatesFinished(CoreLocation.CLLocationManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidDetermineState(CoreLocation.CLLocationManager,CoreLocation.CLRegionState,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.DidStartMonitoringForRegion(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.Failed(CoreLocation.CLLocationManager,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationsUpdated(CoreLocation.CLLocationManager,CoreLocation.CLLocation[])">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesPaused(CoreLocation.CLLocationManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.LocationUpdatesResumed(CoreLocation.CLLocationManager)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.MonitoringFailed(CoreLocation.CLLocationManager,CoreLocation.CLRegion,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.RegionEntered(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.RegionLeft(CoreLocation.CLLocationManager,CoreLocation.CLRegion)">
            <inheritdoc/>
        </member>
        <member name="M:CoreLocation.CLLocationManagerDelegateRx.UpdatedLocation(CoreLocation.CLLocationManager,CoreLocation.CLLocation,CoreLocation.CLLocation)">
            <inheritdoc/>
        </member>
        <member name="T:CoreMidi.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreMidi"/> namespace.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiClient)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiClient"/> class.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiEndpoint)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiEndpoint"/> class.
            </summary>
        </member>
        <member name="M:CoreMidi.EventExtensions.Events(CoreMidi.MidiPort)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreMidi.MidiPort"/> class.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiClientEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiClient"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiClientEvents.#ctor(CoreMidi.MidiClient)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiClient"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.IOError">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.IOError"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ObjectAdded">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ObjectAdded"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ObjectRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ObjectRemoved"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.PropertyChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.PropertyChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.SerialPortOwnerChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.SerialPortOwnerChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.SetupChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.SetupChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:CoreMidi.MidiClientEvents.ThruConnectionsChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiClient.ThruConnectionsChanged"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiEndpointEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiEndpoint"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiEndpointEvents.#ctor(CoreMidi.MidiEndpoint)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiEndpoint"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiEndpointEvents.MessageReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiEndpoint.MessageReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreMidi.MidiPortEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreMidi.MidiPort"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreMidi.MidiPortEvents.#ctor(CoreMidi.MidiPort)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreMidi.MidiPort"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreMidi.MidiPortEvents.MessageReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreMidi.MidiPort.MessageReceived"/> event triggers.
            </summary>
        </member>
        <member name="T:CoreServices.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:CoreServices"/> namespace.
            </summary>
        </member>
        <member name="M:CoreServices.EventExtensions.Events(CoreServices.FSEventStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:CoreServices.FSEventStream"/> class.
            </summary>
        </member>
        <member name="T:CoreServices.FSEventStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:CoreServices.FSEventStream"/> class as observables.
            </summary>
        </member>
        <member name="M:CoreServices.FSEventStreamEvents.#ctor(CoreServices.FSEventStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:CoreServices.FSEventStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:CoreServices.FSEventStreamEvents.Events">
            <summary>
            Gets an observable which signals when the <see cref = "E:CoreServices.FSEventStream.Events"/> event triggers.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:ExternalAccessory"/> namespace.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EventExtensions.Events(ExternalAccessory.EAAccessory)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ExternalAccessory.EAAccessory"/> class as observables.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryEvents.#ctor(ExternalAccessory.EAAccessory)">
            <summary>
            Initializes a new instance of the <see cref = "T:ExternalAccessory.EAAccessory"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryEvents.Disconnected">
            <summary>
            Gets an observable which signals when the <see cref = "E:ExternalAccessory.EAAccessory.Disconnected"/> event triggers.
            </summary>
        </member>
        <member name="T:ExternalAccessory.EAAccessoryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ExternalAccessory.EAAccessoryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ExternalAccessory.EAAccessoryDelegateRx.DisconnectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ExternalAccessory.EAAccessoryDelegate.Disconnected(ExternalAccessory.EAAccessory)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ExternalAccessory.EAAccessoryDelegateRx.Disconnected(ExternalAccessory.EAAccessory)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:Foundation"/> namespace.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSCache)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedArchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSKeyedUnarchiver)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetService)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSNetServiceBrowser)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSStream)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
        </member>
        <member name="M:Foundation.EventExtensions.Events(Foundation.NSUserNotificationCenter)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:Foundation.NSUserNotificationCenter"/> class.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSCache"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheEvents.#ctor(Foundation.NSCache)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSCache"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSCacheEvents.WillEvictObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSCache.WillEvictObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedArchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedArchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverEvents.#ctor(Foundation.NSKeyedArchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedArchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.EncodedObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.EncodedObject"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedArchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverEvents.#ctor(Foundation.NSKeyedUnarchiver)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSKeyedUnarchiver"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finished"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.Finishing">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.Finishing"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverEvents.ReplacingObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSKeyedUnarchiver.ReplacingObject"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetService"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceEvents.#ctor(Foundation.NSNetService)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetService"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.AddressResolved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.AddressResolved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.DidAcceptConnection">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.DidAcceptConnection"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Published">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Published"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.PublishFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.PublishFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.ResolveFailure">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.ResolveFailure"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.Stopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.Stopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.UpdatedTxtRecordData">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.UpdatedTxtRecordData"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillPublish">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillPublish"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceEvents.WillResolve">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetService.WillResolve"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSNetServiceBrowser"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserEvents.#ctor(Foundation.NSNetServiceBrowser)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSNetServiceBrowser"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.DomainRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.DomainRemoved"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundDomain">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundDomain"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.FoundService">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.FoundService"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.NotSearched">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.NotSearched"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStarted"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.SearchStopped">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.SearchStopped"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserEvents.ServiceRemoved">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSNetServiceBrowser.ServiceRemoved"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSStreamEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSStream"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamEvents.#ctor(Foundation.NSStream)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSStream"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSStreamEvents.OnEvent">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSStream.OnEvent"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSUserNotificationCenterEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:Foundation.NSUserNotificationCenter"/> class as observables.
            </summary>
        </member>
        <member name="M:Foundation.NSUserNotificationCenterEvents.#ctor(Foundation.NSUserNotificationCenter)">
            <summary>
            Initializes a new instance of the <see cref = "T:Foundation.NSUserNotificationCenter"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:Foundation.NSUserNotificationCenterEvents.DidActivateNotification">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSUserNotificationCenter.DidActivateNotification"/> event triggers.
            </summary>
        </member>
        <member name="P:Foundation.NSUserNotificationCenterEvents.DidDeliverNotification">
            <summary>
            Gets an observable which signals when the <see cref = "E:Foundation.NSUserNotificationCenter.DidDeliverNotification"/> event triggers.
            </summary>
        </member>
        <member name="T:Foundation.NSCacheDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSCacheDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSCacheDelegateRx.WillEvictObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSCacheDelegate.WillEvictObject(Foundation.NSCache,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSCacheDelegateRx.WillEvictObject(Foundation.NSCache,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedArchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedArchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.EncodedObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finished(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.Finishing(Foundation.NSKeyedArchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedArchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedArchiverDelegate.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.EncodedObject(Foundation.NSKeyedArchiver,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finished(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.Finishing(Foundation.NSKeyedArchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedArchiverDelegateRx.ReplacingObject(Foundation.NSKeyedArchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSKeyedUnarchiverDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSKeyedUnarchiverDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finished(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.FinishingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.Finishing(Foundation.NSKeyedUnarchiver)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSKeyedUnarchiverDelegate.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finished(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.Finishing(Foundation.NSKeyedUnarchiver)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSKeyedUnarchiverDelegateRx.ReplacingObject(Foundation.NSKeyedUnarchiver,Foundation.NSObject,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSMachPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSMachPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSMachPortDelegateRx.MachMessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSMachPortDelegate.MachMessageReceived(System.IntPtr)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSMachPortDelegateRx.MachMessageReceived(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.DomainRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundDomainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.FoundServiceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.NotSearchedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStarted(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.SearchStoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.SearchStopped(Foundation.NSNetServiceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemovedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceBrowserDelegate.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.DomainRemoved(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundDomain(Foundation.NSNetServiceBrowser,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.FoundService(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.NotSearched(Foundation.NSNetServiceBrowser,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStarted(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.SearchStopped(Foundation.NSNetServiceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceBrowserDelegateRx.ServiceRemoved(Foundation.NSNetServiceBrowser,Foundation.NSNetService,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSNetServiceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSNetServiceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.AddressResolvedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.AddressResolved(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.DidAcceptConnectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Published(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.PublishFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.ResolveFailureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.StoppedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.Stopped(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillPublishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillPublish(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSNetServiceDelegateRx.WillResolveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSNetServiceDelegate.WillResolve(Foundation.NSNetService)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.AddressResolved(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Published(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.Stopped(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillPublish(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSNetServiceDelegateRx.WillResolve(Foundation.NSNetService)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSPortDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSPortDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSPortDelegateRx.MessageReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSPortDelegate.MessageReceived(Foundation.NSPortMessage)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSPortDelegateRx.MessageReceived(Foundation.NSPortMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSStreamDelegateRx.HandleEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSStreamDelegate.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSStreamDelegateRx.HandleEvent(Foundation.NSStream,Foundation.NSStreamEvent)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.FinishedLoading(Foundation.NSUrlConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDataDelegateRx.SentBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDataDelegate.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.FinishedLoading(Foundation.NSUrlConnection)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedData(Foundation.NSUrlConnection,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.ReceivedResponse(Foundation.NSUrlConnection,Foundation.NSUrlResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDataDelegateRx.SentBodyData(Foundation.NSUrlConnection,System.nint,System.nint,System.nint)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDelegate.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.CanceledAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.FailedWithError(Foundation.NSUrlConnection,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.ReceivedAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDelegateRx.WillSendRequestForAuthenticationChallenge(Foundation.NSUrlConnection,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlConnectionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlConnectionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlConnectionDownloadDelegateRx.WroteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlConnectionDownloadDelegate.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.FinishedDownloading(Foundation.NSUrlConnection,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.ResumedDownloading(Foundation.NSUrlConnection,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlConnectionDownloadDelegateRx.WroteData(Foundation.NSUrlConnection,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.CanceledAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.CanceledAuthenticationChallenge(Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.CreatedDestinationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.CreatedDestination(Foundation.NSUrlDownload,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.DecideDestinationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.DecideDestination(Foundation.NSUrlDownload,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.DownloadBeganObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.DownloadBegan(Foundation.NSUrlDownload)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.FailedWithError(Foundation.NSUrlDownload,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.Finished(Foundation.NSUrlDownload)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.ReceivedAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.ReceivedAuthenticationChallenge(Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.ReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.ReceivedData(Foundation.NSUrlDownload,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.ReceivedResponse(Foundation.NSUrlDownload,Foundation.NSUrlResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlDownloadDelegateRx.ResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlDownloadDelegate.Resume(Foundation.NSUrlDownload,Foundation.NSUrlResponse,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.CanceledAuthenticationChallenge(Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.CreatedDestination(Foundation.NSUrlDownload,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.DecideDestination(Foundation.NSUrlDownload,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.DownloadBegan(Foundation.NSUrlDownload)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.FailedWithError(Foundation.NSUrlDownload,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.Finished(Foundation.NSUrlDownload)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.ReceivedAuthenticationChallenge(Foundation.NSUrlDownload,Foundation.NSUrlAuthenticationChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.ReceivedData(Foundation.NSUrlDownload,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.ReceivedResponse(Foundation.NSUrlDownload,Foundation.NSUrlResponse)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlDownloadDelegateRx.Resume(Foundation.NSUrlDownload,Foundation.NSUrlResponse,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDataDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDataDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTaskObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDataDelegate.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeDownloadTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionDownloadTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidBecomeStreamTask(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveData(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.DidReceiveResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSUrlResponse,System.Action{Foundation.NSUrlSessionResponseDisposition})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDataDelegateRx.WillCacheResponse(Foundation.NSUrlSession,Foundation.NSUrlSessionDataTask,Foundation.NSCachedUrlResponse,System.Action{Foundation.NSCachedUrlResponse})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalidObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidBecomeInvalid(Foundation.NSUrlSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidFinishEventsForBackgroundSession(Foundation.NSUrlSession)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidResumeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionDownloadDelegate.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidFinishDownloading(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidResume(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionDownloadDelegateRx.DidWriteData(Foundation.NSUrlSession,Foundation.NSUrlSessionDownloadTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionStreamDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionStreamDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscoveredObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreamsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.ReadClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionStreamDelegateRx.WriteClosedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionStreamDelegate.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.BetterRouteDiscovered(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.CompletedTaskCaptureStreams(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.ReadClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionStreamDelegateRx.WriteClosed(Foundation.NSUrlSession,Foundation.NSUrlSessionStreamTask)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionTaskDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionTaskDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetricsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirectionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionTaskDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionTaskDelegateRx.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUrlSessionWebSocketDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUrlSessionWebSocketDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUrlSessionWebSocketDelegate.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidClose(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,Foundation.NSUrlSessionWebSocketCloseCode,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUrlSessionWebSocketDelegateRx.DidOpen(Foundation.NSUrlSession,Foundation.NSUrlSessionWebSocketTask,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUserActivityDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUserActivityDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityReceivedDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWasContinuedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWasContinued(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserActivityDelegateRx.UserActivityWillSaveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserActivityDelegate.UserActivityWillSave(Foundation.NSUserActivity)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityReceivedData(Foundation.NSUserActivity,Foundation.NSInputStream,Foundation.NSOutputStream)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWasContinued(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserActivityDelegateRx.UserActivityWillSave(Foundation.NSUserActivity)">
            <inheritdoc/>
        </member>
        <member name="T:Foundation.NSUserNotificationCenterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Foundation.NSUserNotificationCenterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Foundation.NSUserNotificationCenterDelegateRx.DidActivateNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserNotificationCenterDelegate.DidActivateNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Foundation.NSUserNotificationCenterDelegateRx.DidDeliverNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Foundation.NSUserNotificationCenterDelegate.DidDeliverNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Foundation.NSUserNotificationCenterDelegateRx.DidActivateNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)">
            <inheritdoc/>
        </member>
        <member name="M:Foundation.NSUserNotificationCenterDelegateRx.DidDeliverNotification(Foundation.NSUserNotificationCenter,Foundation.NSUserNotification)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:GameKit"/> namespace.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKAchievementViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKAchievementViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKChallengeEventHandler)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKChallengeEventHandler"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKFriendRequestComposeViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKGameCenterViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKLeaderboardViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKLeaderboardViewController"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatch)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
        </member>
        <member name="M:GameKit.EventExtensions.Events(GameKit.GKMatchmakerViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
        </member>
        <member name="T:GameKit.GKAchievementViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKAchievementViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKAchievementViewControllerEvents.#ctor(GameKit.GKAchievementViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKAchievementViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKAchievementViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKAchievementViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKChallengeEventHandlerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKChallengeEventHandler"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerEvents.#ctor(GameKit.GKChallengeEventHandler)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKChallengeEventHandler"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerCompletedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerCompletedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerReceivedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerReceivedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.LocalPlayerSelectedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.LocalPlayerSelectedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerEvents.RemotePlayerCompletedChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKChallengeEventHandler.RemotePlayerCompletedChallenge"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKFriendRequestComposeViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKFriendRequestComposeViewControllerEvents.#ctor(GameKit.GKFriendRequestComposeViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKFriendRequestComposeViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKFriendRequestComposeViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKFriendRequestComposeViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKGameCenterViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKGameCenterViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterViewControllerEvents.#ctor(GameKit.GKGameCenterViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKGameCenterViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKGameCenterViewControllerEvents.Finished">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKGameCenterViewController.Finished"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKLeaderboardViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKLeaderboardViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKLeaderboardViewControllerEvents.#ctor(GameKit.GKLeaderboardViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKLeaderboardViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKLeaderboardViewControllerEvents.DidFinish">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKLeaderboardViewController.DidFinish"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatch"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchEvents.#ctor(GameKit.GKMatch)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatch"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchEvents.ConnectionFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.ConnectionFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceived">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceived"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedForRecipient">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedForRecipient"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.DataReceivedFromPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.DataReceivedFromPlayer"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.Failed">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.Failed"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.StateChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.StateChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchEvents.StateChangedForPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatch.StateChangedForPlayer"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:GameKit.GKMatchmakerViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerEvents.#ctor(GameKit.GKMatchmakerViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:GameKit.GKMatchmakerViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFailWithError">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFailWithError"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindHostedPlayers">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindHostedPlayers"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindMatch">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindMatch"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.DidFindPlayers">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.DidFindPlayers"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.HostedPlayerDidAccept">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.HostedPlayerDidAccept"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.ReceivedAcceptFromHostedPlayer">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.ReceivedAcceptFromHostedPlayer"/> event triggers.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerEvents.WasCancelled">
            <summary>
            Gets an observable which signals when the <see cref = "E:GameKit.GKMatchmakerViewController.WasCancelled"/> event triggers.
            </summary>
        </member>
        <member name="T:GameKit.GKAchievementViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKAchievementViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKAchievementViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKAchievementViewControllerDelegate.DidFinish(GameKit.GKAchievementViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKAchievementViewControllerDelegateRx.DidFinish(GameKit.GKAchievementViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKChallengeEventHandlerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKChallengeEventHandlerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerCompletedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerReceivedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerSelectedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengeEventHandlerDelegateRx.RemotePlayerCompletedChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge(GameKit.GKChallenge)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerCompletedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerReceivedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.LocalPlayerSelectedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKChallengeEventHandlerDelegateRx.RemotePlayerCompletedChallenge(GameKit.GKChallenge)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKChallengesViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKChallengesViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKChallengesViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKChallengesViewControllerDelegate.DidFinish(GameKit.GKChallengesViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKChallengesViewControllerDelegateRx.DidFinish(GameKit.GKChallengesViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKFriendRequestComposeViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKFriendRequestComposeViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKFriendRequestComposeViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKFriendRequestComposeViewControllerDelegate.DidFinish(GameKit.GKFriendRequestComposeViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKFriendRequestComposeViewControllerDelegateRx.DidFinish(GameKit.GKFriendRequestComposeViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKGameCenterControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKGameCenterControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKGameCenterControllerDelegateRx.FinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKGameCenterControllerDelegate.Finished(GameKit.GKGameCenterViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKGameCenterControllerDelegateRx.Finished(GameKit.GKGameCenterViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKLeaderboardViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKLeaderboardViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKLeaderboardViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKLeaderboardViewControllerDelegate.DidFinish(GameKit.GKLeaderboardViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKLeaderboardViewControllerDelegateRx.DidFinish(GameKit.GKLeaderboardViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.ConnectionFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.ConnectionFailed(GameKit.GKMatch,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceived(GameKit.GKMatch,Foundation.NSData,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedForRecipientObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.DataReceivedFromPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.FailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.Failed(GameKit.GKMatch,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.StateChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchDelegateRx.StateChangedForPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchDelegate.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.ConnectionFailed(GameKit.GKMatch,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceived(GameKit.GKMatch,Foundation.NSData,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.Failed(GameKit.GKMatch,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchDelegateRx.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindPlayersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.DidFindPlayers(GameKit.GKMatchmakerViewController,System.String[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAcceptObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.ReceivedAcceptFromHostedPlayerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.ReceivedAcceptFromHostedPlayer(GameKit.GKMatchmakerViewController,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFailWithError(GameKit.GKMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindHostedPlayers(GameKit.GKMatchmakerViewController,GameKit.GKPlayer[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindMatch(GameKit.GKMatchmakerViewController,GameKit.GKMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.DidFindPlayers(GameKit.GKMatchmakerViewController,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.HostedPlayerDidAccept(GameKit.GKMatchmakerViewController,GameKit.GKPlayer)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.ReceivedAcceptFromHostedPlayer(GameKit.GKMatchmakerViewController,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.FailedWithError(GameKit.GKSession,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerChangedStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerChangedState(GameKit.GKSession,System.String,GameKit.GKPeerConnectionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerConnectionFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerConnectionFailed(GameKit.GKSession,System.String,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKSessionDelegateRx.PeerConnectionRequestObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKSessionDelegate.PeerConnectionRequest(GameKit.GKSession,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.FailedWithError(GameKit.GKSession,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerChangedState(GameKit.GKSession,System.String,GameKit.GKPeerConnectionState)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerConnectionFailed(GameKit.GKSession,System.String,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKSessionDelegateRx.PeerConnectionRequest(GameKit.GKSession,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKTurnBasedEventHandlerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKTurnBasedEventHandlerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleInviteFromGameCenterObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleInviteFromGameCenter(Foundation.NSString[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleMatchEndedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleMatchEnded(GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEvent(GameKit.GKTurnBasedMatch,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventForMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedEventHandlerDelegate.HandleTurnEventForMatch(GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleInviteFromGameCenter(Foundation.NSString[])">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleMatchEnded(GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEvent(GameKit.GKTurnBasedMatch,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedEventHandlerDelegateRx.HandleTurnEventForMatch(GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="T:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameKit.GKTurnBasedMatchmakerViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FoundMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.FoundMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.PlayerQuitForMatchObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.PlayerQuitForMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameKit.GKTurnBasedMatchmakerViewControllerDelegate.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FailedWithError(GameKit.GKTurnBasedMatchmakerViewController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.FoundMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.PlayerQuitForMatch(GameKit.GKTurnBasedMatchmakerViewController,GameKit.GKTurnBasedMatch)">
            <inheritdoc/>
        </member>
        <member name="M:GameKit.GKTurnBasedMatchmakerViewControllerDelegateRx.WasCancelled(GameKit.GKTurnBasedMatchmakerViewController)">
            <inheritdoc/>
        </member>
        <member name="T:ImageKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:ImageKit"/> namespace.
            </summary>
        </member>
        <member name="M:ImageKit.EventExtensions.Events(ImageKit.IKCameraDeviceView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ImageKit.IKCameraDeviceView"/> class.
            </summary>
        </member>
        <member name="M:ImageKit.EventExtensions.Events(ImageKit.IKDeviceBrowserView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ImageKit.IKDeviceBrowserView"/> class.
            </summary>
        </member>
        <member name="M:ImageKit.EventExtensions.Events(ImageKit.IKImageBrowserView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ImageKit.IKImageBrowserView"/> class.
            </summary>
        </member>
        <member name="M:ImageKit.EventExtensions.Events(ImageKit.IKScannerDeviceView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:ImageKit.IKScannerDeviceView"/> class.
            </summary>
        </member>
        <member name="T:ImageKit.IKCameraDeviceViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ImageKit.IKCameraDeviceView"/> class as observables.
            </summary>
        </member>
        <member name="M:ImageKit.IKCameraDeviceViewEvents.#ctor(ImageKit.IKCameraDeviceView)">
            <summary>
            Initializes a new instance of the <see cref = "T:ImageKit.IKCameraDeviceView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewEvents.DidDownloadFile">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKCameraDeviceView.DidDownloadFile"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewEvents.DidEncounterError">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKCameraDeviceView.DidEncounterError"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewEvents.SelectionDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKCameraDeviceView.SelectionDidChange"/> event triggers.
            </summary>
        </member>
        <member name="T:ImageKit.IKDeviceBrowserViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ImageKit.IKDeviceBrowserView"/> class as observables.
            </summary>
        </member>
        <member name="M:ImageKit.IKDeviceBrowserViewEvents.#ctor(ImageKit.IKDeviceBrowserView)">
            <summary>
            Initializes a new instance of the <see cref = "T:ImageKit.IKDeviceBrowserView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ImageKit.IKDeviceBrowserViewEvents.DidEncounterError">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKDeviceBrowserView.DidEncounterError"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKDeviceBrowserViewEvents.SelectionDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKDeviceBrowserView.SelectionDidChange"/> event triggers.
            </summary>
        </member>
        <member name="T:ImageKit.IKImageBrowserViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ImageKit.IKImageBrowserView"/> class as observables.
            </summary>
        </member>
        <member name="M:ImageKit.IKImageBrowserViewEvents.#ctor(ImageKit.IKImageBrowserView)">
            <summary>
            Initializes a new instance of the <see cref = "T:ImageKit.IKImageBrowserView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ImageKit.IKImageBrowserViewEvents.BackgroundWasRightClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKImageBrowserView.BackgroundWasRightClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserViewEvents.CellWasDoubleClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKImageBrowserView.CellWasDoubleClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserViewEvents.CellWasRightClicked">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKImageBrowserView.CellWasRightClicked"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserViewEvents.SelectionDidChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKImageBrowserView.SelectionDidChange"/> event triggers.
            </summary>
        </member>
        <member name="T:ImageKit.IKScannerDeviceViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:ImageKit.IKScannerDeviceView"/> class as observables.
            </summary>
        </member>
        <member name="M:ImageKit.IKScannerDeviceViewEvents.#ctor(ImageKit.IKScannerDeviceView)">
            <summary>
            Initializes a new instance of the <see cref = "T:ImageKit.IKScannerDeviceView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewEvents.DidEncounterError">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKScannerDeviceView.DidEncounterError"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewEvents.DidScan">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKScannerDeviceView.DidScan"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewEvents.DidScanToBandData">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKScannerDeviceView.DidScanToBandData"/> event triggers.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewEvents.DidScanToUrl">
            <summary>
            Gets an observable which signals when the <see cref = "E:ImageKit.IKScannerDeviceView.DidScanToUrl"/> event triggers.
            </summary>
        </member>
        <member name="T:ImageKit.IKCameraDeviceViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageKit.IKCameraDeviceViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewDelegateRx.DidDownloadFileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKCameraDeviceViewDelegate.DidDownloadFile(ImageKit.IKCameraDeviceView,ImageCaptureCore.ICCameraFile,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKCameraDeviceViewDelegate.DidEncounterError(ImageKit.IKCameraDeviceView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKCameraDeviceViewDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKCameraDeviceViewDelegate.SelectionDidChange(ImageKit.IKCameraDeviceView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageKit.IKCameraDeviceViewDelegateRx.DidDownloadFile(ImageKit.IKCameraDeviceView,ImageCaptureCore.ICCameraFile,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKCameraDeviceViewDelegateRx.DidEncounterError(ImageKit.IKCameraDeviceView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKCameraDeviceViewDelegateRx.SelectionDidChange(ImageKit.IKCameraDeviceView)">
            <inheritdoc/>
        </member>
        <member name="T:ImageKit.IKDeviceBrowserViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageKit.IKDeviceBrowserViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageKit.IKDeviceBrowserViewDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKDeviceBrowserViewDelegate.DidEncounterError(ImageKit.IKDeviceBrowserView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKDeviceBrowserViewDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKDeviceBrowserViewDelegate.SelectionDidChange(ImageKit.IKDeviceBrowserView,ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageKit.IKDeviceBrowserViewDelegateRx.DidEncounterError(ImageKit.IKDeviceBrowserView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKDeviceBrowserViewDelegateRx.SelectionDidChange(ImageKit.IKDeviceBrowserView,ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="T:ImageKit.IKImageBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageKit.IKImageBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserDelegateRx.BackgroundWasRightClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKImageBrowserDelegate.BackgroundWasRightClicked(ImageKit.IKImageBrowserView,AppKit.NSEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserDelegateRx.CellWasDoubleClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKImageBrowserDelegate.CellWasDoubleClicked(ImageKit.IKImageBrowserView,System.nint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserDelegateRx.CellWasRightClickedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKImageBrowserDelegate.CellWasRightClicked(ImageKit.IKImageBrowserView,System.nint,AppKit.NSEvent)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKImageBrowserDelegateRx.SelectionDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKImageBrowserDelegate.SelectionDidChange(ImageKit.IKImageBrowserView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageKit.IKImageBrowserDelegateRx.BackgroundWasRightClicked(ImageKit.IKImageBrowserView,AppKit.NSEvent)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKImageBrowserDelegateRx.CellWasDoubleClicked(ImageKit.IKImageBrowserView,System.nint)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKImageBrowserDelegateRx.CellWasRightClicked(ImageKit.IKImageBrowserView,System.nint,AppKit.NSEvent)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKImageBrowserDelegateRx.SelectionDidChange(ImageKit.IKImageBrowserView)">
            <inheritdoc/>
        </member>
        <member name="T:ImageKit.IKScannerDeviceViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageKit.IKScannerDeviceViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKScannerDeviceViewDelegate.DidEncounterError(ImageKit.IKScannerDeviceView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewDelegateRx.DidScanObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKScannerDeviceViewDelegate.DidScan(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewDelegateRx.DidScanToBandDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKScannerDeviceViewDelegate.DidScanToBandData(ImageKit.IKScannerDeviceView,ImageCaptureCore.ICScannerBandData,Foundation.NSDictionary,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageKit.IKScannerDeviceViewDelegateRx.DidScanToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageKit.IKScannerDeviceViewDelegate.DidScanToUrl(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageKit.IKScannerDeviceViewDelegateRx.DidEncounterError(ImageKit.IKScannerDeviceView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKScannerDeviceViewDelegateRx.DidScan(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSData,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKScannerDeviceViewDelegateRx.DidScanToBandData(ImageKit.IKScannerDeviceView,ImageCaptureCore.ICScannerBandData,Foundation.NSDictionary,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageKit.IKScannerDeviceViewDelegateRx.DidScanToUrl(ImageKit.IKScannerDeviceView,Foundation.NSUrl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:MapKit"/> namespace.
            </summary>
        </member>
        <member name="M:MapKit.EventExtensions.Events(MapKit.MKMapView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
        </member>
        <member name="T:MapKit.MKMapViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:MapKit.MKMapView"/> class as observables.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewEvents.#ctor(MapKit.MKMapView)">
            <summary>
            Initializes a new instance of the <see cref = "T:MapKit.MKMapView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:MapKit.MKMapViewEvents.ChangedDragState">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.ChangedDragState"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddAnnotationViews">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddAnnotationViews"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidAddOverlayRenderers">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidAddOverlayRenderers"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidChangeVisibleRegion">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidChangeVisibleRegion"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidDeselectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidDeselectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFailToLocateUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFailToLocateUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidFinishRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidFinishRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidSelectAnnotationView">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidSelectAnnotationView"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidStopLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidStopLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.DidUpdateUserLocation">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.DidUpdateUserLocation"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.LoadingMapFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.LoadingMapFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.MapLoaded">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.MapLoaded"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionChanged">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionChanged"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.RegionWillChange">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.RegionWillChange"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLoadingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLoadingMap"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartLocatingUser">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartLocatingUser"/> event triggers.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewEvents.WillStartRenderingMap">
            <summary>
            Gets an observable which signals when the <see cref = "E:MapKit.MKMapView.WillStartRenderingMap"/> event triggers.
            </summary>
        </member>
        <member name="T:MapKit.MKLocalSearchCompleterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKLocalSearchCompleterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidFailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResultsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKLocalSearchCompleterDelegate.DidUpdateResults(MapKit.MKLocalSearchCompleter)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidFail(MapKit.MKLocalSearchCompleter,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKLocalSearchCompleterDelegateRx.DidUpdateResults(MapKit.MKLocalSearchCompleter)">
            <inheritdoc/>
        </member>
        <member name="T:MapKit.MKMapViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MapKit.MKMapViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.ChangedDragStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddAnnotationViewsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidChangeVisibleRegion(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFailToLocateUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidFinishRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidSelectAnnotationViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidStopLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidStopLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.DidUpdateUserLocationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.LoadingMapFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.MapLoadedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.MapLoaded(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionChangedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionChanged(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.RegionWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.RegionWillChange(MapKit.MKMapView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLoadingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLoadingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartLocatingUserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartLocatingUser(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MapKit.MKMapViewDelegateRx.WillStartRenderingMapObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MapKit.MKMapViewDelegate.WillStartRenderingMap(MapKit.MKMapView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidChangeVisibleRegion(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidStopLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.MapLoaded(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionChanged(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.RegionWillChange(MapKit.MKMapView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLoadingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartLocatingUser(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="M:MapKit.MKMapViewDelegateRx.WillStartRenderingMap(MapKit.MKMapView)">
            <inheritdoc/>
        </member>
        <member name="T:NotificationCenter.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:NotificationCenter"/> namespace.
            </summary>
        </member>
        <member name="M:NotificationCenter.EventExtensions.Events(NotificationCenter.NCWidgetListViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:NotificationCenter.NCWidgetListViewController"/> class.
            </summary>
        </member>
        <member name="M:NotificationCenter.EventExtensions.Events(NotificationCenter.NCWidgetSearchViewController)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:NotificationCenter.NCWidgetSearchViewController"/> class.
            </summary>
        </member>
        <member name="T:NotificationCenter.NCWidgetListViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:NotificationCenter.NCWidgetListViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:NotificationCenter.NCWidgetListViewControllerEvents.#ctor(NotificationCenter.NCWidgetListViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:NotificationCenter.NCWidgetListViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewControllerEvents.DidRemoveRow">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetListViewController.DidRemoveRow"/> event triggers.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewControllerEvents.DidReorderRow">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetListViewController.DidReorderRow"/> event triggers.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewControllerEvents.PerformAddAction">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetListViewController.PerformAddAction"/> event triggers.
            </summary>
        </member>
        <member name="T:NotificationCenter.NCWidgetSearchViewControllerEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:NotificationCenter.NCWidgetSearchViewController"/> class as observables.
            </summary>
        </member>
        <member name="M:NotificationCenter.NCWidgetSearchViewControllerEvents.#ctor(NotificationCenter.NCWidgetSearchViewController)">
            <summary>
            Initializes a new instance of the <see cref = "T:NotificationCenter.NCWidgetSearchViewController"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewControllerEvents.ResultSelected">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetSearchViewController.ResultSelected"/> event triggers.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewControllerEvents.SearchForTearm">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetSearchViewController.SearchForTearm"/> event triggers.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewControllerEvents.TermCleared">
            <summary>
            Gets an observable which signals when the <see cref = "E:NotificationCenter.NCWidgetSearchViewController.TermCleared"/> event triggers.
            </summary>
        </member>
        <member name="T:NotificationCenter.NCWidgetListViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:NotificationCenter.NCWidgetListViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewDelegateRx.DidRemoveRowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetListViewDelegate.DidRemoveRow(NotificationCenter.NCWidgetListViewController,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewDelegateRx.DidReorderRowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetListViewDelegate.DidReorderRow(NotificationCenter.NCWidgetListViewController,System.nuint,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetListViewDelegateRx.PerformAddActionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetListViewDelegate.PerformAddAction(NotificationCenter.NCWidgetListViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:NotificationCenter.NCWidgetListViewDelegateRx.DidRemoveRow(NotificationCenter.NCWidgetListViewController,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:NotificationCenter.NCWidgetListViewDelegateRx.DidReorderRow(NotificationCenter.NCWidgetListViewController,System.nuint,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:NotificationCenter.NCWidgetListViewDelegateRx.PerformAddAction(NotificationCenter.NCWidgetListViewController)">
            <inheritdoc/>
        </member>
        <member name="T:NotificationCenter.NCWidgetSearchViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:NotificationCenter.NCWidgetSearchViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewDelegateRx.ResultSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetSearchViewDelegate.ResultSelected(NotificationCenter.NCWidgetSearchViewController,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewDelegateRx.SearchForTearmObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetSearchViewDelegate.SearchForTearm(NotificationCenter.NCWidgetSearchViewController,System.String,System.nuint)"/> method is invoked.
            </summary>
        </member>
        <member name="P:NotificationCenter.NCWidgetSearchViewDelegateRx.TermClearedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NotificationCenter.NCWidgetSearchViewDelegate.TermCleared(NotificationCenter.NCWidgetSearchViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:NotificationCenter.NCWidgetSearchViewDelegateRx.ResultSelected(NotificationCenter.NCWidgetSearchViewController,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:NotificationCenter.NCWidgetSearchViewDelegateRx.SearchForTearm(NotificationCenter.NCWidgetSearchViewController,System.String,System.nuint)">
            <inheritdoc/>
        </member>
        <member name="M:NotificationCenter.NCWidgetSearchViewDelegateRx.TermCleared(NotificationCenter.NCWidgetSearchViewController)">
            <inheritdoc/>
        </member>
        <member name="T:PdfKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:PdfKit"/> namespace.
            </summary>
        </member>
        <member name="M:PdfKit.EventExtensions.Events(PdfKit.PdfDocument)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PdfKit.PdfDocument"/> class.
            </summary>
        </member>
        <member name="M:PdfKit.EventExtensions.Events(PdfKit.PdfView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:PdfKit.PdfView"/> class.
            </summary>
        </member>
        <member name="T:PdfKit.PdfDocumentEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PdfKit.PdfDocument"/> class as observables.
            </summary>
        </member>
        <member name="M:PdfKit.PdfDocumentEvents.#ctor(PdfKit.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref = "T:PdfKit.PdfDocument"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidBeginDocumentFind">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidBeginDocumentFind"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidMatchString">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidMatchString"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.DidUnlock">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.DidUnlock"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.FindFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.FindFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.MatchFound">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.MatchFound"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.PageFindFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.PageFindFinished"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentEvents.PageFindStarted">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfDocument.PageFindStarted"/> event triggers.
            </summary>
        </member>
        <member name="T:PdfKit.PdfViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:PdfKit.PdfView"/> class as observables.
            </summary>
        </member>
        <member name="M:PdfKit.PdfViewEvents.#ctor(PdfKit.PdfView)">
            <summary>
            Initializes a new instance of the <see cref = "T:PdfKit.PdfView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:PdfKit.PdfViewEvents.OpenPdf">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.OpenPdf"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.PerformFind">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.PerformFind"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.PerformGoToPage">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.PerformGoToPage"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.PerformPrint">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.PerformPrint"/> event triggers.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewEvents.WillClickOnLink">
            <summary>
            Gets an observable which signals when the <see cref = "E:PdfKit.PdfView.WillClickOnLink"/> event triggers.
            </summary>
        </member>
        <member name="T:PdfKit.PdfDocumentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PdfKit.PdfDocumentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidBeginDocumentFindObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidBeginDocumentFind(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidMatchStringObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidMatchString(PdfKit.PdfSelection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.DidUnlockObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.DidUnlock(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.FindFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.FindFinished(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.MatchFoundObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.MatchFound(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.PageFindFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.PageFindFinished(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfDocumentDelegateRx.PageFindStartedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfDocumentDelegate.PageFindStarted(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidBeginDocumentFind(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidMatchString(PdfKit.PdfSelection)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.DidUnlock(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.FindFinished(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.MatchFound(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.PageFindFinished(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfDocumentDelegateRx.PageFindStarted(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:PdfKit.PdfViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PdfKit.PdfViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.OpenPdfObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.OpenPdf(PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.PerformFindObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.PerformFind(PdfKit.PdfView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.PerformGoToPageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.PerformGoToPage(PdfKit.PdfView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.PerformPrintObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.PerformPrint(PdfKit.PdfView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PdfKit.PdfViewDelegateRx.WillClickOnLinkObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PdfKit.PdfViewDelegate.WillClickOnLink(PdfKit.PdfView,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.OpenPdf(PdfKit.PdfView,PdfKit.PdfActionRemoteGoTo)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.PerformFind(PdfKit.PdfView)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.PerformGoToPage(PdfKit.PdfView)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.PerformPrint(PdfKit.PdfView)">
            <inheritdoc/>
        </member>
        <member name="M:PdfKit.PdfViewDelegateRx.WillClickOnLink(PdfKit.PdfView,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="T:QTKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:QTKit"/> namespace.
            </summary>
        </member>
        <member name="M:QTKit.EventExtensions.Events(QTKit.QTCaptureDecompressedVideoOutput)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:QTKit.QTCaptureDecompressedVideoOutput"/> class.
            </summary>
        </member>
        <member name="M:QTKit.EventExtensions.Events(QTKit.QTCaptureFileOutput)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:QTKit.QTCaptureFileOutput"/> class.
            </summary>
        </member>
        <member name="T:QTKit.QTCaptureDecompressedVideoOutputEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:QTKit.QTCaptureDecompressedVideoOutput"/> class as observables.
            </summary>
        </member>
        <member name="M:QTKit.QTCaptureDecompressedVideoOutputEvents.#ctor(QTKit.QTCaptureDecompressedVideoOutput)">
            <summary>
            Initializes a new instance of the <see cref = "T:QTKit.QTCaptureDecompressedVideoOutput"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:QTKit.QTCaptureDecompressedVideoOutputEvents.DidDropVideoFrame">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureDecompressedVideoOutput.DidDropVideoFrame"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureDecompressedVideoOutputEvents.DidOutputVideoFrame">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureDecompressedVideoOutput.DidOutputVideoFrame"/> event triggers.
            </summary>
        </member>
        <member name="T:QTKit.QTCaptureFileOutputEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:QTKit.QTCaptureFileOutput"/> class as observables.
            </summary>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputEvents.#ctor(QTKit.QTCaptureFileOutput)">
            <summary>
            Initializes a new instance of the <see cref = "T:QTKit.QTCaptureFileOutput"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.DidFinishRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.DidFinishRecording"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.DidOutputSampleBuffer">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.DidOutputSampleBuffer"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.DidPauseRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.DidPauseRecording"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.DidResumeRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.DidResumeRecording"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.DidStartRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.DidStartRecording"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.MustChangeOutputFile">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.MustChangeOutputFile"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.WillFinishRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.WillFinishRecording"/> event triggers.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputEvents.WillStartRecording">
            <summary>
            Gets an observable which signals when the <see cref = "E:QTKit.QTCaptureFileOutput.WillStartRecording"/> event triggers.
            </summary>
        </member>
        <member name="T:QTKit.QTCaptureDecompressedVideoOutputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:QTKit.QTCaptureDecompressedVideoOutputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureDecompressedVideoOutputDelegateRx.DidDropVideoFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureDecompressedVideoOutputDelegate.DidDropVideoFrame(QTKit.QTCaptureOutput,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureDecompressedVideoOutputDelegateRx.DidOutputVideoFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureDecompressedVideoOutputDelegate.DidOutputVideoFrame(QTKit.QTCaptureOutput,CoreVideo.CVImageBuffer,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="M:QTKit.QTCaptureDecompressedVideoOutputDelegateRx.DidDropVideoFrame(QTKit.QTCaptureOutput,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureDecompressedVideoOutputDelegateRx.DidOutputVideoFrame(QTKit.QTCaptureOutput,CoreVideo.CVImageBuffer,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="T:QTKit.QTCaptureFileOutputDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:QTKit.QTCaptureFileOutputDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.DidFinishRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.DidFinishRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.DidOutputSampleBufferObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.DidOutputSampleBuffer(QTKit.QTCaptureFileOutput,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.DidPauseRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.DidPauseRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.DidResumeRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.DidResumeRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.DidStartRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.DidStartRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.MustChangeOutputFileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.MustChangeOutputFile(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.WillFinishRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.WillFinishRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QTKit.QTCaptureFileOutputDelegateRx.WillStartRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QTKit.QTCaptureFileOutputDelegate.WillStartRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.DidFinishRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.DidOutputSampleBuffer(QTKit.QTCaptureFileOutput,QTKit.QTSampleBuffer,QTKit.QTCaptureConnection)">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.DidPauseRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.DidResumeRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.DidStartRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.MustChangeOutputFile(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.WillFinishRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[],Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:QTKit.QTCaptureFileOutputDelegateRx.WillStartRecording(QTKit.QTCaptureFileOutput,Foundation.NSUrl,QTKit.QTCaptureConnection[])">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SceneKit"/> namespace.
            </summary>
        </member>
        <member name="M:SceneKit.EventExtensions.Events(SceneKit.SCNPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SceneKit.SCNPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsWorldEvents.#ctor(SceneKit.SCNPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SceneKit.SCNPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsWorldEvents.DidUpdateContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SceneKit.SCNPhysicsWorld.DidUpdateContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SceneKit.SCNAvoidOccluderConstraintDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNAvoidOccluderConstraintDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNAvoidOccluderConstraintDelegate.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNAvoidOccluderConstraintDelegateRx.DidAvoidOccluder(SceneKit.SCNAvoidOccluderConstraint,SceneKit.SCNNode,SceneKit.SCNNode)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNCameraControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNCameraControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEndObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaDidEnd(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNCameraControllerDelegate.CameraInertiaWillStart(SceneKit.SCNCameraController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaDidEnd(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNCameraControllerDelegateRx.CameraInertiaWillStart(SceneKit.SCNCameraController)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNNodeRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNNodeRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNNodeRendererDelegateRx.RenderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNNodeRendererDelegate.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNNodeRendererDelegateRx.Render(SceneKit.SCNNode,SceneKit.SCNRenderer,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNPhysicsContactDelegate.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidBeginContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidEndContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNPhysicsContactDelegateRx.DidUpdateContact(SceneKit.SCNPhysicsWorld,SceneKit.SCNPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNProgramDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNProgramDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNProgramDelegateRx.HandleErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNProgramDelegate.HandleError(SceneKit.SCNProgram,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNProgramDelegateRx.UnbindValueObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNProgramDelegate.UnbindValue(SceneKit.SCNProgram,System.String,System.UInt32,System.UInt32,SceneKit.SCNRenderer)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNProgramDelegateRx.HandleError(SceneKit.SCNProgram,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNProgramDelegateRx.UnbindValue(SceneKit.SCNProgram,System.String,System.UInt32,System.UInt32,SceneKit.SCNRenderer)">
            <inheritdoc/>
        </member>
        <member name="T:SceneKit.SCNSceneRendererDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SceneKit.SCNSceneRendererDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimationsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.Update(SceneKit.ISCNSceneRenderer,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SceneKit.SCNSceneRendererDelegateRx.WillRenderSceneObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SceneKit.SCNSceneRendererDelegate.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyAnimations(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidApplyConstraints(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.DidSimulatePhysics(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.Update(SceneKit.ISCNSceneRenderer,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SceneKit.SCNSceneRendererDelegateRx.WillRenderScene(SceneKit.ISCNSceneRenderer,SceneKit.SCNScene,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:SpriteKit"/> namespace.
            </summary>
        </member>
        <member name="M:SpriteKit.EventExtensions.Events(SpriteKit.SKPhysicsWorld)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsWorldEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class as observables.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsWorldEvents.#ctor(SpriteKit.SKPhysicsWorld)">
            <summary>
            Initializes a new instance of the <see cref = "T:SpriteKit.SKPhysicsWorld"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidBeginContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidBeginContact"/> event triggers.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsWorldEvents.DidEndContact">
            <summary>
            Gets an observable which signals when the <see cref = "E:SpriteKit.SKPhysicsWorld.DidEndContact"/> event triggers.
            </summary>
        </member>
        <member name="T:SpriteKit.SKPhysicsContactDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKPhysicsContactDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidBeginContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKPhysicsContactDelegateRx.DidEndContactObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKPhysicsContactDelegate.DidEndContact(SpriteKit.SKPhysicsContact)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidBeginContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKPhysicsContactDelegateRx.DidEndContact(SpriteKit.SKPhysicsContact)">
            <inheritdoc/>
        </member>
        <member name="T:SpriteKit.SKSceneDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:SpriteKit.SKSceneDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidApplyConstraintsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidApplyConstraints(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidEvaluateActionsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidEvaluateActions(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidFinishUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidFinishUpdate(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.DidSimulatePhysicsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.DidSimulatePhysics(SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="P:SpriteKit.SKSceneDelegateRx.UpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:SpriteKit.SKSceneDelegate.Update(System.Double,SpriteKit.SKScene)"/> method is invoked.
            </summary>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidApplyConstraints(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidEvaluateActions(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidFinishUpdate(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.DidSimulatePhysics(SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="M:SpriteKit.SKSceneDelegateRx.Update(System.Double,SpriteKit.SKScene)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:StoreKit"/> namespace.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKProductsRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
        </member>
        <member name="M:StoreKit.EventExtensions.Events(StoreKit.SKRequest)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
        </member>
        <member name="T:StoreKit.SKProductsRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKProductsRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestEvents.#ctor(StoreKit.SKProductsRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKProductsRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKProductsRequestEvents.ReceivedResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKProductsRequest.ReceivedResponse"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKRequestEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:StoreKit.SKRequest"/> class as observables.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestEvents.#ctor(StoreKit.SKRequest)">
            <summary>
            Initializes a new instance of the <see cref = "T:StoreKit.SKRequest"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestEvents.RequestFinished">
            <summary>
            Gets an observable which signals when the <see cref = "E:StoreKit.SKRequest.RequestFinished"/> event triggers.
            </summary>
        </member>
        <member name="T:StoreKit.SKProductsRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKProductsRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKProductsRequestDelegateRx.ReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKProductsRequestDelegate.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKProductsRequestDelegateRx.ReceivedResponse(StoreKit.SKProductsRequest,StoreKit.SKProductsResponse)">
            <inheritdoc/>
        </member>
        <member name="T:StoreKit.SKRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:StoreKit.SKRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFailed(StoreKit.SKRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:StoreKit.SKRequestDelegateRx.RequestFinishedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:StoreKit.SKRequestDelegate.RequestFinished(StoreKit.SKRequest)"/> method is invoked.
            </summary>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFailed(StoreKit.SKRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:StoreKit.SKRequestDelegateRx.RequestFinished(StoreKit.SKRequest)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.EventExtensions">
            <summary>
            A class that contains extension methods to wrap events for classes contained within the <see cref = "N:WebKit"/> namespace.
            </summary>
        </member>
        <member name="M:WebKit.EventExtensions.Events(WebKit.WebView)">
            <summary>
            A wrapper class which wraps all the events contained within the <see cref = "T:WebKit.WebView"/> class.
            </summary>
        </member>
        <member name="T:WebKit.WebViewEvents">
            <summary>
            A class which wraps the events contained within the <see cref = "T:WebKit.WebView"/> class as observables.
            </summary>
        </member>
        <member name="M:WebKit.WebViewEvents.#ctor(WebKit.WebView)">
            <summary>
            Initializes a new instance of the <see cref = "T:WebKit.WebView"/> class.
            </summary>
            <param name = "data">The class that is being wrapped.</param>
        </member>
        <member name="P:WebKit.WebViewEvents.CanceledClientRedirect">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.CanceledClientRedirect"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.ChangedLocationWithinPage">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.ChangedLocationWithinPage"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.ClearedWindowObject">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.ClearedWindowObject"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.CommitedLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.CommitedLoad"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.DecidePolicyForMimeType">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.DecidePolicyForMimeType"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.DecidePolicyForNavigation">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.DecidePolicyForNavigation"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.DecidePolicyForNewWindow">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.DecidePolicyForNewWindow"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.DidCreateJavaScriptContext">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.DidCreateJavaScriptContext"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.FailedLoadWithError">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.FailedLoadWithError"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.FailedProvisionalLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.FailedProvisionalLoad"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.FinishedLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.FinishedLoad"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnCancelledAuthenticationChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnCancelledAuthenticationChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnFailedLoading">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnFailedLoading"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnFinishedLoading">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnFinishedLoading"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnPlugInFailed">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnPlugInFailed"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnReceivedAuthenticationChallenge">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnReceivedAuthenticationChallenge"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnReceivedContentLength">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnReceivedContentLength"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.OnReceivedResponse">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.OnReceivedResponse"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.ReceivedIcon">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.ReceivedIcon"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.ReceivedServerRedirectForProvisionalLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.ReceivedServerRedirectForProvisionalLoad"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.ReceivedTitle">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.ReceivedTitle"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.StartedProvisionalLoad">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.StartedProvisionalLoad"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIClose">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIClose"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIDrawFooterInRect">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIDrawFooterInRect"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIDrawHeaderInRect">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIDrawHeaderInRect"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIFocus">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIFocus"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIMakeFirstResponder">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIMakeFirstResponder"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIMouseDidMoveOverElement">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIMouseDidMoveOverElement"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIPrintFrameView">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIPrintFrameView"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIRunJavaScriptAlertPanel">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIRunJavaScriptAlertPanel"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIRunJavaScriptAlertPanelMessage">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIRunJavaScriptAlertPanelMessage"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIRunModal">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIRunModal"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIRunOpenPanelForFileButton">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIRunOpenPanelForFileButton"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetContentRect">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetContentRect"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetFrame">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetFrame"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetResizable">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetResizable"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetStatusBarVisible">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetStatusBarVisible"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetStatusText">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetStatusText"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UISetToolbarsVisible">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UISetToolbarsVisible"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIShow">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIShow"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIUnfocus">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIUnfocus"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIWillPerformDragDestination">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIWillPerformDragDestination"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UIWillPerformDragSource">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UIWillPerformDragSource"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.UnableToImplementPolicy">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.UnableToImplementPolicy"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.WillCloseFrame">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.WillCloseFrame"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.WillPerformClientRedirect">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.WillPerformClientRedirect"/> event triggers.
            </summary>
        </member>
        <member name="P:WebKit.WebViewEvents.WindowScriptObjectAvailable">
            <summary>
            Gets an observable which signals when the <see cref = "E:WebKit.WebView.WindowScriptObjectAvailable"/> event triggers.
            </summary>
        </member>
        <member name="T:WebKit.WebFrameLoadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WebFrameLoadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.CanceledClientRedirectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.CanceledClientRedirect(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.ChangedLocationWithinPageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.ChangedLocationWithinPage(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.ClearedWindowObjectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.ClearedWindowObject(WebKit.WebView,WebKit.WebScriptObject,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.CommitedLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.CommitedLoad(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.DidCreateJavaScriptContextObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.DidCreateJavaScriptContext(WebKit.WebView,JavaScriptCore.JSContext,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.FailedLoadWithErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.FailedLoadWithError(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.FailedProvisionalLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.FailedProvisionalLoad(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.FinishedLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.FinishedLoad(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.ReceivedIconObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.ReceivedIcon(WebKit.WebView,AppKit.NSImage,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.ReceivedServerRedirectForProvisionalLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.ReceivedServerRedirectForProvisionalLoad(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.ReceivedTitleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.ReceivedTitle(WebKit.WebView,System.String,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.StartedProvisionalLoadObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.StartedProvisionalLoad(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.WillCloseFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.WillCloseFrame(WebKit.WebView,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.WillPerformClientRedirectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.WillPerformClientRedirect(WebKit.WebView,Foundation.NSUrl,System.Double,Foundation.NSDate,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebFrameLoadDelegateRx.WindowScriptObjectAvailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebFrameLoadDelegate.WindowScriptObjectAvailable(WebKit.WebView,WebKit.WebScriptObject)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.CanceledClientRedirect(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.ChangedLocationWithinPage(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.ClearedWindowObject(WebKit.WebView,WebKit.WebScriptObject,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.CommitedLoad(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.DidCreateJavaScriptContext(WebKit.WebView,JavaScriptCore.JSContext,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.FailedLoadWithError(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.FailedProvisionalLoad(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.FinishedLoad(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.ReceivedIcon(WebKit.WebView,AppKit.NSImage,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.ReceivedServerRedirectForProvisionalLoad(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.ReceivedTitle(WebKit.WebView,System.String,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.StartedProvisionalLoad(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.WillCloseFrame(WebKit.WebView,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.WillPerformClientRedirect(WebKit.WebView,Foundation.NSUrl,System.Double,Foundation.NSDate,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebFrameLoadDelegateRx.WindowScriptObjectAvailable(WebKit.WebView,WebKit.WebScriptObject)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WebPolicyDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WebPolicyDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WebPolicyDelegateRx.DecidePolicyForMimeTypeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebPolicyDelegate.DecidePolicyForMimeType(WebKit.WebView,System.String,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebPolicyDelegateRx.DecidePolicyForNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebPolicyDelegate.DecidePolicyForNavigation(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebPolicyDelegateRx.DecidePolicyForNewWindowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebPolicyDelegate.DecidePolicyForNewWindow(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,System.String,Foundation.NSObject)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebPolicyDelegateRx.UnableToImplementPolicyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebPolicyDelegate.UnableToImplementPolicy(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WebPolicyDelegateRx.DecidePolicyForMimeType(WebKit.WebView,System.String,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebPolicyDelegateRx.DecidePolicyForNavigation(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,WebKit.WebFrame,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebPolicyDelegateRx.DecidePolicyForNewWindow(WebKit.WebView,Foundation.NSDictionary,Foundation.NSUrlRequest,System.String,Foundation.NSObject)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebPolicyDelegateRx.UnableToImplementPolicy(WebKit.WebView,Foundation.NSError,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WebResourceLoadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WebResourceLoadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnCancelledAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnCancelledAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnFailedLoadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnFailedLoading(WebKit.WebView,Foundation.NSObject,Foundation.NSError,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnFinishedLoadingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnFinishedLoading(WebKit.WebView,Foundation.NSObject,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnPlugInFailedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnPlugInFailed(WebKit.WebView,Foundation.NSError,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnReceivedAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnReceivedAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnReceivedContentLengthObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnReceivedContentLength(WebKit.WebView,Foundation.NSObject,System.nint,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebResourceLoadDelegateRx.OnReceivedResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebResourceLoadDelegate.OnReceivedResponse(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlResponse,WebKit.WebDataSource)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnCancelledAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnFailedLoading(WebKit.WebView,Foundation.NSObject,Foundation.NSError,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnFinishedLoading(WebKit.WebView,Foundation.NSObject,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnPlugInFailed(WebKit.WebView,Foundation.NSError,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnReceivedAuthenticationChallenge(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlAuthenticationChallenge,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnReceivedContentLength(WebKit.WebView,Foundation.NSObject,System.nint,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebResourceLoadDelegateRx.OnReceivedResponse(WebKit.WebView,Foundation.NSObject,Foundation.NSUrlResponse,WebKit.WebDataSource)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WebUIDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WebUIDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UICloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIClose(WebKit.WebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIDrawFooterInRectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIDrawFooterInRect(WebKit.WebView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIDrawHeaderInRectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIDrawHeaderInRect(WebKit.WebView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIFocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIFocus(WebKit.WebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIMakeFirstResponderObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIMakeFirstResponder(WebKit.WebView,AppKit.NSResponder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIMouseDidMoveOverElementObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIMouseDidMoveOverElement(WebKit.WebView,Foundation.NSDictionary,AppKit.NSEventModifierMask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIPrintFrameViewObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIPrintFrameView(WebKit.WebView,WebKit.WebFrameView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIRunJavaScriptAlertPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIRunJavaScriptAlertPanel(WebKit.WebView,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIRunJavaScriptAlertPanelMessageObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIRunJavaScriptAlertPanelMessage(WebKit.WebView,System.String,WebKit.WebFrame)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIRunModalObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIRunModal(WebKit.WebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIRunOpenPanelForFileButtonObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIRunOpenPanelForFileButton(WebKit.WebView,WebKit.IWebOpenPanelResultListener)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetContentRectObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetContentRect(WebKit.WebView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetFrameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetFrame(WebKit.WebView,CoreGraphics.CGRect)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetResizableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetResizable(WebKit.WebView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetStatusBarVisibleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetStatusBarVisible(WebKit.WebView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetStatusTextObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetStatusText(WebKit.WebView,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UISetToolbarsVisibleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UISetToolbarsVisible(WebKit.WebView,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIShowObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIShow(WebKit.WebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIUnfocusObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIUnfocus(WebKit.WebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIWillPerformDragDestinationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIWillPerformDragDestination(WebKit.WebView,WebKit.WebDragDestinationAction,AppKit.NSDraggingInfo)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WebUIDelegateRx.UIWillPerformDragSourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WebUIDelegate.UIWillPerformDragSource(WebKit.WebView,WebKit.WebDragSourceAction,CoreGraphics.CGPoint,AppKit.NSPasteboard)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIClose(WebKit.WebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIDrawFooterInRect(WebKit.WebView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIDrawHeaderInRect(WebKit.WebView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIFocus(WebKit.WebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIMakeFirstResponder(WebKit.WebView,AppKit.NSResponder)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIMouseDidMoveOverElement(WebKit.WebView,Foundation.NSDictionary,AppKit.NSEventModifierMask)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIPrintFrameView(WebKit.WebView,WebKit.WebFrameView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIRunJavaScriptAlertPanel(WebKit.WebView,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIRunJavaScriptAlertPanelMessage(WebKit.WebView,System.String,WebKit.WebFrame)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIRunModal(WebKit.WebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIRunOpenPanelForFileButton(WebKit.WebView,WebKit.IWebOpenPanelResultListener)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetContentRect(WebKit.WebView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetFrame(WebKit.WebView,CoreGraphics.CGRect)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetResizable(WebKit.WebView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetStatusBarVisible(WebKit.WebView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetStatusText(WebKit.WebView,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UISetToolbarsVisible(WebKit.WebView,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIShow(WebKit.WebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIUnfocus(WebKit.WebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIWillPerformDragDestination(WebKit.WebView,WebKit.WebDragDestinationAction,AppKit.NSDraggingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WebUIDelegateRx.UIWillPerformDragSource(WebKit.WebView,WebKit.WebDragSourceAction,CoreGraphics.CGPoint,AppKit.NSPasteboard)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WKNavigationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WKNavigationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.ContentProcessDidTerminateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.ContentProcessDidTerminate(WebKit.WKWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DecidePolicyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKWebpagePreferences,System.Action{WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidCommitNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidCommitNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFailNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFailNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFailProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFailProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidFinishNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidFinishNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidReceiveAuthenticationChallengeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidReceiveAuthenticationChallenge(WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidReceiveServerRedirectForProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKNavigationDelegateRx.DidStartProvisionalNavigationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKNavigationDelegate.DidStartProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.ContentProcessDidTerminate(WebKit.WKWebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationAction,WebKit.WKWebpagePreferences,System.Action{WebKit.WKNavigationActionPolicy,WebKit.WKWebpagePreferences})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidCommitNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFailNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFailProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidFinishNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidReceiveAuthenticationChallenge(WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidReceiveServerRedirectForProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKNavigationDelegateRx.DidStartProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)">
            <inheritdoc/>
        </member>
        <member name="T:WebKit.WKUIDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:WebKit.WKUIDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.DidClose(WebKit.WKWebView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptAlertPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptAlertPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptConfirmPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptConfirmPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunJavaScriptTextInputPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunJavaScriptTextInputPanel(WebKit.WKWebView,System.String,System.String,WebKit.WKFrameInfo,System.Action{System.String})"/> method is invoked.
            </summary>
        </member>
        <member name="P:WebKit.WKUIDelegateRx.RunOpenPanelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:WebKit.WKUIDelegate.RunOpenPanel(WebKit.WKWebView,WebKit.WKOpenPanelParameters,WebKit.WKFrameInfo,System.Action{Foundation.NSUrl[]})"/> method is invoked.
            </summary>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.DidClose(WebKit.WKWebView)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptAlertPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptConfirmPanel(WebKit.WKWebView,System.String,WebKit.WKFrameInfo,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunJavaScriptTextInputPanel(WebKit.WKWebView,System.String,System.String,WebKit.WKFrameInfo,System.Action{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:WebKit.WKUIDelegateRx.RunOpenPanel(WebKit.WKWebView,WebKit.WKOpenPanelParameters,WebKit.WKFrameInfo,System.Action{Foundation.NSUrl[]})">
            <inheritdoc/>
        </member>
        <member name="T:ObjCRuntime.Events">
            <summary>
            A class that contains extension methods to wrap events contained within static classes within the <see cref = "N:ObjCRuntime"/> namespace.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeAssemblyRegistration">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.AssemblyRegistration"/> event triggers.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalManagedException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalManagedException"/> event triggers.
            </summary>
        </member>
        <member name="P:ObjCRuntime.Events.RuntimeMarshalObjectiveCException">
            <summary>
            Gets an observable which signals when the <see cref = "E:ObjCRuntime.Runtime.MarshalObjectiveCException"/> event triggers.
            </summary>
        </member>
        <member name="T:AuthenticationServices.ASAuthorizationControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AuthenticationServices.ASAuthorizationControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AuthenticationServices.ASAuthorizationControllerDelegate.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AuthenticationServices.ASAuthorizationControllerDelegateRx.DidComplete(AuthenticationServices.ASAuthorizationController,AuthenticationServices.ASAuthorization)">
            <inheritdoc/>
        </member>
        <member name="T:AuthenticationServices.ASWebAuthenticationSessionRequestDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AuthenticationServices.ASWebAuthenticationSessionRequestDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AuthenticationServices.ASWebAuthenticationSessionRequestDelegateRx.DidCancelObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AuthenticationServices.ASWebAuthenticationSessionRequestDelegate.DidCancel(AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AuthenticationServices.ASWebAuthenticationSessionRequestDelegateRx.DidCompleteObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AuthenticationServices.ASWebAuthenticationSessionRequestDelegate.DidComplete(AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSUrl)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AuthenticationServices.ASWebAuthenticationSessionRequestDelegateRx.DidCancel(AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AuthenticationServices.ASWebAuthenticationSessionRequestDelegateRx.DidComplete(AuthenticationServices.ASWebAuthenticationSessionRequest,Foundation.NSUrl)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVCaptureViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVCaptureViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVCaptureViewDelegateRx.StartRecordingObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVCaptureViewDelegate.StartRecording(AVKit.AVCaptureView,AVFoundation.AVCaptureFileOutput)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVCaptureViewDelegateRx.StartRecording(AVKit.AVCaptureView,AVFoundation.AVCaptureFileOutput)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVPictureInPictureControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVPictureInPictureControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.DidStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.DidStartPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.DidStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.DidStopPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.FailedToStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.FailedToStartPictureInPicture(AVKit.AVPictureInPictureController,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.RestoreUserInterfaceForPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.RestoreUserInterfaceForPictureInPicture(AVKit.AVPictureInPictureController,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.WillStartPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.WillStartPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPictureInPictureControllerDelegateRx.WillStopPictureInPictureObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPictureInPictureControllerDelegate.WillStopPictureInPicture(AVKit.AVPictureInPictureController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.DidStartPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.DidStopPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.FailedToStartPictureInPicture(AVKit.AVPictureInPictureController,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.RestoreUserInterfaceForPictureInPicture(AVKit.AVPictureInPictureController,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.WillStartPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPictureInPictureControllerDelegateRx.WillStopPictureInPicture(AVKit.AVPictureInPictureController)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVPlayerViewPictureInPictureDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVPlayerViewPictureInPictureDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.DidStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.DidStart(AVKit.AVPlayerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.DidStopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.DidStop(AVKit.AVPlayerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.FailedToStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.FailedToStart(AVKit.AVPlayerView,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.RestoreUserInterfaceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.RestoreUserInterface(AVKit.AVPlayerView,System.Action{System.Boolean})"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.WillStartObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.WillStart(AVKit.AVPlayerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVPlayerViewPictureInPictureDelegateRx.WillStopObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVPlayerViewPictureInPictureDelegate.WillStop(AVKit.AVPlayerView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.DidStart(AVKit.AVPlayerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.DidStop(AVKit.AVPlayerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.FailedToStart(AVKit.AVPlayerView,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.RestoreUserInterface(AVKit.AVPlayerView,System.Action{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.WillStart(AVKit.AVPlayerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVPlayerViewPictureInPictureDelegateRx.WillStop(AVKit.AVPlayerView)">
            <inheritdoc/>
        </member>
        <member name="T:AVKit.AVRoutePickerViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:AVKit.AVRoutePickerViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.DidEndPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:AVKit.AVRoutePickerViewDelegate.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)"/> method is invoked.
            </summary>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.DidEndPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="M:AVKit.AVRoutePickerViewDelegateRx.WillBeginPresentingRoutes(AVKit.AVRoutePickerView)">
            <inheritdoc/>
        </member>
        <member name="T:ContactsUI.CNContactPickerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ContactsUI.CNContactPickerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.ContactPropertySelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.ContactPropertySelected(ContactsUI.CNContactPicker,Contacts.CNContactProperty)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.ContactSelectedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.ContactSelected(ContactsUI.CNContactPicker,Contacts.CNContact)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.DidCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.DidClose(ContactsUI.CNContactPicker)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ContactsUI.CNContactPickerDelegateRx.WillCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ContactsUI.CNContactPickerDelegate.WillClose(ContactsUI.CNContactPicker)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.ContactPropertySelected(ContactsUI.CNContactPicker,Contacts.CNContactProperty)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.ContactSelected(ContactsUI.CNContactPicker,Contacts.CNContact)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.DidClose(ContactsUI.CNContactPicker)">
            <inheritdoc/>
        </member>
        <member name="M:ContactsUI.CNContactPickerDelegateRx.WillClose(ContactsUI.CNContactPicker)">
            <inheritdoc/>
        </member>
        <member name="T:CoreData.NSCoreDataCoreSpotlightDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreData.NSCoreDataCoreSpotlightDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexAllSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSCoreDataCoreSpotlightDelegate.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreData.NSCoreDataCoreSpotlightDelegate.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CoreData.NSCoreDataCoreSpotlightDelegateRx.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:CoreSpotlight.CSSearchableIndexDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreSpotlight.CSSearchableIndexDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.DidFinishThrottleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.DidFinishThrottle(CoreSpotlight.CSSearchableIndex)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.DidThrottleObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.DidThrottle(CoreSpotlight.CSSearchableIndex)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexAllSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexSearchableItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreSpotlight.CSSearchableIndexDelegate.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.DidFinishThrottle(CoreSpotlight.CSSearchableIndex)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.DidThrottle(CoreSpotlight.CSSearchableIndex)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexAllSearchableItems(CoreSpotlight.CSSearchableIndex,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:CoreSpotlight.CSSearchableIndexDelegateRx.ReindexSearchableItems(CoreSpotlight.CSSearchableIndex,System.String[],System.Action)">
            <inheritdoc/>
        </member>
        <member name="T:CoreWlan.CWEventDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:CoreWlan.CWEventDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.BssidDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.BssidDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.ClientConnectionInterruptedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.ClientConnectionInterrupted"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.ClientConnectionInvalidatedObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.ClientConnectionInvalidated"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.CountryCodeDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.CountryCodeDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.LinkDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.LinkDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.LinkQualityDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.LinkQualityDidChangeForWiFi(System.String,System.Int32,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.ModeDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.ModeDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.PowerStateDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.PowerStateDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.ScanCacheUpdatedForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.ScanCacheUpdatedForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:CoreWlan.CWEventDelegateRx.SsidDidChangeForWiFiObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:CoreWlan.CWEventDelegate.SsidDidChangeForWiFi(System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.BssidDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.ClientConnectionInterrupted">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.ClientConnectionInvalidated">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.CountryCodeDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.LinkDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.LinkQualityDidChangeForWiFi(System.String,System.Int32,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.ModeDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.PowerStateDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.ScanCacheUpdatedForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoreWlan.CWEventDelegateRx.SsidDidChangeForWiFi(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:GameplayKit.GKAgentDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:GameplayKit.GKAgentDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentDidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentDidUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="P:GameplayKit.GKAgentDelegateRx.AgentWillUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:GameplayKit.GKAgentDelegate.AgentWillUpdate(GameplayKit.GKAgent)"/> method is invoked.
            </summary>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentDidUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="M:GameplayKit.GKAgentDelegateRx.AgentWillUpdate(GameplayKit.GKAgent)">
            <inheritdoc/>
        </member>
        <member name="T:ImageCaptureCore.ICCameraDeviceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageCaptureCore.ICCameraDeviceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidAddItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidAddItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidAddItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidAddItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidBecomeReadyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidBecomeReady(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidBecomeReadyWithCompleteContentCatalogObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidBecomeReadyWithCompleteContentCatalog(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeCapabilityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidChangeCapability(ImageCaptureCore.ICCameraDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidChangeName(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeSharingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidChangeSharingState(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidCloseSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidCompleteDeleteFilesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidCompleteDeleteFiles(ImageCaptureCore.ICCameraDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidOpenSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveButtonPressObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveCustomNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveMetadataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveMetadata(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceivePtpEventObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceivePtpEvent(ImageCaptureCore.ICCameraDevice,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveStatusInformationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveThumbnailObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidReceiveThumbnail(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveDevice(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveItemObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidRemoveItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRenameItemsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDelegate.DidRenameItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidAddItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidAddItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidBecomeReady(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidBecomeReadyWithCompleteContentCatalog(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeCapability(ImageCaptureCore.ICCameraDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeName(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidChangeSharingState(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidCompleteDeleteFiles(ImageCaptureCore.ICCameraDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveMetadata(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceivePtpEvent(ImageCaptureCore.ICCameraDevice,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidReceiveThumbnail(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveDevice(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveItem(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRemoveItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDelegateRx.DidRenameItems(ImageCaptureCore.ICCameraDevice,ImageCaptureCore.ICCameraItem[])">
            <inheritdoc/>
        </member>
        <member name="T:ImageCaptureCore.ICCameraDeviceDownloadDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageCaptureCore.ICCameraDeviceDownloadDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDownloadDelegateRx.DidDownloadFileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDownloadDelegate.DidDownloadFile(ImageCaptureCore.ICCameraFile,Foundation.NSError,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},System.IntPtr)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICCameraDeviceDownloadDelegateRx.DidReceiveDownloadProgressObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICCameraDeviceDownloadDelegate.DidReceiveDownloadProgress(ImageCaptureCore.ICCameraFile,System.Int64,System.Int64)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDownloadDelegateRx.DidDownloadFile(ImageCaptureCore.ICCameraFile,Foundation.NSError,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICCameraDeviceDownloadDelegateRx.DidReceiveDownloadProgress(ImageCaptureCore.ICCameraFile,System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:ImageCaptureCore.ICDeviceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageCaptureCore.ICDeviceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.DeviceDidChangeNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.DeviceDidChangeName(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.DeviceDidChangeSharingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.DeviceDidChangeSharingState(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidAddDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.DidAddDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidEnumerateLocalDevicesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.DidEnumerateLocalDevices(ImageCaptureCore.ICDeviceBrowser)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidRemoveDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.DidRemoveDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceBrowserDelegateRx.RequestsSelectDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceBrowserDelegate.RequestsSelectDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.DeviceDidChangeName(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.DeviceDidChangeSharingState(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidAddDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidEnumerateLocalDevices(ImageCaptureCore.ICDeviceBrowser)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.DidRemoveDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceBrowserDelegateRx.RequestsSelectDevice(ImageCaptureCore.ICDeviceBrowser,ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="T:ImageCaptureCore.ICDeviceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageCaptureCore.ICDeviceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidBecomeReadyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidBecomeReady(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidChangeNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidChangeName(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidChangeSharingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidChangeSharingState(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidCloseSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidOpenSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveButtonPressObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveCustomNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveStatusInformationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICDeviceDelegateRx.DidRemoveDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICDeviceDelegate.DidRemoveDevice(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidBecomeReady(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidChangeName(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidChangeSharingState(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICDeviceDelegateRx.DidRemoveDevice(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="T:ImageCaptureCore.ICScannerDeviceDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:ImageCaptureCore.ICScannerDeviceDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidBecomeAvailableObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidBecomeAvailable(ImageCaptureCore.ICScannerDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidBecomeReadyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidBecomeReady(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidChangeNameObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidChangeName(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidChangeSharingStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidChangeSharingState(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCloseSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCompleteOverviewScanObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidCompleteOverviewScan(ImageCaptureCore.ICScannerDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCompleteScanObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidCompleteScan(ImageCaptureCore.ICScannerDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidEncounterErrorObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidOpenSessionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveButtonPressObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveCustomNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveStatusInformationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidRemoveDeviceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidRemoveDevice(ImageCaptureCore.ICDevice)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidScanToBandDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidScanToBandData(ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerBandData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidScanToUrlObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidScanToUrl(ImageCaptureCore.ICScannerDevice,Foundation.NSUrl,Foundation.NSData)"/> method is invoked.
            </summary>
        </member>
        <member name="P:ImageCaptureCore.ICScannerDeviceDelegateRx.DidSelectFunctionalUnitObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:ImageCaptureCore.ICScannerDeviceDelegate.DidSelectFunctionalUnit(ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerFunctionalUnit,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidBecomeAvailable(ImageCaptureCore.ICScannerDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidBecomeReady(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidChangeName(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidChangeSharingState(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCloseSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCompleteOverviewScan(ImageCaptureCore.ICScannerDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidCompleteScan(ImageCaptureCore.ICScannerDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidEncounterError(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidOpenSession(ImageCaptureCore.ICDevice,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveButtonPress(ImageCaptureCore.ICDevice,Foundation.NSString)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveCustomNotification(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidReceiveStatusInformation(ImageCaptureCore.ICDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidRemoveDevice(ImageCaptureCore.ICDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidScanToBandData(ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerBandData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidScanToUrl(ImageCaptureCore.ICScannerDevice,Foundation.NSUrl,Foundation.NSData)">
            <inheritdoc/>
        </member>
        <member name="M:ImageCaptureCore.ICScannerDeviceDelegateRx.DidSelectFunctionalUnit(ImageCaptureCore.ICScannerDevice,ImageCaptureCore.ICScannerFunctionalUnit,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="T:MetalKit.MTKViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MetalKit.MTKViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.Draw(MetalKit.MTKView)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MetalKit.MTKViewDelegateRx.DrawableSizeWillChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MetalKit.MTKViewDelegate.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.Draw(MetalKit.MTKView)">
            <inheritdoc/>
        </member>
        <member name="M:MetalKit.MTKViewDelegateRx.DrawableSizeWillChange(MetalKit.MTKView,CoreGraphics.CGSize)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCAdvertiserAssistantDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCAdvertiserAssistantDelegate.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.DidDismissInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCAdvertiserAssistantDelegateRx.WillPresentInvitation(MultipeerConnectivity.MCAdvertiserAssistant)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCBrowserViewControllerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCBrowserViewControllerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinishObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.DidFinish(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCBrowserViewControllerDelegate.WasCancelled(MultipeerConnectivity.MCBrowserViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.DidFinish(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCBrowserViewControllerDelegateRx.WasCancelled(MultipeerConnectivity.MCBrowserViewController)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidNotStartAdvertisingPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateRx.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCNearbyServiceBrowserDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeersObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.DidNotStartBrowsingForPeers(MultipeerConnectivity.MCNearbyServiceBrowser,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.FoundPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID,Foundation.NSDictionary)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegateRx.LostPeer(MultipeerConnectivity.MCNearbyServiceBrowser,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="T:MultipeerConnectivity.MCSessionDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:MultipeerConnectivity.MCSessionDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidChangeStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveDataObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStreamObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)"/> method is invoked.
            </summary>
        </member>
        <member name="P:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResourceObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)"/> method is invoked.
            </summary>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)">
            <inheritdoc/>
        </member>
        <member name="M:MultipeerConnectivity.MCSessionDelegateRx.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)">
            <inheritdoc/>
        </member>
        <member name="T:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:NetworkExtension.NWTcpConnectionAuthenticationDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.EvaluateTrustObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrust(NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action{Security.SecTrust})"/> method is invoked.
            </summary>
        </member>
        <member name="P:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.ProvideIdentityObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.ProvideIdentity(NetworkExtension.NWTcpConnection,System.Action{Security.SecIdentity,Foundation.NSArray})"/> method is invoked.
            </summary>
        </member>
        <member name="M:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.EvaluateTrust(NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action{Security.SecTrust})">
            <inheritdoc/>
        </member>
        <member name="M:NetworkExtension.NWTcpConnectionAuthenticationDelegateRx.ProvideIdentity(NetworkExtension.NWTcpConnection,System.Action{Security.SecIdentity,Foundation.NSArray})">
            <inheritdoc/>
        </member>
        <member name="T:PhotosUI.PHLivePhotoViewDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PhotosUI.PHLivePhotoViewDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlaybackObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PhotosUI.PHLivePhotoViewDelegate.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.DidEndPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="M:PhotosUI.PHLivePhotoViewDelegateRx.WillBeginPlayback(PhotosUI.PHLivePhotoView,PhotosUI.PHLivePhotoViewPlaybackStyle)">
            <inheritdoc/>
        </member>
        <member name="T:PushKit.PKPushRegistryDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:PushKit.PKPushRegistryDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidInvalidatePushTokenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidInvalidatePushToken(PushKit.PKPushRegistry,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidReceiveIncomingPushObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidReceiveIncomingPush(PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:PushKit.PKPushRegistryDelegateRx.DidUpdatePushCredentialsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:PushKit.PKPushRegistryDelegate.DidUpdatePushCredentials(PushKit.PKPushRegistry,PushKit.PKPushCredentials,System.String)"/> method is invoked.
            </summary>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidInvalidatePushToken(PushKit.PKPushRegistry,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidReceiveIncomingPush(PushKit.PKPushRegistry,PushKit.PKPushPayload,System.String,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:PushKit.PKPushRegistryDelegateRx.DidUpdatePushCredentials(PushKit.PKPushRegistry,PushKit.PKPushCredentials,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:QuickLookUI.QLPreviewPanelDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:QuickLookUI.QLPreviewPanelDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidBecomeKeyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidBecomeKey(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidBecomeMainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidBecomeMain(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeBackingPropertiesObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidChangeBackingProperties(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidChangeScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeScreenProfileObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidChangeScreenProfile(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidDecodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidDecodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidDeminiaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidDeminiaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidEndLiveResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidEndLiveResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidEndSheetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidEndSheet(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidEnterFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidEnterVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidEnterVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidExitFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidExitVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidExitVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidExposeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidExpose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidFailToEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidFailToEnterFullScreen(AppKit.NSWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidFailToExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidFailToExitFullScreen(AppKit.NSWindow)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidMiniaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidMiniaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidResignKeyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidResignKey(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidResignMainObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidResignMain(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.DidUpdateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.DidUpdate(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.StartCustomAnimationToEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.StartCustomAnimationToEnterFullScreen(AppKit.NSWindow,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.StartCustomAnimationToExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.StartCustomAnimationToExitFullScreen(AppKit.NSWindow,System.Double)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillBeginSheetObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillBeginSheet(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillCloseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillClose(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillEncodeRestorableStateObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillEncodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillEnterFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillEnterFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillEnterVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillEnterVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillExitFullScreenObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillExitFullScreen(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillExitVersionBrowserObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillExitVersionBrowser(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillMiniaturizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillMiniaturize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillMoveObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillMove(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:QuickLookUI.QLPreviewPanelDelegateRx.WillStartLiveResizeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:QuickLookUI.QLPreviewPanelDelegate.WillStartLiveResize(Foundation.NSNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidBecomeKey(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidBecomeMain(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeBackingProperties(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidChangeScreenProfile(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidDecodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidDeminiaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidEndLiveResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidEndSheet(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidEnterFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidEnterVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidExitFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidExitVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidExpose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidFailToEnterFullScreen(AppKit.NSWindow)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidFailToExitFullScreen(AppKit.NSWindow)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidMiniaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidResignKey(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidResignMain(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.DidUpdate(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.StartCustomAnimationToEnterFullScreen(AppKit.NSWindow,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.StartCustomAnimationToExitFullScreen(AppKit.NSWindow,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillBeginSheet(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillClose(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillEncodeRestorableState(AppKit.NSWindow,Foundation.NSCoder)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillEnterFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillEnterVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillExitFullScreen(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillExitVersionBrowser(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillMiniaturize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillMove(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="M:QuickLookUI.QLPreviewPanelDelegateRx.WillStartLiveResize(Foundation.NSNotification)">
            <inheritdoc/>
        </member>
        <member name="T:Speech.SFSpeechRecognitionTaskDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Speech.SFSpeechRecognitionTaskDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidDetectSpeechObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidDetectSpeech(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishRecognitionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidFinishRecognition(Speech.SFSpeechRecognitionTask,Speech.SFSpeechRecognitionResult)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishSuccessfullyObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidFinishSuccessfully(Speech.SFSpeechRecognitionTask,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.DidHypothesizeTranscriptionObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.DidHypothesizeTranscription(Speech.SFSpeechRecognitionTask,Speech.SFTranscription)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.FinishedReadingAudioObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.FinishedReadingAudio(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognitionTaskDelegateRx.WasCancelledObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognitionTaskDelegate.WasCancelled(Speech.SFSpeechRecognitionTask)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidDetectSpeech(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishRecognition(Speech.SFSpeechRecognitionTask,Speech.SFSpeechRecognitionResult)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidFinishSuccessfully(Speech.SFSpeechRecognitionTask,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.DidHypothesizeTranscription(Speech.SFSpeechRecognitionTask,Speech.SFTranscription)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.FinishedReadingAudio(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="M:Speech.SFSpeechRecognitionTaskDelegateRx.WasCancelled(Speech.SFSpeechRecognitionTask)">
            <inheritdoc/>
        </member>
        <member name="T:Speech.SFSpeechRecognizerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:Speech.SFSpeechRecognizerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:Speech.SFSpeechRecognizerDelegateRx.AvailabilityDidChangeObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:Speech.SFSpeechRecognizerDelegate.AvailabilityDidChange(Speech.SFSpeechRecognizer,System.Boolean)"/> method is invoked.
            </summary>
        </member>
        <member name="M:Speech.SFSpeechRecognizerDelegateRx.AvailabilityDidChange(Speech.SFSpeechRecognizer,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:UserNotifications.UNUserNotificationCenterDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:UserNotifications.UNUserNotificationCenterDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.DidReceiveNotificationResponseObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.DidReceiveNotificationResponse(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotificationResponse,System.Action)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.OpenSettingsObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.OpenSettings(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification)"/> method is invoked.
            </summary>
        </member>
        <member name="P:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotificationObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:UserNotifications.UNUserNotificationCenterDelegate.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})"/> method is invoked.
            </summary>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.DidReceiveNotificationResponse(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotificationResponse,System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.OpenSettings(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification)">
            <inheritdoc/>
        </member>
        <member name="M:UserNotifications.UNUserNotificationCenterDelegateRx.WillPresentNotification(UserNotifications.UNUserNotificationCenter,UserNotifications.UNNotification,System.Action{UserNotifications.UNNotificationPresentationOptions})">
            <inheritdoc/>
        </member>
        <member name="T:VideoSubscriberAccount.VSAccountManagerDelegateRx">
            <summary>
            Wraps delegates events from <see cref = "T:VideoSubscriberAccount.VSAccountManagerDelegate"/> into Observables.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.DismissViewController(VideoSubscriberAccount.VSAccountManager,AppKit.NSViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="P:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewControllerObs">
            <summary>
            Gets an observable which signals when the <see cref = "M:VideoSubscriberAccount.VSAccountManagerDelegate.PresentViewController(VideoSubscriberAccount.VSAccountManager,AppKit.NSViewController)"/> method is invoked.
            </summary>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.DismissViewController(VideoSubscriberAccount.VSAccountManager,AppKit.NSViewController)">
            <inheritdoc/>
        </member>
        <member name="M:VideoSubscriberAccount.VSAccountManagerDelegateRx.PresentViewController(VideoSubscriberAccount.VSAccountManager,AppKit.NSViewController)">
            <inheritdoc/>
        </member>
    </members>
</doc>
